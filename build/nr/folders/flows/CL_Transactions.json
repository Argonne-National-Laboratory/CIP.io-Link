[
  {
    "id": "daf7a59ca2ce18df",
    "type": "tab",
    "label": "CL_Transactions",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "b790fef9f4f7de2c",
    "type": "junction",
    "z": "daf7a59ca2ce18df",
    "x": 1340,
    "y": 240,
    "wires": [
      [
        "bc6bb2f523b00fa9",
        "a39145869b71df51",
        "2ef7f596c72004a1",
        "11ee4d2550f2e6b1",
        "bae6fc11c3f77385"
      ]
    ]
  },
  {
    "id": "4cc7f71877e27f96",
    "type": "junction",
    "z": "daf7a59ca2ce18df",
    "x": 740,
    "y": 920,
    "wires": [
      [
        "2a2eb5a77e70df62",
        "b2ad490ff03c2c97",
        "9214f5879d50fbe0",
        "e5e3bc3824864970",
        "4a191fd359629475",
        "a6948cd72ae1a796"
      ]
    ]
  },
  {
    "id": "cf7b88020b745f6a",
    "type": "junction",
    "z": "daf7a59ca2ce18df",
    "x": 1420,
    "y": 520,
    "wires": [
      [
        "c006c2c3567e7ee6",
        "2807de6096eb9e1f",
        "c4b73cd2d6f1efbb"
      ]
    ]
  },
  {
    "id": "e3912322d07af67d",
    "type": "ui-template",
    "z": "daf7a59ca2ce18df",
    "group": "17fb40c0e949759b",
    "page": "",
    "ui": "",
    "name": "Tx List",
    "order": 1,
    "width": "0",
    "height": "0",
    "head": "",
    "format": "<template>\n    <v-data-table  \n            v-model:search=\"search\" \n            :headers=\"headers\"\n            :items=\"msg?.payload\"\n            :filter-keys='[\"transactionId\",\"cbId\",\"_value\"]'\n            >\n    <template v-slot:top>\n        <v-toolbar flat>\n            <v-toolbar-title>\n                <v-icon color=\"medium-emphasis\" icon=\"mdi-bullseye\" size=\"x-small\" start></v-icon>\n                Transactions\n            </v-toolbar-title>\n            <v-text-field\n                v-model=\"search\"\n                label=\"Search\"\n                prepend-inner-icon=\"mdi-magnify\"\n                clear-icon=\"mdi-close-circle\"\n                variant=\"solo-filled\"\n                density=\"compact\"\n                hide-details\n                single-line\n                clearable\n            ></v-text-field>\n            <!-- v-spacer></v-spacer -->           \n            <v-tooltip text=\"Refresh\" location=\"bottom\">\n                <template v-slot:activator=\"{ props }\">\n                <v-btn icon v-bind=\"props\" @click=\"refresh\">\n                    <v-icon>mdi-refresh</v-icon>\n                </v-btn>\n                </template>\n            </v-tooltip>\n            <v-template>\n            <v-select\n                v-model=\"select\"\n                density=\"compact\"\n                :items=\"startTimes\"\n                item-title=\"title\"\n                item-value=\"value\"\n                >\n            </v-select>\n            </v-template>            \n\n\n        </v-toolbar>\n    </template>            \n      <template v-slot:item.meter=\"{ item }\">\n        <div>\n          <v-text>{{ item.meterStart }}{{item.meterStop}}</v-text>\n      </template>\n        <template v-slot:item._time=\"{ item }\">\n            <div>{{ getLocalTimeString(item._time) }}</div>\n        </template>\n      <template v-slot:item.actions=\"{ item }\">\n        <v-icon\n          class=\"me-2\"\n          size=\"small\"\n          @click=\"send({ action: 'txDetails', payload: { txId: item.transactionId, startTime: item._time }})\"\n        >\n          mdi-eye\n        </v-icon>\n      </template>\n            \n    </v-data-table>\n</template>\n\n<script>\n    export default {\n        data() {\n            // define variables available component-wide\n            // (in <template> and component functions)\n            return {\n                search: '',\n                headers: [\n                    { value: \"_time\", title: \"Time\"},\n                    //{ value: \"command\", title: \"Command\"},\n                    { value: \"transactionId\", title: \"TxId\"},\n                    { key: \"idTag\", title: \"IdTag\", sortable: true},\n                    { value: \"cbId\", title: \"EVSE\", sortable: true},\n                    { value: \"connectorId\", title: \"Conn\", sortable: true},\n                    { key: \"tx_duration\", value: item => this.getSecToMin(item.tx_duration), title: \"Duration (min)\", sortable: true},\n                    //{ value: \"meterStart\", title: \"Start\"},\n                    //{ value: \"meterStop\", title: \"Stop\"},\n                    //{ key: \"totalEnergy\", title: \"Energy (kWh)\",value: item => this.getTruncated(item.totalEnergy, 3), sortable: true},\n                    { key: \"totalEnergy\", title: \"Energy (kWh)\", sortable: true},\n                    { key: \"actions\", title: \"Details\", sortable: false},\n                ],\n                select: { title: \"past 5m\", value: '-5m'},\n                startTimes: [\n                    { title: \"past 1m\", value: '-1m'},\n                    { title: \"past 5m\", value: '-5m'},\n                    { title: \"past 15m\", value: '-15m'},\n                    { title: \"past 1h\", value: '-1h'},\n                    { title: \"past 3h\", value: '-3h'},\n                    { title: \"past 6h\", value: '-6h'},\n                    { title: \"past 12h\", value: '-12h'},\n                    { title: \"past 24h\", value: '-24h'},\n                    { title: \"past 2d\", value: '-2d'},\n                    { title: \"past 7d\", value: '-7d'},\n                    { title: \"past 30d\", value: '-30d'},\n//                    { title: \"custom\", value: 'custom'}\n                    ]\n            }\n        },\n        watch: {\n            select(newValue) {\n                this.sendOptions()\n            }\n        },\n        computed: {\n\n        },\n        methods: {\n            // expose a method to our <template> and Vue Application\n            getLocalTimeString: function (isoTime){\n                const date = new Date(isoTime)\n                const options = { \n                    year: '2-digit', \n                    month: '2-digit', \n                    day: '2-digit', \n                    hour: '2-digit', \n                    minute: '2-digit', \n                    second: '2-digit', \n                    millisecond: '3-digit',\n                    hour12: false \n                    }\n                return date.toLocaleString('en-US', options)\n            },\n            sendOptions: function() {\n                this.send({\n                    action: \"options\", \n                    options: {\n                        start: this.select \n                    }\n                })\n            },\n            getTruncated: function(value,decimals){\n                const factor = Math.pow(10, decimals);\n                return Math.floor(value * factor) / factor;\n            },\n            getSecToMin: function(value) {\n                return Math.floor(value / 60);\n            }\n        },\n        mounted() {\n            // code here when the component is first loaded\n        },\n        unmounted() {\n            // code here when the component is removed from the Dashboard\n            // i.e. when the user navigates away from the page\n        }\n    }\n</script>\n<style>\n    /* define any styles here - supports raw CSS */\n    .my-class {\n        color: red;\n    }\n    .headers {\n        font-weight: bold;\n    }\n    .ocppMsgReq {\n        color: blue;\n        font-weight: bold;\n    }\n    .ocppMsgRes {\n        color: blue;\n    }\n    .ocppMsgErr {\n        color: red;\n    }\n</style>",
    "storeOutMessages": true,
    "passthru": false,
    "resendOnRefresh": true,
    "templateScope": "local",
    "className": "",
    "x": 1210,
    "y": 520,
    "wires": [
      [
        "429f153803b4e889",
        "92d4fc8edd807919"
      ]
    ]
  },
  {
    "id": "c4b73cd2d6f1efbb",
    "type": "function",
    "z": "daf7a59ca2ce18df",
    "name": "FLUX Get raw MV OCPP",
    "func": "// clear out any incoming message for now.\nlet filter_by_tx = \"\";\nlet txId = \"00000000\"\nlet start = \"-365d\"\nif (msg.payload.txId) {\n  filter_by_tx = `|> filter(fn: (r) => r[\"transactionId\"] == \"${msg.payload.txId}\")`\n  txId = msg.payload.txId\n}\nif (msg.payload.startTime) {\n  start = msg.payload.startTime\n}\n\nmsg = {}\n\nmsg.options = {\n  txId,\n  start\n}\n\nmsg.query = `from(bucket: \"OCPP\") \\\n  |> range(start: ${start}) \\\n  |> filter(fn: (r) => r[\"_measurement\"] == \"MeterValues\") \\\n  ${filter_by_tx} \\\n  |> pivot(columnKey: [\"_field\"], rowKey: [\"_time\"], valueColumn: \"_value\") \\\n  |> drop(columns: [\"_start\",\"_stop\",\"_measurement\",\"cbId\",\"connectorId\",\"transactionId\"]) \\\n  |> sort(columns: [\"_time\"])`\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 610,
    "y": 460,
    "wires": [
      [
        "7d7516052c9c7a0a",
        "02ea19c5e98fd683"
      ]
    ]
  },
  {
    "id": "47ec7b659bf636da",
    "type": "function",
    "z": "daf7a59ca2ce18df",
    "name": "FLUX Get raw Tx OCPP",
    "func": "let options = flow.get(\"options\") ?? {}\nlet start = options?.start ?? '-1h'\n\n// clear out any incoming message for now.\nmsg = {}\n\nmsg.query = `from(bucket: \"OCPP\")\n  |> range( start: ${start})\n  |> filter(fn: (r) => r[\"_measurement\"] == \"Transaction\")\n  |> pivot(columnKey: [\"_field\"], rowKey: [\"_time\"], valueColumn: \"_value\")\n  |> drop(columns: [\"_start\",\"_stop\",\"_measurement\"])\n  |> group(columns: [\"transactionId\"])\n  |> sort(columns: [\"_time\"])`\n\n\nmsg.query = `\nfrom(bucket: \"OCPP\")\n  |> range(start: ${start})\n  |> filter(fn: (r) => r[\"_measurement\"] == \"Transaction\")\n  |> filter(fn: (r) => r[\"_field\"] == \"meterStart\" or r[\"_field\"] == \"meterStop\" or r[\"_field\"] == \"transactionId\" or r[\"_field\"] == \"timestamp\" or r[\"_field\"] == \"idTag\" or r[\"_field\"] == \"connectorId\" )\n  |> pivot(columnKey: [\"_field\"], rowKey: [\"_time\"], valueColumn: \"_value\")\n  |> filter(fn: (r) => r.transactionId != 0)\n  |> drop(columns: [\"_start\",\"_stop\",\"_measurement\",\"msgFrom\"])\n  |> group()\n  |> sort(columns: [\"_time\"])\n`\n//return msg;\n\n\nmsg.query = `\nmeterStart = from(bucket: \"OCPP\")\n  |> range(start: ${start})\n  |> filter(fn: (r) => r[\"_measurement\"] == \"Transaction\")\n  |> filter(fn: (r) => r[\"_field\"] == \"transactionId\" or r[\"_field\"] == \"meterStart\" or r[\"_field\"] == \"idTag\" or r[\"_field\"] == \"connectorId\")\n  |> filter(fn: (r) => r.command == \"StartTransaction\")\n  |> pivot(columnKey: [\"_field\"], rowKey: [\"_time\"], valueColumn: \"_value\")\n  |> filter(fn: (r) => r.transactionId != 0)\n  |> drop(columns: [\"_start\",\"_stop\",\"msgFrom\",\"_measurement\"])\n\nmeterStop = from(bucket: \"OCPP\")\n  |> range(start: ${start})\n  |> filter(fn: (r) => r[\"_measurement\"] == \"Transaction\")\n  |> filter(fn: (r) => r[\"_field\"] == \"transactionId\" or r[\"_field\"] == \"meterStop\")\n  |> filter(fn: (r) => r.command == \"StopTransaction\")\n  |> pivot(columnKey: [\"_field\"], rowKey: [\"_time\"], valueColumn: \"_value\")\n  |> filter(fn: (r) => r.transactionId != 0)\n  |> drop(columns: [\"_start\",\"_stop\",\"msgFrom\",\"_measurement\"])\n\njoin(tables: {key1: meterStart, key2: meterStop}, on: [\"transactionId\"], method: \"inner\")\n|> group()\n|> sort( columns: [\"_time\"])\n|> map(fn: (r) => ({ r with totalEnergy: r.meterStop - r.meterStart}))\n|> map(fn: (r) => ({ r with tx_duration: (uint( v: r._time_key2) - uint( v: r._time_key1)) / uint(v: 1000000000) }))\n|> map(fn: (r) => ({ r with _time: r._time_key1}))\n|> map(fn: (r) => ({ r with cbId: r.cbId_key1}))\n\n`\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 610,
    "y": 520,
    "wires": [
      [
        "3b309fbf5a5e9349",
        "4d28c5123bd6d40d"
      ]
    ]
  },
  {
    "id": "32233b212a66cfcb",
    "type": "debug",
    "z": "daf7a59ca2ce18df",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1395,
    "y": 460,
    "wires": [],
    "l": false
  },
  {
    "id": "3b309fbf5a5e9349",
    "type": "influxdb in",
    "z": "daf7a59ca2ce18df",
    "influxdb": "7cb40fcee206391e",
    "name": "",
    "query": "",
    "rawOutput": false,
    "precision": "",
    "retentionPolicy": "",
    "org": "cipio",
    "x": 820,
    "y": 520,
    "wires": [
      [
        "c5cd7189e5cb3f54"
      ]
    ]
  },
  {
    "id": "1380888fab8c8636",
    "type": "inject",
    "z": "daf7a59ca2ce18df",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": "1",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 305,
    "y": 580,
    "wires": [
      [
        "47ec7b659bf636da"
      ]
    ],
    "l": false
  },
  {
    "id": "c5cd7189e5cb3f54",
    "type": "function",
    "z": "daf7a59ca2ce18df",
    "name": "FLUX remove extras",
    "func": "msg.payload.forEach(function(ocppMsg) {\n    delete ocppMsg.result;\n    delete ocppMsg.table;\n});\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1020,
    "y": 520,
    "wires": [
      [
        "e3912322d07af67d",
        "aef68b6786e5c5a7"
      ]
    ]
  },
  {
    "id": "aa18045a070128d9",
    "type": "link in",
    "z": "daf7a59ca2ce18df",
    "name": "MV Refresh",
    "links": [
      "b30433a611efd29c"
    ],
    "x": 145,
    "y": 460,
    "wires": [
      []
    ]
  },
  {
    "id": "22993ff229d6db8d",
    "type": "link in",
    "z": "daf7a59ca2ce18df",
    "name": "Transaction Refreh",
    "links": [
      "7a8e05f5d5a2e926"
    ],
    "x": 145,
    "y": 520,
    "wires": [
      [
        "47ec7b659bf636da"
      ]
    ]
  },
  {
    "id": "70f90fb397f12726",
    "type": "ui-template",
    "z": "daf7a59ca2ce18df",
    "group": "750f030497b122aa",
    "page": "",
    "ui": "",
    "name": "MV by TxId",
    "order": 9,
    "width": 0,
    "height": 0,
    "head": "",
    "format": "<template>\n    <!-- v-text-field\n        v-model=\"search\"\n        label=\"Search\"\n        prepend-inner-icon=\"mdi-magnify\"\n        variant=\"outlined\"\n        clearable\n        hide-details\n        single-line\n      ></v-text-field -->\n\n    <v-data-table  \n        :headers=\"headers\"\n        :items=\"msg.payload\"\n        :filter-keys='[\"CurrentA\",\"VoltageV\",\"EnergykWh\"]'\n    >\n        <template v-slot:header._time>\n            <div class=\"headers\">Time</div>\n        </template>\n        <template v-slot:header.VoltageV>\n            <div class=\"headers\">Volts</div>\n        </template>\n\n        <template v-slot:item._time=\"{ item }\">\n            <div>{{ getLocalTimeString(item._time) }}</div>\n        </template>\n    </v-data-table>\n</template>\n\n<script>\n    export default {\n        data() {\n            // define variables available component-wide\n            // (in <template> and component functions)\n            return {\n                search: '',\n                headers: [\n                    { title: \"Time\", key: \"_time\"},\n                    { title: \"Current(A)\", key: \"CurrentA\", value: item => this.getTruncated(item.CurrentA, 3)},\n                    { title: \"Volts(V)\", key: \"VoltageV\", value: item => this.getTruncated(item.VoltageV, 3)},\n                    { title: \"Power(kW)\", key: \"PowerkW\", value: item => this.getTruncated(item.PowerkW, 3)},\n                    { title: \"Energy(kWh)\", key: \"EnergykWh\", value: item => this.getTruncated(item.EnergykWh, 3)},\n                    { title: \"SoC (%)\", key: \"SoC\"}\n                ]\n\n            }\n        },\n        watch: {\n            // watch for any changes of \"count\"\n\n        },\n        computed: {\n\n        },\n        methods: {\n            // expose a method to our <template> and Vue Application\n            getLocalTimeString: function (isoTime){\n                const date = new Date(isoTime)\n                const options = { \n                    year: '2-digit', \n                    month: '2-digit', \n                    day: '2-digit', \n                    hour: '2-digit', \n                    minute: '2-digit', \n                    second: '2-digit', \n                    millisecond: '3-digit',\n                    hour12: false \n                    }\n                return date.toLocaleString('en-US', options)\n            },\n            getTruncated: function(value,decimals){\n                const factor = Math.pow(10, decimals);\n                return Math.floor(value * factor) / factor;\n            }\n        },\n        mounted() {\n            // code here when the component is first loaded\n        },\n        unmounted() {\n            // code here when the component is removed from the Dashboard\n            // i.e. when the user navigates away from the page\n        }\n    }\n</script>\n<style>\n    /* define any styles here - supports raw CSS */\n    .headers {\n        font-weight: bold;\n        color: green;\n    }\n\n</style>",
    "storeOutMessages": true,
    "passthru": false,
    "resendOnRefresh": true,
    "templateScope": "local",
    "className": "",
    "x": 1450,
    "y": 420,
    "wires": [
      []
    ]
  },
  {
    "id": "7d7516052c9c7a0a",
    "type": "influxdb in",
    "z": "daf7a59ca2ce18df",
    "influxdb": "7cb40fcee206391e",
    "name": "",
    "query": "",
    "rawOutput": false,
    "precision": "",
    "retentionPolicy": "",
    "org": "cipio",
    "x": 900,
    "y": 460,
    "wires": [
      [
        "20adfc41cd29af1b"
      ]
    ]
  },
  {
    "id": "20adfc41cd29af1b",
    "type": "function",
    "z": "daf7a59ca2ce18df",
    "name": "FLUX remove extras",
    "func": "msg.payload.forEach(function(ocppMsg) {\n    delete ocppMsg.result;\n    delete ocppMsg.table;\n});\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1100,
    "y": 460,
    "wires": [
      [
        "70f90fb397f12726",
        "32233b212a66cfcb",
        "bb739222584f69de"
      ]
    ]
  },
  {
    "id": "afc97f6be14c06af",
    "type": "debug",
    "z": "daf7a59ca2ce18df",
    "name": "debug 60",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1080,
    "y": 280,
    "wires": []
  },
  {
    "id": "e721721ffe065303",
    "type": "debug",
    "z": "daf7a59ca2ce18df",
    "name": "debug 61",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 740,
    "y": 700,
    "wires": []
  },
  {
    "id": "e5cf1fe4522628ee",
    "type": "ui-control",
    "z": "daf7a59ca2ce18df",
    "name": "",
    "ui": "8cdc313c9611f13f",
    "events": "all",
    "x": 600,
    "y": 700,
    "wires": [
      [
        "e721721ffe065303"
      ]
    ]
  },
  {
    "id": "add76386e6a46f5d",
    "type": "function",
    "z": "daf7a59ca2ce18df",
    "name": "Show TX",
    "func": "msg.payload = {\n    \"groups\": {\n        \"show\": [\n            \"Transactions:Transactions\"\n        ],\n        \"hide\": [\n            \"Transactions:Meter Values\"\n        ]\n    }\n}\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 420,
    "y": 660,
    "wires": [
      [
        "e5cf1fe4522628ee",
        "47ec7b659bf636da"
      ]
    ]
  },
  {
    "id": "c006c2c3567e7ee6",
    "type": "function",
    "z": "daf7a59ca2ce18df",
    "name": "Show MV",
    "func": "msg.payload = {\n    \"groups\": {\n        \"hide\": [\n            \"Transactions:Transactions\"\n        ],\n        \"show\": [\n            \"Transactions:Meter Values\"\n        ]\n    }\n}\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 420,
    "y": 700,
    "wires": [
      [
        "e5cf1fe4522628ee"
      ]
    ]
  },
  {
    "id": "5df3e99944651698",
    "type": "inject",
    "z": "daf7a59ca2ce18df",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 265,
    "y": 660,
    "wires": [
      [
        "add76386e6a46f5d"
      ]
    ],
    "l": false
  },
  {
    "id": "7ad34b56292f573d",
    "type": "inject",
    "z": "daf7a59ca2ce18df",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 265,
    "y": 700,
    "wires": [
      [
        "c006c2c3567e7ee6"
      ]
    ],
    "l": false
  },
  {
    "id": "c3993a72f3c63028",
    "type": "ui-button",
    "z": "daf7a59ca2ce18df",
    "group": "750f030497b122aa",
    "name": "",
    "label": "Return to Transaction List",
    "order": 1,
    "width": "0",
    "height": "0",
    "emulateClick": false,
    "tooltip": "",
    "color": "",
    "bgcolor": "",
    "className": "block",
    "icon": "mdi-keyboard-return",
    "iconPosition": "left",
    "payload": "{\"target\":\"Transactions\"}",
    "payloadType": "json",
    "topic": "topic",
    "topicType": "msg",
    "buttonColor": "",
    "textColor": "",
    "iconColor": "yellow",
    "enableClick": true,
    "enablePointerdown": false,
    "pointerdownPayload": "",
    "pointerdownPayloadType": "str",
    "enablePointerup": false,
    "pointerupPayload": "",
    "pointerupPayloadType": "str",
    "x": 150,
    "y": 620,
    "wires": [
      [
        "add76386e6a46f5d"
      ]
    ]
  },
  {
    "id": "bc6bb2f523b00fa9",
    "type": "ui-chart",
    "z": "daf7a59ca2ce18df",
    "group": "750f030497b122aa",
    "name": "Energy",
    "label": "Energy",
    "order": 13,
    "chartType": "line",
    "category": "",
    "categoryType": "none",
    "xAxisLabel": "",
    "xAxisProperty": "payload._time",
    "xAxisPropertyType": "msg",
    "xAxisType": "time",
    "xAxisFormat": "",
    "xAxisFormatType": "auto",
    "xmin": "",
    "xmax": "",
    "yAxisLabel": "kWh",
    "yAxisProperty": "payload.EnergykWh",
    "yAxisPropertyType": "msg",
    "ymin": "",
    "ymax": "",
    "bins": 10,
    "action": "append",
    "stackSeries": false,
    "pointShape": "circle",
    "pointRadius": 4,
    "showLegend": true,
    "removeOlder": 1,
    "removeOlderUnit": "3600",
    "removeOlderPoints": "",
    "colors": [
      "#ffa200",
      "#ff0000",
      "#ff7f0e",
      "#2ca02c",
      "#a347e1",
      "#d62728",
      "#ff9896",
      "#9467bd",
      "#c5b0d5"
    ],
    "textColor": [
      "#666666"
    ],
    "textColorDefault": true,
    "gridColor": [
      "#e5e5e5"
    ],
    "gridColorDefault": true,
    "width": "3",
    "height": "8",
    "className": "",
    "interpolation": "linear",
    "x": 1480,
    "y": 240,
    "wires": [
      []
    ]
  },
  {
    "id": "a39145869b71df51",
    "type": "ui-chart",
    "z": "daf7a59ca2ce18df",
    "group": "750f030497b122aa",
    "name": "Power",
    "label": "Power",
    "order": 12,
    "chartType": "line",
    "category": "",
    "categoryType": "none",
    "xAxisLabel": "",
    "xAxisProperty": "payload._time",
    "xAxisPropertyType": "msg",
    "xAxisType": "time",
    "xAxisFormat": "",
    "xAxisFormatType": "auto",
    "xmin": "",
    "xmax": "",
    "yAxisLabel": "kW",
    "yAxisProperty": "payload.PowerkW",
    "yAxisPropertyType": "msg",
    "ymin": "",
    "ymax": "",
    "bins": 10,
    "action": "append",
    "stackSeries": false,
    "pointShape": "circle",
    "pointRadius": 4,
    "showLegend": true,
    "removeOlder": 1,
    "removeOlderUnit": "3600",
    "removeOlderPoints": "",
    "colors": [
      "#96e407",
      "#ff0000",
      "#ff7f0e",
      "#2ca02c",
      "#a347e1",
      "#d62728",
      "#ff9896",
      "#9467bd",
      "#c5b0d5"
    ],
    "textColor": [
      "#666666"
    ],
    "textColorDefault": true,
    "gridColor": [
      "#e5e5e5"
    ],
    "gridColorDefault": true,
    "width": "3",
    "height": "8",
    "className": "",
    "interpolation": "linear",
    "x": 1470,
    "y": 280,
    "wires": [
      []
    ]
  },
  {
    "id": "2ef7f596c72004a1",
    "type": "ui-chart",
    "z": "daf7a59ca2ce18df",
    "group": "750f030497b122aa",
    "name": "SOC",
    "label": "SOC",
    "order": 14,
    "chartType": "line",
    "category": "",
    "categoryType": "none",
    "xAxisLabel": "",
    "xAxisProperty": "payload._time",
    "xAxisPropertyType": "msg",
    "xAxisType": "time",
    "xAxisFormat": "",
    "xAxisFormatType": "auto",
    "xmin": "",
    "xmax": "",
    "yAxisLabel": "%",
    "yAxisProperty": "payload.SoC",
    "yAxisPropertyType": "msg",
    "ymin": "",
    "ymax": "",
    "bins": 10,
    "action": "append",
    "stackSeries": false,
    "pointShape": "circle",
    "pointRadius": 4,
    "showLegend": true,
    "removeOlder": 1,
    "removeOlderUnit": "3600",
    "removeOlderPoints": "",
    "colors": [
      "#ae00ff",
      "#ff0000",
      "#ff7f0e",
      "#2ca02c",
      "#a347e1",
      "#d62728",
      "#ff9896",
      "#9467bd",
      "#c5b0d5"
    ],
    "textColor": [
      "#666666"
    ],
    "textColorDefault": true,
    "gridColor": [
      "#e5e5e5"
    ],
    "gridColorDefault": true,
    "width": "3",
    "height": "8",
    "className": "",
    "interpolation": "linear",
    "x": 1470,
    "y": 320,
    "wires": [
      []
    ]
  },
  {
    "id": "bb739222584f69de",
    "type": "function",
    "z": "daf7a59ca2ce18df",
    "name": "function 18",
    "func": "// Start off by clearing all the charts\nnode.send({payload: []})\n\n//Take the array and send as individual payloads to the \n// charts\n \nmsg.payload.forEach(function(mv) {\n    let msg2 = {}\n    msg2.payload = mv\n    //msg2.payload.timestamp = new Date(mv._time).getTime()\n    node.send(msg2)\n});\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1250,
    "y": 240,
    "wires": [
      [
        "b790fef9f4f7de2c"
      ]
    ]
  },
  {
    "id": "6c36ced9caa73c04",
    "type": "debug",
    "z": "daf7a59ca2ce18df",
    "name": "",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1065,
    "y": 320,
    "wires": [],
    "l": false
  },
  {
    "id": "11ee4d2550f2e6b1",
    "type": "ui-chart",
    "z": "daf7a59ca2ce18df",
    "group": "750f030497b122aa",
    "name": "Current",
    "label": "Current",
    "order": 11,
    "chartType": "line",
    "category": "",
    "categoryType": "none",
    "xAxisLabel": "",
    "xAxisProperty": "payload._time",
    "xAxisPropertyType": "msg",
    "xAxisType": "time",
    "xAxisFormat": "",
    "xAxisFormatType": "auto",
    "xmin": "",
    "xmax": "",
    "yAxisLabel": "Amps",
    "yAxisProperty": "payload.CurrentA",
    "yAxisPropertyType": "msg",
    "ymin": "",
    "ymax": "",
    "bins": 10,
    "action": "append",
    "stackSeries": false,
    "pointShape": "circle",
    "pointRadius": 4,
    "showLegend": true,
    "removeOlder": 1,
    "removeOlderUnit": "3600",
    "removeOlderPoints": "",
    "colors": [
      "#6600ff",
      "#ff0000",
      "#ff7f0e",
      "#2ca02c",
      "#a347e1",
      "#d62728",
      "#ff9896",
      "#9467bd",
      "#c5b0d5"
    ],
    "textColor": [
      "#666666"
    ],
    "textColorDefault": true,
    "gridColor": [
      "#e5e5e5"
    ],
    "gridColorDefault": true,
    "width": "3",
    "height": "8",
    "className": "",
    "interpolation": "linear",
    "x": 1481,
    "y": 200,
    "wires": [
      []
    ]
  },
  {
    "id": "bae6fc11c3f77385",
    "type": "ui-chart",
    "z": "daf7a59ca2ce18df",
    "group": "750f030497b122aa",
    "name": "Voltage",
    "label": "Voltage",
    "order": 10,
    "chartType": "line",
    "category": "",
    "categoryType": "none",
    "xAxisLabel": "",
    "xAxisProperty": "payload._time",
    "xAxisPropertyType": "msg",
    "xAxisType": "time",
    "xAxisFormat": "",
    "xAxisFormatType": "auto",
    "xmin": "",
    "xmax": "",
    "yAxisLabel": "Volts",
    "yAxisProperty": "payload.VoltageV",
    "yAxisPropertyType": "msg",
    "ymin": "",
    "ymax": "",
    "bins": 10,
    "action": "append",
    "stackSeries": false,
    "pointShape": "circle",
    "pointRadius": 4,
    "showLegend": true,
    "removeOlder": 1,
    "removeOlderUnit": "3600",
    "removeOlderPoints": "",
    "colors": [
      "#05ff71",
      "#ff0000",
      "#ff7f0e",
      "#2ca02c",
      "#a347e1",
      "#d62728",
      "#ff9896",
      "#9467bd",
      "#c5b0d5"
    ],
    "textColor": [
      "#666666"
    ],
    "textColorDefault": true,
    "gridColor": [
      "#e5e5e5"
    ],
    "gridColorDefault": true,
    "width": "3",
    "height": 8,
    "className": "",
    "interpolation": "linear",
    "x": 1480,
    "y": 160,
    "wires": [
      []
    ]
  },
  {
    "id": "83b842273e7bfae5",
    "type": "ui-text",
    "z": "daf7a59ca2ce18df",
    "group": "750f030497b122aa",
    "order": 2,
    "width": 0,
    "height": 0,
    "name": "",
    "label": "Transaction ID: ",
    "format": "{{msg.payload}}",
    "layout": "row-center",
    "style": true,
    "font": "",
    "fontSize": "30",
    "color": "#500ced",
    "wrapText": false,
    "className": "",
    "x": 1220,
    "y": 360,
    "wires": []
  },
  {
    "id": "02ea19c5e98fd683",
    "type": "change",
    "z": "daf7a59ca2ce18df",
    "name": "",
    "rules": [
      {
        "t": "delete",
        "p": "query",
        "pt": "msg"
      },
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "options.txId",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 900,
    "y": 360,
    "wires": [
      [
        "83b842273e7bfae5",
        "6c36ced9caa73c04",
        "9cec406f120e7d5d"
      ]
    ]
  },
  {
    "id": "2807de6096eb9e1f",
    "type": "function",
    "z": "daf7a59ca2ce18df",
    "name": "FLUX Get raw None-MV OCPP",
    "func": "// clear out any incoming message for now.\nlet filter_by_tx = \"\";\nlet topic = \"00000000\"\nif (msg.payload.txId) {\n  filter_by_tx = `|> filter(fn: (r) => r[\"transactionId\"] == ${msg.payload.txId})`\n  topic = msg.payload.txId\n}\n\nmsg = {}\n\nmsg.topic = topic\n\nmsg.query = `from(bucket: \"OCPP\") \\\n  |> range( start: -365d) \\\n  |> filter(fn: (r) => r[\"_measurement\"] == \"Transaction\") \\\n  |> pivot(columnKey: [\"_field\"], rowKey: [\"_time\"], valueColumn: \"_value\") \\\n  ${filter_by_tx} \\\n  |> filter(fn: (r) => r[\"command\"] == \"StartTransaction\") \\\n  |> drop(columns: [\"_start\",\"_stop\",\"_measurement\"]) \\\n  |> group(columns: [\"transactionId\"]) \\\n  |> sort(columns: [\"_time\"])`\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 670,
    "y": 280,
    "wires": [
      [
        "cad0c9ccd4a89916"
      ]
    ]
  },
  {
    "id": "cad0c9ccd4a89916",
    "type": "influxdb in",
    "z": "daf7a59ca2ce18df",
    "influxdb": "7cb40fcee206391e",
    "name": "",
    "query": "",
    "rawOutput": false,
    "precision": "",
    "retentionPolicy": "",
    "org": "cipio",
    "x": 920,
    "y": 280,
    "wires": [
      [
        "afc97f6be14c06af"
      ]
    ]
  },
  {
    "id": "aef68b6786e5c5a7",
    "type": "debug",
    "z": "daf7a59ca2ce18df",
    "name": "debug 67",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 1240,
    "y": 700,
    "wires": []
  },
  {
    "id": "a54940f160f7f0db",
    "type": "ui-text",
    "z": "daf7a59ca2ce18df",
    "group": "750f030497b122aa",
    "order": 3,
    "width": "2",
    "height": "1",
    "name": "",
    "label": "ChargeBoxID:",
    "format": "{{msg.payload}}",
    "layout": "row-left",
    "style": true,
    "font": "",
    "fontSize": 16,
    "color": "#aa14e1",
    "wrapText": false,
    "className": "",
    "x": 1220,
    "y": 840,
    "wires": []
  },
  {
    "id": "0cfe76cf25b87178",
    "type": "ui-text",
    "z": "daf7a59ca2ce18df",
    "group": "750f030497b122aa",
    "order": 4,
    "width": "2",
    "height": "1",
    "name": "",
    "label": "Connector:  ",
    "format": "{{msg.payload}}",
    "layout": "row-left",
    "style": true,
    "font": "",
    "fontSize": 16,
    "color": "#0db1f8",
    "wrapText": false,
    "className": "",
    "x": 1210,
    "y": 880,
    "wires": []
  },
  {
    "id": "d301de1fbbac9723",
    "type": "ui-text",
    "z": "daf7a59ca2ce18df",
    "group": "750f030497b122aa",
    "order": 8,
    "width": "2",
    "height": "1",
    "name": "",
    "label": "Client:  ",
    "format": "{{msg.payload}}",
    "layout": "row-left",
    "style": true,
    "font": "",
    "fontSize": 16,
    "color": "#ff8d0a",
    "wrapText": false,
    "className": "",
    "x": 1190,
    "y": 920,
    "wires": []
  },
  {
    "id": "33e220dd106839f5",
    "type": "ui-text",
    "z": "daf7a59ca2ce18df",
    "group": "750f030497b122aa",
    "order": 5,
    "width": "2",
    "height": "1",
    "name": "",
    "label": "Start MV:  ",
    "format": "{{msg.payload}}",
    "layout": "row-left",
    "style": true,
    "font": "",
    "fontSize": 16,
    "color": "#0e6735",
    "wrapText": false,
    "className": "",
    "x": 1200,
    "y": 960,
    "wires": []
  },
  {
    "id": "306d784e407efc57",
    "type": "ui-text",
    "z": "daf7a59ca2ce18df",
    "group": "750f030497b122aa",
    "order": 6,
    "width": "2",
    "height": "1",
    "name": "",
    "label": "End MV:  ",
    "format": "{{msg.payload}}",
    "layout": "row-left",
    "style": true,
    "font": "",
    "fontSize": 16,
    "color": "#0e6735",
    "wrapText": false,
    "className": "",
    "x": 1200,
    "y": 1000,
    "wires": []
  },
  {
    "id": "5aed68d7dac2c043",
    "type": "ui-text",
    "z": "daf7a59ca2ce18df",
    "group": "750f030497b122aa",
    "order": 7,
    "width": "2",
    "height": "1",
    "name": "",
    "label": "Total kWh:  ",
    "format": "{{msg.payload}}",
    "layout": "row-left",
    "style": true,
    "font": "",
    "fontSize": 16,
    "color": "#0e6735",
    "wrapText": false,
    "className": "",
    "x": 1210,
    "y": 1040,
    "wires": []
  },
  {
    "id": "9cec406f120e7d5d",
    "type": "function",
    "z": "daf7a59ca2ce18df",
    "name": "Get Tx MeterStart/Stop  ",
    "func": "let TxId = msg.payload || msg.options.txId\nlet start = msg.options.start || \"-365d\"\nlet stop = \"-363d\"\n\nif (msg?.options?.start) {\n  stop = addXDaysUTC(msg.options.start, 2)\n}\n\nmsg = {}\n\nmsg.query = `\nmeterStart = from(bucket: \"OCPP\")\n  |> range(start: ${start}, stop: ${stop} )\n  |> filter(fn: (r) => r[\"_measurement\"] == \"Transaction\")\n  |> filter(fn: (r) => r[\"_field\"] == \"transactionId\" or r[\"_field\"] == \"meterStart\" or r[\"_field\"] == \"idTag\" or r[\"_field\"] == \"connectorId\")\n  |> filter(fn: (r) => r.command == \"StartTransaction\")\n  |> pivot(columnKey: [\"_field\"], rowKey: [\"_time\"], valueColumn: \"_value\")\n  |> filter(fn: (r) => r.transactionId != 0)\n  |> drop(columns: [\"_start\",\"_stop\",\"msgFrom\",\"_measurement\"])\n\nmeterStop = from(bucket: \"OCPP\")\n  |> range(start: ${start}, stop: ${stop})\n  |> filter(fn: (r) => r[\"_measurement\"] == \"Transaction\")\n  |> filter(fn: (r) => r[\"_field\"] == \"transactionId\" or r[\"_field\"] == \"meterStop\")\n  |> filter(fn: (r) => r.command == \"StopTransaction\")\n  |> pivot(columnKey: [\"_field\"], rowKey: [\"_time\"], valueColumn: \"_value\")\n  |> filter(fn: (r) => r.transactionId != 0)\n  |> drop(columns: [\"_start\",\"_stop\",\"msgFrom\",\"_measurement\"])\n\njoin(tables: {key1: meterStart, key2: meterStop}, on: [\"transactionId\"], method: \"inner\")\n|> filter(fn: (r) => r.transactionId == ${TxId})\n|> map(fn: (r) => ({ r with totalEnergy: r.meterStop - r.meterStart}))\n|> map(fn: (r) => ({ r with difference_seconds: (uint( v: r._time_key2) - uint( v: r._time_key1)) / uint(v: 1000000000) }))\n\n`\nreturn msg;\n\nfunction addXDaysUTC(utcString, days) {\n  const date = new Date(utcString);\n  if (isNaN(date)) {\n    throw new Error(\"Invalid UTC time string\");\n  }\n\n  // Add one day in milliseconds\n  const oneDayLater = new Date(date.getTime() + days * 24 * 60 * 60 * 1000);\n\n  return oneDayLater.toISOString(); // Always returns in UTC\n}",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 370,
    "y": 800,
    "wires": [
      [
        "54ff26bff532c2d5"
      ]
    ]
  },
  {
    "id": "54ff26bff532c2d5",
    "type": "influxdb in",
    "z": "daf7a59ca2ce18df",
    "influxdb": "7cb40fcee206391e",
    "name": "",
    "query": "",
    "rawOutput": false,
    "precision": "",
    "retentionPolicy": "",
    "org": "cipio",
    "x": 600,
    "y": 800,
    "wires": [
      [
        "a6b605ca949e5de8",
        "4cc7f71877e27f96"
      ]
    ]
  },
  {
    "id": "a6b605ca949e5de8",
    "type": "debug",
    "z": "daf7a59ca2ce18df",
    "name": "debug 68",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1230,
    "y": 800,
    "wires": []
  },
  {
    "id": "b2ad490ff03c2c97",
    "type": "change",
    "z": "daf7a59ca2ce18df",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "payload[0].cbId_key1",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 980,
    "y": 840,
    "wires": [
      [
        "a54940f160f7f0db"
      ]
    ]
  },
  {
    "id": "2a2eb5a77e70df62",
    "type": "change",
    "z": "daf7a59ca2ce18df",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "payload[0].connectorId",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 980,
    "y": 880,
    "wires": [
      [
        "0cfe76cf25b87178"
      ]
    ]
  },
  {
    "id": "9214f5879d50fbe0",
    "type": "change",
    "z": "daf7a59ca2ce18df",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "payload[0].idTag",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 980,
    "y": 920,
    "wires": [
      [
        "d301de1fbbac9723"
      ]
    ]
  },
  {
    "id": "e5e3bc3824864970",
    "type": "change",
    "z": "daf7a59ca2ce18df",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "payload[0].meterStart",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 980,
    "y": 960,
    "wires": [
      [
        "33e220dd106839f5"
      ]
    ]
  },
  {
    "id": "4a191fd359629475",
    "type": "change",
    "z": "daf7a59ca2ce18df",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "payload[0].meterStop",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 980,
    "y": 1000,
    "wires": [
      [
        "306d784e407efc57"
      ]
    ]
  },
  {
    "id": "a6948cd72ae1a796",
    "type": "change",
    "z": "daf7a59ca2ce18df",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "payload[0].totalEnergy",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 980,
    "y": 1040,
    "wires": [
      [
        "5aed68d7dac2c043"
      ]
    ]
  },
  {
    "id": "429f153803b4e889",
    "type": "switch",
    "z": "daf7a59ca2ce18df",
    "name": "",
    "property": "action",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "txDetails",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "options",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 1330,
    "y": 520,
    "wires": [
      [
        "cf7b88020b745f6a"
      ],
      [
        "fbdd04f3b4d0925d"
      ]
    ]
  },
  {
    "id": "fbdd04f3b4d0925d",
    "type": "change",
    "z": "daf7a59ca2ce18df",
    "name": "",
    "rules": [
      {
        "t": "set",
        "p": "options",
        "pt": "flow",
        "to": "options",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 1480,
    "y": 600,
    "wires": [
      [
        "d3a017f87387ff7b"
      ]
    ]
  },
  {
    "id": "d3a017f87387ff7b",
    "type": "link call",
    "z": "daf7a59ca2ce18df",
    "name": "",
    "links": [
      "22993ff229d6db8d"
    ],
    "linkType": "static",
    "timeout": "30",
    "x": 1595,
    "y": 600,
    "wires": [
      []
    ],
    "l": false
  },
  {
    "id": "4d28c5123bd6d40d",
    "type": "debug",
    "z": "daf7a59ca2ce18df",
    "name": "debug 6",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 810,
    "y": 600,
    "wires": []
  },
  {
    "id": "92d4fc8edd807919",
    "type": "debug",
    "z": "daf7a59ca2ce18df",
    "name": "debug 8",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1470,
    "y": 700,
    "wires": []
  }
]