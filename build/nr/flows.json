[
    {
        "id": "9ca80d42115ee3c3",
        "type": "tab",
        "label": "CSMS Logic",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "294f3520d49a4f00",
        "type": "tab",
        "label": "OCPP Log",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "92d055a5ecbac90c",
        "type": "tab",
        "label": "Home",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "217382551c48905d",
        "type": "tab",
        "label": "EVSEs",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "55e67bd3e4f94c9a",
        "type": "tab",
        "label": "TagInfo",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "68c0944e7f4deca9",
        "type": "tab",
        "label": "GetSetConfig",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "daf7a59ca2ce18df",
        "type": "tab",
        "label": "Transactions",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c4f677cd277b409d",
        "type": "tab",
        "label": "Settings",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bc469b88bbf8641e",
        "type": "tab",
        "label": "Meters",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "39feb44f8cf5c4ed",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1bbb83617feb5d61",
        "type": "subflow",
        "name": "CSMS 1.6",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "70bfca444e38cb32"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1050,
                "y": 220,
                "wires": [
                    {
                        "id": "0508b4312099eed7",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1060,
                "y": 280,
                "wires": [
                    {
                        "id": "f5e6a6b98ad89c35",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1060,
                "y": 340,
                "wires": [
                    {
                        "id": "8bd502e33fe2ee01",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "CSMS_PORT",
                "type": "num",
                "value": "8863"
            },
            {
                "name": "CSMS_PATH",
                "type": "str",
                "value": "/ocpp"
            }
        ],
        "meta": {},
        "color": "#3FADB5",
        "outputLabels": [
            "OCPP Msg",
            "OCPP Logging",
            "SubFlow Debug"
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "5c57038f3942292a",
        "type": "group",
        "z": "294f3520d49a4f00",
        "name": "MQTT",
        "style": {
            "label": true
        },
        "nodes": [
            "b645202acfa17bbe",
            "ed8247496c428ec6",
            "618def1a0f4236f9",
            "8a6a1c999a396dc9"
        ],
        "x": 34,
        "y": 779,
        "w": 612,
        "h": 122
    },
    {
        "id": "a0169f65e4967ec2",
        "type": "group",
        "z": "9ca80d42115ee3c3",
        "name": "Update Last Comm Timestamp",
        "style": {
            "fill": "#ffff7f",
            "label": true
        },
        "nodes": [
            "868ca4fd5276022e",
            "e07f99fdfc73cd44",
            "124fa94892413c81",
            "b952178113645c64",
            "34b27b38f2e7609a",
            "7bc0d39e117db98a",
            "d2d365e869ae5aa3",
            "d836b12b64275a9d",
            "a1f721f1a03c965a"
        ],
        "x": 44,
        "y": 419,
        "w": 1212,
        "h": 82
    },
    {
        "id": "adad8cfed89e9a2e",
        "type": "group",
        "z": "1bbb83617feb5d61",
        "name": "Calculate Charging Profile",
        "style": {
            "stroke": "#ff3f3f",
            "fill": "#ffcf3f",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "31cbb896896da083",
            "74558ab2bc828dd9",
            "277e1a6705982260"
        ],
        "x": 794,
        "y": 819,
        "w": 452,
        "h": 82
    },
    {
        "id": "f6e1783b4f8d6029",
        "type": "group",
        "z": "1bbb83617feb5d61",
        "name": "",
        "style": {
            "fill": "#c8e7a7",
            "label": true
        },
        "nodes": [
            "dcc4d675cbe95527",
            "b348b5858bbb69e9",
            "e892b41d16a803e6",
            "3d9889d0e7face61",
            "565b9e3d1ccde32e"
        ],
        "x": 794,
        "y": 519,
        "w": 592,
        "h": 122
    },
    {
        "id": "fac4518c226fbf0c",
        "type": "group",
        "z": "1bbb83617feb5d61",
        "name": "Modify StartTx with TxId",
        "style": {
            "fill": "#b797cf",
            "label": true,
            "stroke": "#ffff00",
            "color": "#001f60"
        },
        "nodes": [
            "e930a4053f3ebf38",
            "d5ea45e6cb0d7090",
            "20e60ae443b8c057",
            "7085c4e9b54ca5e5",
            "81b335ea88991f47",
            "05dc69bf9c191b85",
            "885f7019dc576089"
        ],
        "x": 784,
        "y": 659,
        "w": 712,
        "h": 142
    },
    {
        "id": "f740792ad0c8f5fd",
        "type": "junction",
        "z": "217382551c48905d",
        "x": 1360,
        "y": 180,
        "wires": [
            [
                "9061953296c99fc7"
            ]
        ]
    },
    {
        "id": "ba42612f57a44fd4",
        "type": "junction",
        "z": "294f3520d49a4f00",
        "x": 420,
        "y": 160,
        "wires": [
            [
                "f3e1c99425a9c103",
                "a032c7f04398d7d4",
                "687284eeeefc6094",
                "e7de0b7ea1e77e8e"
            ]
        ]
    },
    {
        "id": "b790fef9f4f7de2c",
        "type": "junction",
        "z": "daf7a59ca2ce18df",
        "x": 1340,
        "y": 240,
        "wires": [
            [
                "bc6bb2f523b00fa9",
                "a39145869b71df51",
                "2ef7f596c72004a1",
                "11ee4d2550f2e6b1",
                "bae6fc11c3f77385"
            ]
        ]
    },
    {
        "id": "4cc7f71877e27f96",
        "type": "junction",
        "z": "daf7a59ca2ce18df",
        "x": 740,
        "y": 920,
        "wires": [
            [
                "2a2eb5a77e70df62",
                "b2ad490ff03c2c97",
                "9214f5879d50fbe0",
                "e5e3bc3824864970",
                "4a191fd359629475",
                "a6948cd72ae1a796"
            ]
        ]
    },
    {
        "id": "a6ebf8381e0c4375",
        "type": "redis-config",
        "name": "Local",
        "options": "{\"port\":6379,\"host\":\"valkey\",\"username\":\"default\",\"password\":\"cORNdOGSwITHmUSTARD\"}",
        "cluster": false,
        "optionsType": "json"
    },
    {
        "id": "0430675ed6c7cd83",
        "type": "redis-config",
        "name": "cipio redis",
        "options": "{\"port\":6379,\"host\":\"valkey\",\"username\":\"default\",\"password\":\"cORNdOGSwITHmUSTARD\"}",
        "cluster": false,
        "optionsType": "json"
    },
    {
        "id": "46fa89673b9bfc15",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "8cdc313c9611f13f",
        "type": "ui-base",
        "name": "My Dashboard",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "showPageTitle": true,
        "navigationStyle": "icon",
        "titleBarStyle": "default",
        "showReconnectNotification": false,
        "notificationDisplayTime": "5",
        "showDisconnectNotification": false
    },
    {
        "id": "a78a40b473af28cd",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "09addd16699c78ac",
        "type": "ui-page",
        "name": "EVSEs",
        "ui": "8cdc313c9611f13f",
        "path": "/evses",
        "icon": "mdi-ev-station",
        "layout": "notebook",
        "theme": "0d92c765bfad87e6",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 2,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "1723c74d3f81385c",
        "type": "ui-group",
        "name": "EVSE List",
        "page": "09addd16699c78ac",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "0d92c765bfad87e6",
        "type": "ui-theme",
        "name": "Basic Blue Theme",
        "colors": {
            "surface": "#4d58ff",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px",
            "density": "default"
        }
    },
    {
        "id": "0a8c3bb3babc19a4",
        "type": "ui-page",
        "name": "Drivers",
        "ui": "8cdc313c9611f13f",
        "path": "/drivers",
        "icon": "mdi-card-account-details-outline",
        "layout": "notebook",
        "theme": "0d92c765bfad87e6",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 3,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "447b58f3ddb86ab6",
        "type": "ui-group",
        "name": "Drivers List",
        "page": "0a8c3bb3babc19a4",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "92124697.6658f",
        "type": "ocpp-remote-cs",
        "name": "Localhost:8834/ocpp",
        "url": "ws://localhost:8834/ocpp"
    },
    {
        "id": "2bafdaab.15b956",
        "type": "ocpp-remotej-cp",
        "name": "",
        "cbId": "evse-001",
        "ocppver": "1.6j"
    },
    {
        "id": "9193cb43c1fc44ef",
        "type": "ocpp-remote-cs",
        "name": "192.168.1.119:8834",
        "url": "ws://192.168.1.119:8834/ocpp"
    },
    {
        "id": "ec76a27f96b6b92a",
        "type": "ocpp-remote-cs",
        "name": "node-red-dev:8834",
        "url": "ws://node-red-dev:8834/ocpp"
    },
    {
        "id": "7b05d2e15e8fc23c",
        "type": "ui-page",
        "name": "OCPP Log",
        "ui": "8cdc313c9611f13f",
        "path": "/ocpplogs",
        "icon": "mdi-book-open-variant",
        "layout": "notebook",
        "theme": "0d92c765bfad87e6",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 5,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "7cb40fcee206391e",
        "type": "influxdb",
        "hostname": "influx2",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "cipio.link",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influx2:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "c187df53e1cacaad",
        "type": "ui-group",
        "name": "OCPP Log",
        "page": "7b05d2e15e8fc23c",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "e4ddc95d1509efab",
        "type": "ui-page",
        "name": "Transactions",
        "ui": "8cdc313c9611f13f",
        "path": "/sessions",
        "icon": "mdi-bullseye",
        "layout": "notebook",
        "theme": "0d92c765bfad87e6",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 4,
        "className": "",
        "visible": true,
        "disabled": "false"
    },
    {
        "id": "17fb40c0e949759b",
        "type": "ui-group",
        "name": "Transactions",
        "page": "e4ddc95d1509efab",
        "width": "6",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "e254737171de6271",
        "type": "ocpp-remotej-cp",
        "z": "1bbb83617feb5d61",
        "name": "",
        "cbId": "evsesim1",
        "ocppver": "1.6j"
    },
    {
        "id": "a7002ddddf5f5b3b",
        "type": "ui-page",
        "name": "Home",
        "ui": "8cdc313c9611f13f",
        "path": "/home",
        "icon": "home",
        "layout": "notebook",
        "theme": "0d92c765bfad87e6",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 1,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "01bc43f19d1edf0a",
        "type": "ui-page",
        "name": "EVSE Config",
        "ui": "8cdc313c9611f13f",
        "path": "/ocppconfig",
        "icon": "mdi-cog-transfer",
        "layout": "notebook",
        "theme": "0d92c765bfad87e6",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 6,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "c04aff20955da79f",
        "type": "ui-group",
        "name": "EVSE Configuration",
        "page": "01bc43f19d1edf0a",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "191526b4c53ba7c0",
        "type": "mqtt-broker",
        "name": "",
        "broker": "iot.ioc.anl.gov",
        "port": "8883",
        "tls": "",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "213076b7a395d1a9",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "71a048bb2b0ae0b6",
        "type": "ui-page",
        "name": "Meters",
        "ui": "8cdc313c9611f13f",
        "path": "/meters",
        "icon": "mdi-speedometer",
        "layout": "grid",
        "theme": "0d92c765bfad87e6",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 7,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "6e1897c297826e17",
        "type": "ui-group",
        "name": "Guages",
        "page": "71a048bb2b0ae0b6",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "c808be4d8b5feb66",
        "type": "websocket-listener",
        "path": "/deleteme",
        "wholemsg": "false"
    },
    {
        "id": "0e43d0c136633834",
        "type": "ui-page",
        "name": "Settings",
        "ui": "8cdc313c9611f13f",
        "path": "/page8",
        "icon": "mdi-cogs",
        "layout": "notebook",
        "theme": "0d92c765bfad87e6",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 8,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "ace44af4012c4fc1",
        "type": "ui-group",
        "name": "EVSE",
        "page": "0e43d0c136633834",
        "width": "6",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "c48e064d37e64bbf",
        "type": "ui-group",
        "name": "Site",
        "page": "0e43d0c136633834",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "530fe8d240942ac0",
        "type": "ui-group",
        "name": "Banner",
        "page": "a7002ddddf5f5b3b",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "ad922d352fe06617",
        "type": "modbus-client",
        "name": "Flexy",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "a477577e.9e0bc",
        "type": "modbus-client",
        "name": "Modbus Switch TCP",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": false,
        "tcpHost": "127.0.0.1",
        "tcpPort": "10512",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "a9050e37.a6f618",
        "type": "modbus-client",
        "name": "Modbus Flex Server",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "tcpHost": "127.0.0.1",
        "tcpPort": "15502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "352955bb.be6e6a",
        "type": "modbus-client",
        "name": "Modbus Server",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "tcpHost": "127.0.0.1",
        "tcpPort": "14502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "750f030497b122aa",
        "type": "ui-group",
        "name": "Meter Values",
        "page": "e4ddc95d1509efab",
        "width": "6",
        "height": "1",
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "276c45fccf8e6765",
        "type": "ui-group",
        "name": "Hidden",
        "page": "09addd16699c78ac",
        "width": "1",
        "height": "1",
        "order": 2,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "3fa519dd01e52d85",
        "type": "ui-group",
        "name": "Header",
        "page": "e4ddc95d1509efab",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": false,
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "0b35c35ff6b34816",
        "type": "CS server",
        "z": "1bbb83617feb5d61",
        "name": "CentralSystem@8834",
        "port": "CSMS_PORT",
        "portType": "env",
        "enabled15": false,
        "path15": "/ocpp15s",
        "enabled16": false,
        "path16": "/ocpp16s",
        "enabled16j": true,
        "path16j": "${CSMS_PATH}",
        "log": false,
        "pathlog": "c:\\tmp\\OCPP__.log",
        "x": 120,
        "y": 280,
        "wires": [
            [
                "20ceb4322d5e497f",
                "29ecf3de64707bd2"
            ],
            [
                "b53020c58b6c45a9"
            ]
        ]
    },
    {
        "id": "20ceb4322d5e497f",
        "type": "switch",
        "z": "1bbb83617feb5d61",
        "name": "OCPP CS Command Switch",
        "property": "payload.command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "BootNotification",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Authorize",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Heartbeat",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "StatusNotification",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "MeterValues",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "StartTransaction",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "StopTransaction",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DataTransfer",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FirmwareStatusNotification",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DiagnosticsStatusNotification",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 11,
        "x": 440,
        "y": 280,
        "wires": [
            [
                "90ba72aed925161f"
            ],
            [
                "d0719425702055f4"
            ],
            [
                "1920fd977adf99ce"
            ],
            [
                "8491c20b715112f4",
                "0d628f0894098128"
            ],
            [
                "8491c20b715112f4"
            ],
            [
                "d0719425702055f4"
            ],
            [
                "9b51587a3c6a0b45"
            ],
            [
                "0b39aae32daacd88"
            ],
            [
                "8491c20b715112f4"
            ],
            [
                "8491c20b715112f4"
            ],
            []
        ]
    },
    {
        "id": "fb654b19a6a965cd",
        "type": "server response",
        "z": "1bbb83617feb5d61",
        "name": "",
        "x": 1050,
        "y": 400,
        "wires": []
    },
    {
        "id": "e930a4053f3ebf38",
        "type": "function",
        "z": "1bbb83617feb5d61",
        "g": "fac4518c226fbf0c",
        "name": "Auth/Start Tx",
        "func": "// function handles both Authorize and StartTransaction\n// This generate a unique TxId, as long as the function doesn't get called twice\n// within the same millisecond\n\n\n// defaults\nconst ACCEPTED = \"Accepted\"\nlet status = ACCEPTED\nlet tags = []\n\n// copy message for the enhanced message with TxId\nlet msg2 = RED.util.cloneMessage(msg)\n\nmsg2.payload = {\n    idTagInfo: {\n        status\n    }\n}\n\nif (msg.ocpp.command === \"StartTransaction\"){\n    msg2.payload.transactionId = generateUniqueId()\n    msg.ocpp.command = 'StartTransactionEnhanced'\n    msg.payload.command = msg.ocpp.command\n    msg2.ocpp.connectorId = msg.payload.data.connectorId || 1\n}\n\n\nlet freeVend = global.get(\"CSMS:FreeVend\") \n    \nif (! freeVend ){\n    tags = global.get(\"CSMS:Tags\")\n\n    const result = tags.find((tag) => tag.tagId === msg.payload.data.idTag)\n\n    if (result){\n        if (!result.enabled){\n            msg2.payload.idTagInfo.status = \"Blocked\"\n        }\n        else if (result.expdate){\n            let expDate = new Date(result.expdate)\n            expDate.setHours(23, 59, 59, 999); // Set to the end of the day\n            let currentDate = new Date()\n\n            if (currentDate > expDate){\n                msg2.payload.idTagInfo.status = \"Expired\"\n            }\n            else {\n                msg2.payload.idTagInfo.expiryDate = expDate.toISOString()\n            }\n        } \n    }\n    else {\n        msg2.payload.idTagInfo.status = \"Invalid\"\n    }\n\n    if (msg2.payload.idTagInfo.status !== ACCEPTED){\n        msg2.payload.transactionId = 0\n    }\n\n}\n\nlet data\n\nif(msg.ocpp.command == \"StartTransaction\"){\n    data = msg.payload.data\n    data.transactionId = msg2.payload.transactionId\n    data.status = msg2.payload.idTagInfo.status\n    const ts = new Date(data.timestamp)\n    msg.timestamp = ts.getTime()\n    msg.cbId = msg2.ocpp.chargeBoxIdentity\n    msg.msgFrom = \"CS\"\n    msg.payload = [2,msg2.ocpp.MessageId,\"StartTransactionEnhanced\",data]\n} else {\n    msg = null\n} \n\nreturn [msg2,msg];\n\n\nfunction generateUniqueId() {\n    // Return a positive 32bit Int as a random TxId\n    const isoTimestamp = new Date().toISOString();\n    // Create a Date object from the ISO timestamp string\n    const date = new Date(isoTimestamp);\n\n    // Get the timestamp in seconds since the Unix epoch\n    const timestampInSeconds = Math.floor(date.getTime() / 1000);\n\n    // Calculate offset to ensure positive value within 32-bit signed range\n    const offset = timestampInSeconds < 0 ? 2147483648 : 0;\n\n    // Convert to 32-bit signed integer and apply offset\n    const int32Timestamp = (timestampInSeconds + offset) | 0;\n\n    return int32Timestamp;\n}\n\n\n/*\nfunction generateUniqueInt() {\n  const timestamp = Date.now();\n  const random = Math.floor(Math.random() * 1000); // Random 3-digit number\n  // return Number(`${timestamp}${random}`);\n  return Number(`${timestamp}`);\n}\n\nfunction getRndInteger(min, max) {\n    let td = new Date();\n    let od = new Date('1970-01-01');\n    let timeinmilisec = td.getTime() - od.getTime();\n    let prefix = Math.floor(timeinmilisec / (1000 * 60 * 60 * 24));\n\n    let rndno = Math.floor(Math.random() * (max - min + 1) ) + min;\n    return (prefix * 100000) + rndno;\n    //return rndno;\n}\n\nfunction getRndInteger(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) ) + min;\n}\n\n// msg format\n//\n{\n    \"timestamp\":1735842833857,\n    \"cbId\":\"evsesim1\",\n    \"msgFrom\":\"CS\",\n    \"payload\":\n        [\n            2,\n            \"d5f3026e-d602-4ab8-a009-bcdef17932e3\",\n            \"StartTransaction\",\n            {\"connectorId\":1,\"idTag\":\"ccc\",\"meterStart\":2004,\"timestamp\":\"2025-01-02T18:33:53.856Z\"}\n         ],\n         \"_msgid\":\"6dc75f6161d5a70b\"\n}\n*/",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 740,
        "wires": [
            [
                "20e60ae443b8c057",
                "7085c4e9b54ca5e5"
            ],
            [
                "81b335ea88991f47"
            ]
        ]
    },
    {
        "id": "70bfca444e38cb32",
        "type": "CS request JSON",
        "z": "1bbb83617feb5d61",
        "name": "CS Req evse-001",
        "remotecb": "e254737171de6271",
        "command": "GetConfiguration",
        "cmddata": "",
        "log": true,
        "pathlog": "",
        "x": 250,
        "y": 40,
        "wires": [
            [
                "4a497f3abebf77a4"
            ]
        ]
    },
    {
        "id": "3c84a4a19698b6e3",
        "type": "comment",
        "z": "1bbb83617feb5d61",
        "name": "Basic OCPP Central System Server and supporting nodes",
        "info": "Change the port address and paths to meet your needs.\nThis is a very basic (does represent a fully functional CS) example",
        "x": 271,
        "y": 135,
        "wires": []
    },
    {
        "id": "1013277df36e9c6b",
        "type": "comment",
        "z": "1bbb83617feb5d61",
        "name": "Log all incoming msgs",
        "info": "",
        "x": 120,
        "y": 340,
        "wires": []
    },
    {
        "id": "79545bf715d76089",
        "type": "comment",
        "z": "1bbb83617feb5d61",
        "name": "Example with JSON 1.6",
        "info": "Keep in mind that some of the basic CS responses vary depending on OCPP 1.5 vs 1.6",
        "x": 231,
        "y": 175,
        "wires": []
    },
    {
        "id": "dcc4d675cbe95527",
        "type": "switch",
        "z": "1bbb83617feb5d61",
        "g": "f6e1783b4f8d6029",
        "name": "Send Initial/Final ChargeProfile",
        "property": "payload.data.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Preparing",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Available",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1010,
        "y": 580,
        "wires": [
            [
                "b348b5858bbb69e9"
            ],
            [
                "b348b5858bbb69e9"
            ],
            [
                "e892b41d16a803e6"
            ]
        ]
    },
    {
        "id": "b348b5858bbb69e9",
        "type": "function",
        "z": "1bbb83617feb5d61",
        "g": "f6e1783b4f8d6029",
        "name": "Reset",
        "func": "let connectorId = 0\nlet cbId = msg.ocpp.chargeBoxIdentity\nlet amps = 6\n\nif (msg.payload.data.connectorId > 0){\n    connectorId = msg.payload.data.connectorId\n    msg.payload = {\n        command: \"SetChargingProfile\",\n        cbId,\n        data: {\n            connectorId,\n            csChargingProfiles: {\n              chargingProfileId: 1,\n              stackLevel: 1,\n              chargingProfilePurpose: \"TxDefaultProfile\",\n              chargingProfileKind: \"Absolute\",\n              chargingSchedule: {\n                chargingRateUnit: \"A\",\n                chargingSchedulePeriod: [\n                    {\n                        startPeriod: 0,\n                        limit: amps,\n                        numberPhases: 1\n                    }\n                ]\n              }  \n            }\n        }\n    }\n\n    return msg\n\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 560,
        "wires": [
            [
                "3d9889d0e7face61"
            ]
        ]
    },
    {
        "id": "e892b41d16a803e6",
        "type": "function",
        "z": "1bbb83617feb5d61",
        "g": "f6e1783b4f8d6029",
        "name": "Do Nothing",
        "func": "msg.payload = `Got a status of ${msg.payload.data.status}`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "20e60ae443b8c057",
        "type": "switch",
        "z": "1bbb83617feb5d61",
        "g": "fac4518c226fbf0c",
        "name": "StartTx Accepted",
        "property": "payload.idTagInfo.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Accepted",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1170,
        "y": 720,
        "wires": [
            [
                "05dc69bf9c191b85"
            ]
        ]
    },
    {
        "id": "885f7019dc576089",
        "type": "link out",
        "z": "1bbb83617feb5d61",
        "g": "fac4518c226fbf0c",
        "name": "link out 26",
        "mode": "link",
        "links": [
            "31cbb896896da083"
        ],
        "x": 1455,
        "y": 720,
        "wires": []
    },
    {
        "id": "31cbb896896da083",
        "type": "link in",
        "z": "1bbb83617feb5d61",
        "g": "adad8cfed89e9a2e",
        "name": "Generate ChargeProfiles",
        "links": [
            "885f7019dc576089",
            "03a8715970d7a77d"
        ],
        "x": 835,
        "y": 860,
        "wires": [
            [
                "74558ab2bc828dd9"
            ]
        ]
    },
    {
        "id": "8eb3b8e8db8b77c7",
        "type": "link in",
        "z": "1bbb83617feb5d61",
        "name": "Send OCPP CMD",
        "links": [
            "3d9889d0e7face61",
            "277e1a6705982260"
        ],
        "x": 125,
        "y": 80,
        "wires": [
            [
                "70bfca444e38cb32"
            ]
        ]
    },
    {
        "id": "3d9889d0e7face61",
        "type": "link out",
        "z": "1bbb83617feb5d61",
        "g": "f6e1783b4f8d6029",
        "name": "link out 27",
        "mode": "link",
        "links": [
            "8eb3b8e8db8b77c7"
        ],
        "x": 1345,
        "y": 560,
        "wires": []
    },
    {
        "id": "74558ab2bc828dd9",
        "type": "function",
        "z": "1bbb83617feb5d61",
        "g": "adad8cfed89e9a2e",
        "name": "Smart Charge Management Algorithm",
        "func": "const currentTx = global.get(\"CSMS:SESSIONS\") || []\nconst loadLimit = global.get(\"SITE:LoadLimit\")\nlet adjustment = 1\n\nlet potential = 0\n\ncurrentTx.forEach(function(sess) {\n    potential += sess.amps\n})\n\nif (potential > loadLimit){\n    // Calculate an adjustment %\n    adjustment = 1 - ((( (potential - loadLimit ) / potential ) * 100) / 100)\n}\n\ncurrentTx.forEach(function(sess) {\n    msg = {}\n    msg.payload = {\n        command: \"SetChargingProfile\",\n        cbId: sess.cbId,\n        data: {\n            connectorId: sess.connectorId,\n            csChargingProfiles: {\n              chargingProfileId: 1,\n              transactionId: sess.transactionId,\n              stackLevel: 1,\n              chargingProfilePurpose: \"TxProfile\",\n              chargingProfileKind: \"Absolute\",\n              chargingSchedule: {\n                startSchedule: new Date().toISOString(),\n                chargingRateUnit: \"A\",\n                chargingSchedulePeriod: [\n                    {\n                        startPeriod: 0,\n                        limit: sess.amps * adjustment,\n                        numberPhases: 1\n                    }\n                ]\n              }  \n            }\n        }\n    }\n    msg.potential = potential\n    msg.adjustment = adjustment\n    msg.loadLimit = loadLimit\n    node.send(msg)\n});\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 860,
        "wires": [
            [
                "277e1a6705982260"
            ]
        ]
    },
    {
        "id": "277e1a6705982260",
        "type": "link out",
        "z": "1bbb83617feb5d61",
        "g": "adad8cfed89e9a2e",
        "name": "link out 28",
        "mode": "link",
        "links": [
            "8eb3b8e8db8b77c7",
            "8bd502e33fe2ee01"
        ],
        "x": 1205,
        "y": 860,
        "wires": []
    },
    {
        "id": "8bd502e33fe2ee01",
        "type": "link in",
        "z": "1bbb83617feb5d61",
        "name": "Send Debug Output",
        "links": [
            "277e1a6705982260",
            "03a8715970d7a77d"
        ],
        "x": 895,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "05dc69bf9c191b85",
        "type": "function",
        "z": "1bbb83617feb5d61",
        "g": "fac4518c226fbf0c",
        "name": "function 22",
        "func": "if (msg.ocpp.command === \"StartTransaction\"){\n    let session = {}\n    session.cbId = msg.ocpp.chargeBoxIdentity\n    session.connectorId = msg.ocpp.connectorId\n    session.transactionId = msg.payload.transactionId\n    session.amps = (session.cbId == \"EVOChargeLab1\") ? 32 : 40\n    let sessions = global.get(\"CSMS:SESSIONS\") || []\n    sessions.push(session)\n    global.set(\"CSMS:SESSIONS\",sessions)\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 720,
        "wires": [
            [
                "885f7019dc576089"
            ]
        ]
    },
    {
        "id": "29b7e74ff8279110",
        "type": "function",
        "z": "1bbb83617feb5d61",
        "name": "BootNotification",
        "func": "//Load defaults\nconst interval = global.get(\"CSMS:HeartBeatInterval\") ?? 120\nconst currentTime = new Date().toISOString()\nconst validEVSEs = global.get(\"CSMS:EVSEs\") ?? []\n\nlet status = (validEVSEs.find((cbId) => cbId === msg.ocpp.chargeBoxIdentity.toLowerCase() ) != undefined) ? \"Accepted\" : \"Rejected\"\n\n\nmsg.payload = {\n    interval,\n    currentTime,\n    status\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 540,
        "wires": [
            [
                "e09d8995ecbe67f7"
            ]
        ]
    },
    {
        "id": "041c7cd4a35efa4d",
        "type": "link in",
        "z": "1bbb83617feb5d61",
        "name": "Server Response Node",
        "links": [
            "e09d8995ecbe67f7",
            "7085c4e9b54ca5e5",
            "d363a59df51b1603",
            "f15df67d396f9ee3",
            "d822835855e62f28",
            "0974c9afbf6425e2"
        ],
        "x": 895,
        "y": 400,
        "wires": [
            [
                "fb654b19a6a965cd"
            ]
        ]
    },
    {
        "id": "e09d8995ecbe67f7",
        "type": "link out",
        "z": "1bbb83617feb5d61",
        "name": "link out 30",
        "mode": "link",
        "links": [
            "041c7cd4a35efa4d"
        ],
        "x": 585,
        "y": 540,
        "wires": []
    },
    {
        "id": "7085c4e9b54ca5e5",
        "type": "link out",
        "z": "1bbb83617feb5d61",
        "g": "fac4518c226fbf0c",
        "name": "link out 31",
        "mode": "link",
        "links": [
            "041c7cd4a35efa4d"
        ],
        "x": 1035,
        "y": 700,
        "wires": []
    },
    {
        "id": "f5e6a6b98ad89c35",
        "type": "link in",
        "z": "1bbb83617feb5d61",
        "name": "OCPP Logging Port",
        "links": [
            "81b335ea88991f47",
            "b53020c58b6c45a9"
        ],
        "x": 895,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "b53020c58b6c45a9",
        "type": "link out",
        "z": "1bbb83617feb5d61",
        "name": "link out 32",
        "mode": "link",
        "links": [
            "f5e6a6b98ad89c35"
        ],
        "x": 275,
        "y": 340,
        "wires": []
    },
    {
        "id": "81b335ea88991f47",
        "type": "link out",
        "z": "1bbb83617feb5d61",
        "g": "fac4518c226fbf0c",
        "name": "link out 33",
        "mode": "link",
        "links": [
            "f5e6a6b98ad89c35"
        ],
        "x": 1045,
        "y": 760,
        "wires": []
    },
    {
        "id": "0508b4312099eed7",
        "type": "link in",
        "z": "1bbb83617feb5d61",
        "name": "OCPP Msg Port",
        "links": [
            "29ecf3de64707bd2",
            "4a497f3abebf77a4"
        ],
        "x": 895,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "29ecf3de64707bd2",
        "type": "link out",
        "z": "1bbb83617feb5d61",
        "name": "link out 34",
        "mode": "link",
        "links": [
            "0508b4312099eed7"
        ],
        "x": 275,
        "y": 220,
        "wires": []
    },
    {
        "id": "4a497f3abebf77a4",
        "type": "link out",
        "z": "1bbb83617feb5d61",
        "name": "link out 35",
        "mode": "link",
        "links": [
            "0508b4312099eed7"
        ],
        "x": 405,
        "y": 40,
        "wires": []
    },
    {
        "id": "50d2e6f3bb1e94f5",
        "type": "link in",
        "z": "1bbb83617feb5d61",
        "name": "BootNotification",
        "links": [
            "90ba72aed925161f"
        ],
        "x": 285,
        "y": 540,
        "wires": [
            [
                "29b7e74ff8279110"
            ]
        ]
    },
    {
        "id": "90ba72aed925161f",
        "type": "link out",
        "z": "1bbb83617feb5d61",
        "name": "link out 36",
        "mode": "link",
        "links": [
            "50d2e6f3bb1e94f5"
        ],
        "x": 685,
        "y": 140,
        "wires": []
    },
    {
        "id": "58a508d07089ac02",
        "type": "change",
        "z": "1bbb83617feb5d61",
        "name": "Heartbeat",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload.currentTime",
                "pt": "msg",
                "to": "$now()",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 600,
        "wires": [
            [
                "d363a59df51b1603"
            ]
        ]
    },
    {
        "id": "d363a59df51b1603",
        "type": "link out",
        "z": "1bbb83617feb5d61",
        "name": "link out 37",
        "mode": "link",
        "links": [
            "041c7cd4a35efa4d"
        ],
        "x": 585,
        "y": 600,
        "wires": []
    },
    {
        "id": "26c6df27758d1898",
        "type": "link in",
        "z": "1bbb83617feb5d61",
        "name": "HeartBeat",
        "links": [
            "1920fd977adf99ce"
        ],
        "x": 285,
        "y": 600,
        "wires": [
            [
                "58a508d07089ac02"
            ]
        ]
    },
    {
        "id": "1920fd977adf99ce",
        "type": "link out",
        "z": "1bbb83617feb5d61",
        "name": "link out 38",
        "mode": "link",
        "links": [
            "26c6df27758d1898"
        ],
        "x": 685,
        "y": 180,
        "wires": []
    },
    {
        "id": "b109c9e3b6b4ef7a",
        "type": "change",
        "z": "1bbb83617feb5d61",
        "name": "Generic Status=Accepted",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"idTagInfo\":{\"status\":\"Accepted\"}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 660,
        "wires": [
            [
                "d822835855e62f28"
            ]
        ]
    },
    {
        "id": "fff32048857b249d",
        "type": "link in",
        "z": "1bbb83617feb5d61",
        "name": "Generic Status Accepted",
        "links": [
            "0b39aae32daacd88"
        ],
        "x": 285,
        "y": 660,
        "wires": [
            [
                "b109c9e3b6b4ef7a"
            ]
        ]
    },
    {
        "id": "0b39aae32daacd88",
        "type": "link out",
        "z": "1bbb83617feb5d61",
        "name": "link out 39",
        "mode": "link",
        "links": [
            "fff32048857b249d"
        ],
        "x": 685,
        "y": 220,
        "wires": []
    },
    {
        "id": "c65873db62d0456e",
        "type": "function",
        "z": "1bbb83617feb5d61",
        "name": "Remove from active sessions",
        "func": "let sessions = global.get(\"CSMS:SESSIONS\") || []\nlet cbId = msg.ocpp.chargeBoxIdentity\nlet transactionId = msg.payload.data.transactionId\n\nlet updated_sessions = sessions.filter( sess => (sess.cbId == cbId && sess.transactionId == transactionId) == false)\nmsg = {\n    payload: {\n        updated_sessions,\n        cbId,\n        transactionId\n    }\n}\n\nglobal.set(\"CSMS:SESSIONS\", updated_sessions)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 720,
        "wires": [
            [
                "03a8715970d7a77d"
            ]
        ]
    },
    {
        "id": "03a8715970d7a77d",
        "type": "link out",
        "z": "1bbb83617feb5d61",
        "name": "link out 29",
        "mode": "link",
        "links": [
            "31cbb896896da083",
            "8bd502e33fe2ee01"
        ],
        "x": 635,
        "y": 720,
        "wires": []
    },
    {
        "id": "9b51587a3c6a0b45",
        "type": "link out",
        "z": "1bbb83617feb5d61",
        "name": "link out 40",
        "mode": "link",
        "links": [
            "20e77c4a2c2e1bc8",
            "98a99004fba3ce97"
        ],
        "x": 685,
        "y": 380,
        "wires": []
    },
    {
        "id": "98a99004fba3ce97",
        "type": "link in",
        "z": "1bbb83617feb5d61",
        "name": "StopTransaction",
        "links": [
            "9b51587a3c6a0b45"
        ],
        "x": 285,
        "y": 720,
        "wires": [
            [
                "c65873db62d0456e",
                "b109c9e3b6b4ef7a"
            ]
        ]
    },
    {
        "id": "4df5bbe3dc069615",
        "type": "change",
        "z": "1bbb83617feb5d61",
        "name": "Generic Return",
        "rules": [
            {
                "t": "set",
                "p": "ocpp.data",
                "pt": "msg",
                "to": "payload.data",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 480,
        "wires": [
            [
                "f15df67d396f9ee3"
            ]
        ]
    },
    {
        "id": "20e77c4a2c2e1bc8",
        "type": "link in",
        "z": "1bbb83617feb5d61",
        "name": "link in 2",
        "links": [
            "8491c20b715112f4",
            "9b51587a3c6a0b45"
        ],
        "x": 285,
        "y": 480,
        "wires": [
            [
                "4df5bbe3dc069615"
            ]
        ]
    },
    {
        "id": "f15df67d396f9ee3",
        "type": "link out",
        "z": "1bbb83617feb5d61",
        "name": "link out 41",
        "mode": "link",
        "links": [
            "041c7cd4a35efa4d"
        ],
        "x": 585,
        "y": 480,
        "wires": []
    },
    {
        "id": "8491c20b715112f4",
        "type": "link out",
        "z": "1bbb83617feb5d61",
        "name": "link out 42",
        "mode": "link",
        "links": [
            "20e77c4a2c2e1bc8"
        ],
        "x": 685,
        "y": 300,
        "wires": []
    },
    {
        "id": "d5ea45e6cb0d7090",
        "type": "link in",
        "z": "1bbb83617feb5d61",
        "g": "fac4518c226fbf0c",
        "name": "StartTransaction",
        "links": [
            "d0719425702055f4"
        ],
        "x": 825,
        "y": 740,
        "wires": [
            [
                "e930a4053f3ebf38"
            ]
        ]
    },
    {
        "id": "d0719425702055f4",
        "type": "link out",
        "z": "1bbb83617feb5d61",
        "name": "link out 43",
        "mode": "link",
        "links": [
            "d5ea45e6cb0d7090"
        ],
        "x": 685,
        "y": 340,
        "wires": []
    },
    {
        "id": "565b9e3d1ccde32e",
        "type": "link in",
        "z": "1bbb83617feb5d61",
        "g": "f6e1783b4f8d6029",
        "name": "StatusNotification",
        "links": [
            "0d628f0894098128"
        ],
        "x": 835,
        "y": 580,
        "wires": [
            [
                "dcc4d675cbe95527"
            ]
        ]
    },
    {
        "id": "0d628f0894098128",
        "type": "link out",
        "z": "1bbb83617feb5d61",
        "name": "link out 44",
        "mode": "link",
        "links": [
            "565b9e3d1ccde32e"
        ],
        "x": 685,
        "y": 260,
        "wires": []
    },
    {
        "id": "d822835855e62f28",
        "type": "link out",
        "z": "1bbb83617feb5d61",
        "name": "link out 45",
        "mode": "link",
        "links": [
            "041c7cd4a35efa4d"
        ],
        "x": 625,
        "y": 660,
        "wires": []
    },
    {
        "id": "0526edd563f82711",
        "type": "link call",
        "z": "1bbb83617feb5d61",
        "name": "",
        "links": [
            "1e88d1e2d4dcc7d3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 830,
        "y": 120,
        "wires": [
            [
                "0974c9afbf6425e2"
            ]
        ]
    },
    {
        "id": "0974c9afbf6425e2",
        "type": "link out",
        "z": "1bbb83617feb5d61",
        "name": "link out 47",
        "mode": "link",
        "links": [
            "041c7cd4a35efa4d"
        ],
        "x": 985,
        "y": 120,
        "wires": []
    },
    {
        "id": "fdaa305606c3401a",
        "type": "subflow:1bbb83617feb5d61",
        "z": "9ca80d42115ee3c3",
        "name": "",
        "env": [
            {
                "name": "CSMS_PORT",
                "value": "8834",
                "type": "num"
            }
        ],
        "x": 550,
        "y": 80,
        "wires": [
            [
                "0bfecc1d6f524575",
                "ac99e09b91853939"
            ],
            [
                "846c6af009c205bd",
                "53e5e6b513fae4c6"
            ],
            [
                "2690df904d04509c"
            ]
        ]
    },
    {
        "id": "c001b42457967649",
        "type": "debug",
        "z": "9ca80d42115ee3c3",
        "name": "debug 24",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 40,
        "wires": []
    },
    {
        "id": "44e8fa5ea6d0b7fe",
        "type": "function",
        "z": "9ca80d42115ee3c3",
        "name": "LOCAL_SET_ALL_AUTH_EVSES",
        "func": "let evse_array = msg.payload;\n\nmsg.payload = {}\nmsg.payload.command = \"LOCAL_SET_ALL_AUTH_EVSES\"\nmsg.payload.data = {}\n\nevse_array.forEach(function(evse) {\n    msg.payload.data[evse.cbId] = evse.password;\n});\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 360,
        "wires": [
            [
                "fdaa305606c3401a"
            ]
        ]
    },
    {
        "id": "801901d267859d27",
        "type": "link in",
        "z": "9ca80d42115ee3c3",
        "name": "LOCAL_SET_VALID_EVSES",
        "links": [
            "40fe4278635a683c"
        ],
        "x": 125,
        "y": 360,
        "wires": [
            [
                "44e8fa5ea6d0b7fe"
            ]
        ]
    },
    {
        "id": "41174ff287679f83",
        "type": "debug",
        "z": "9ca80d42115ee3c3",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 140,
        "wires": []
    },
    {
        "id": "846c6af009c205bd",
        "type": "link out",
        "z": "9ca80d42115ee3c3",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "beada0a7e53cb46a",
            "d836b12b64275a9d"
        ],
        "x": 745,
        "y": 160,
        "wires": []
    },
    {
        "id": "14970b0433fc1816",
        "type": "link in",
        "z": "9ca80d42115ee3c3",
        "name": "Trigger Reqs",
        "links": [
            "82c7dc438bcf613e",
            "485897ecb288f5b2"
        ],
        "x": 145,
        "y": 20,
        "wires": [
            [
                "ea9c78552e696e47"
            ]
        ]
    },
    {
        "id": "45368c33e91f1031",
        "type": "inject",
        "z": "9ca80d42115ee3c3",
        "name": "GetConfig ALL Fractal0014",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "payload": "{\"command\":\"GetConfiguration\",\"cbId\":\"Fractal0014\",\"data\":{\"key\":[]}}",
        "payloadType": "json",
        "x": 240,
        "y": 160,
        "wires": [
            [
                "fdaa305606c3401a"
            ]
        ]
    },
    {
        "id": "0bfecc1d6f524575",
        "type": "switch",
        "z": "9ca80d42115ee3c3",
        "name": "",
        "property": "ocpp.command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "GetConfiguration",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 770,
        "y": 60,
        "wires": [
            [
                "c001b42457967649",
                "b13502a9cfe6c685"
            ]
        ]
    },
    {
        "id": "b13502a9cfe6c685",
        "type": "link out",
        "z": "9ca80d42115ee3c3",
        "name": "GetConfig",
        "mode": "link",
        "links": [
            "6d40c15be6021ad7"
        ],
        "x": 935,
        "y": 80,
        "wires": []
    },
    {
        "id": "868ca4fd5276022e",
        "type": "switch",
        "z": "9ca80d42115ee3c3",
        "g": "a0169f65e4967ec2",
        "name": "Filter from CS only",
        "property": "msgFrom",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 210,
        "y": 460,
        "wires": [
            [
                "e07f99fdfc73cd44"
            ]
        ]
    },
    {
        "id": "124fa94892413c81",
        "type": "redis-command",
        "z": "9ca80d42115ee3c3",
        "g": "a0169f65e4967ec2",
        "server": "0430675ed6c7cd83",
        "command": "GET",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 560,
        "y": 460,
        "wires": [
            [
                "b952178113645c64"
            ]
        ]
    },
    {
        "id": "e07f99fdfc73cd44",
        "type": "change",
        "z": "9ca80d42115ee3c3",
        "g": "a0169f65e4967ec2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "\"evse:\" & $lowercase(msg.cbId)",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 460,
        "wires": [
            [
                "124fa94892413c81"
            ]
        ]
    },
    {
        "id": "b952178113645c64",
        "type": "json",
        "z": "9ca80d42115ee3c3",
        "g": "a0169f65e4967ec2",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 690,
        "y": 460,
        "wires": [
            [
                "34b27b38f2e7609a"
            ]
        ]
    },
    {
        "id": "34b27b38f2e7609a",
        "type": "change",
        "z": "9ca80d42115ee3c3",
        "g": "a0169f65e4967ec2",
        "name": "Update TS",
        "rules": [
            {
                "t": "set",
                "p": "payload.lastcommtime",
                "pt": "msg",
                "to": "timestamp",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 460,
        "wires": [
            [
                "7bc0d39e117db98a"
            ]
        ]
    },
    {
        "id": "7bc0d39e117db98a",
        "type": "json",
        "z": "9ca80d42115ee3c3",
        "g": "a0169f65e4967ec2",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 960,
        "y": 460,
        "wires": [
            [
                "d2d365e869ae5aa3"
            ]
        ]
    },
    {
        "id": "d2d365e869ae5aa3",
        "type": "redis-command",
        "z": "9ca80d42115ee3c3",
        "g": "a0169f65e4967ec2",
        "server": "0430675ed6c7cd83",
        "command": "SET",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1100,
        "y": 460,
        "wires": [
            [
                "a1f721f1a03c965a"
            ]
        ]
    },
    {
        "id": "d836b12b64275a9d",
        "type": "link in",
        "z": "9ca80d42115ee3c3",
        "g": "a0169f65e4967ec2",
        "name": "Update TS",
        "links": [
            "846c6af009c205bd"
        ],
        "x": 85,
        "y": 460,
        "wires": [
            [
                "868ca4fd5276022e"
            ]
        ]
    },
    {
        "id": "a1f721f1a03c965a",
        "type": "link out",
        "z": "9ca80d42115ee3c3",
        "g": "a0169f65e4967ec2",
        "name": "link out 17",
        "mode": "link",
        "links": [
            "19a1d55d0ad937f5"
        ],
        "x": 1215,
        "y": 460,
        "wires": []
    },
    {
        "id": "ea9c78552e696e47",
        "type": "change",
        "z": "9ca80d42115ee3c3",
        "name": "TriggerMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload.data",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "move",
                "p": "payload.connectorId",
                "pt": "msg",
                "to": "payload.data.connectorId",
                "tot": "msg"
            },
            {
                "t": "move",
                "p": "payload.requestedMessage",
                "pt": "msg",
                "to": "payload.data.requestedMessage",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 20,
        "wires": [
            [
                "fdaa305606c3401a"
            ]
        ]
    },
    {
        "id": "6ea73070a96d4eeb",
        "type": "link in",
        "z": "9ca80d42115ee3c3",
        "name": "ocppReqs",
        "links": [
            "9061953296c99fc7",
            "bf301b6e3cd5b7f3"
        ],
        "x": 145,
        "y": 80,
        "wires": [
            [
                "fdaa305606c3401a"
            ]
        ]
    },
    {
        "id": "2690df904d04509c",
        "type": "debug",
        "z": "9ca80d42115ee3c3",
        "name": "debug 51",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 220,
        "wires": []
    },
    {
        "id": "53e5e6b513fae4c6",
        "type": "switch",
        "z": "9ca80d42115ee3c3",
        "name": "",
        "property": "msgFrom",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 990,
        "y": 140,
        "wires": [
            [
                "bc7897cb10724b22"
            ]
        ]
    },
    {
        "id": "bc7897cb10724b22",
        "type": "switch",
        "z": "9ca80d42115ee3c3",
        "name": "",
        "property": "payload[0]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1130,
        "y": 140,
        "wires": [
            [
                "228ad740515166f1"
            ]
        ]
    },
    {
        "id": "228ad740515166f1",
        "type": "switch",
        "z": "9ca80d42115ee3c3",
        "name": "",
        "property": "payload[2]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "StartTransaction",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "StartTransactionExtended",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1300,
        "y": 140,
        "wires": [
            [
                "41174ff287679f83",
                "e9e2899132889fc9"
            ],
            [
                "41174ff287679f83"
            ]
        ]
    },
    {
        "id": "675fb2cc11250d8b",
        "type": "inject",
        "z": "9ca80d42115ee3c3",
        "name": "GetOnlneList",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\":99,\"command\":\"LOCAL_GET_ONLINE_LIST\"}",
        "payloadType": "json",
        "x": 280,
        "y": 120,
        "wires": [
            [
                "fdaa305606c3401a"
            ]
        ]
    },
    {
        "id": "ac99e09b91853939",
        "type": "debug",
        "z": "9ca80d42115ee3c3",
        "name": "debug 59",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 20,
        "wires": []
    },
    {
        "id": "995639e3000a9bc6",
        "type": "change",
        "z": "9ca80d42115ee3c3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "CSMS:SESSIONS",
                "pt": "global",
                "to": "[{\"cbId\":\"Fractal0014\",\"connectorId\":1,\"amps\":40},{\"cbId\":\"EVOChargeLab1\",\"connectorId\":1,\"amps\":32},{\"cbId\":\"Fractal0001\",\"connectorId\":1,\"amps\":40}]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "1c1f1d487e853fb4",
        "type": "inject",
        "z": "9ca80d42115ee3c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 305,
        "y": 620,
        "wires": [
            [
                "a835d131272b71ab"
            ]
        ],
        "l": false
    },
    {
        "id": "b63a8282533b86ac",
        "type": "inject",
        "z": "9ca80d42115ee3c3",
        "name": "GetConfig ALL Fractal0001",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "payload": "{\"command\":\"GetConfiguration\",\"cbId\":\"Fractal0001\",\"data\":{\"key\":[]}}",
        "payloadType": "json",
        "x": 240,
        "y": 200,
        "wires": [
            [
                "fdaa305606c3401a"
            ]
        ]
    },
    {
        "id": "47a91001dbd9f4a4",
        "type": "inject",
        "z": "9ca80d42115ee3c3",
        "name": "GetConfig ALL EVOChargeLab1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "payload": "{\"command\":\"GetConfiguration\",\"cbId\":\"EVOChargeLab1\",\"data\":{\"key\":[]}}",
        "payloadType": "json",
        "x": 260,
        "y": 240,
        "wires": [
            [
                "fdaa305606c3401a"
            ]
        ]
    },
    {
        "id": "a835d131272b71ab",
        "type": "change",
        "z": "9ca80d42115ee3c3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "CSMS:SESSIONS",
                "pt": "global",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "e9e2899132889fc9",
        "type": "function",
        "z": "9ca80d42115ee3c3",
        "name": "function 23",
        "func": "let message = `Transaction starting on <span style=\"color:navy;font-weight:bold\">${msg.cbId}</span>, connector <span style=\"color:#023020;font-weight:bold\">${msg.payload[3].connectorId}`\nmsg.payload = message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 80,
        "wires": [
            [
                "dd9016feeab69f8a"
            ]
        ]
    },
    {
        "id": "dd9016feeab69f8a",
        "type": "link out",
        "z": "9ca80d42115ee3c3",
        "name": "link out 46",
        "mode": "link",
        "links": [
            "05b1553fcabcbc8b"
        ],
        "x": 1585,
        "y": 80,
        "wires": []
    },
    {
        "id": "1e88d1e2d4dcc7d3",
        "type": "link in",
        "z": "9ca80d42115ee3c3",
        "name": "HB_IN",
        "links": [],
        "x": 545,
        "y": 760,
        "wires": [
            [
                "7283d4e60852fabc"
            ]
        ]
    },
    {
        "id": "2b16b2bbbd57fabc",
        "type": "link out",
        "z": "9ca80d42115ee3c3",
        "name": "HB_OUT",
        "mode": "return",
        "links": [],
        "x": 875,
        "y": 760,
        "wires": []
    },
    {
        "id": "7283d4e60852fabc",
        "type": "change",
        "z": "9ca80d42115ee3c3",
        "name": "Heartbeat",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload.currentTime",
                "pt": "msg",
                "to": "$now()",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 760,
        "wires": [
            [
                "2b16b2bbbd57fabc",
                "cac6e0f4732f0d7b"
            ]
        ]
    },
    {
        "id": "cac6e0f4732f0d7b",
        "type": "debug",
        "z": "9ca80d42115ee3c3",
        "name": "debug 70",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 840,
        "wires": []
    },
    {
        "id": "beada0a7e53cb46a",
        "type": "link in",
        "z": "294f3520d49a4f00",
        "name": "log_ocpp",
        "links": [
            "846c6af009c205bd"
        ],
        "x": 135,
        "y": 160,
        "wires": [
            [
                "82c6ee1e7ebdc068",
                "05ced04ece9fd092"
            ]
        ]
    },
    {
        "id": "966a08ec9fe96bbc",
        "type": "influxdb out",
        "z": "294f3520d49a4f00",
        "influxdb": "7cb40fcee206391e",
        "name": "OCPP Log",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "argonne",
        "bucket": "ocpp_log",
        "x": 850,
        "y": 160,
        "wires": []
    },
    {
        "id": "82c6ee1e7ebdc068",
        "type": "function",
        "z": "294f3520d49a4f00",
        "name": "cmd, <res>, or error",
        "func": "\nlet influxTags = {\n    cbId: msg.cbId,\n    msgFrom: msg.msgFrom,\n}\n\nif (msg.payload[0] == 2){\n    influxTags.command = msg.payload[2]\n} else if (msg.payload[0] == 3) {\n    influxTags.command = '<response>'\n} else if (msg.payload[0] == 4) {\n    influxTags.command = '<ERROR>'\n}\n\nlet influxFields = {\n    time: new Date(msg.timestamp),\n    ocppMsg: JSON.stringify(msg.payload),\n    msgId: msg.payload[1]\n}\n\nmsg.measurement = 'ocpplog';\nmsg.payload = [influxFields,influxTags];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 160,
        "wires": [
            [
                "ba42612f57a44fd4"
            ]
        ]
    },
    {
        "id": "4599c18a0badb5ba",
        "type": "debug",
        "z": "294f3520d49a4f00",
        "name": "debug 26",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload[2]",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 220,
        "wires": []
    },
    {
        "id": "258d81071dbe8925",
        "type": "debug",
        "z": "294f3520d49a4f00",
        "name": "debug 27",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 260,
        "wires": []
    },
    {
        "id": "22f189e825d297fe",
        "type": "influxdb in",
        "z": "294f3520d49a4f00",
        "influxdb": "7cb40fcee206391e",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "argonne",
        "x": 500,
        "y": 340,
        "wires": [
            [
                "61d8e489a269e5c7"
            ]
        ]
    },
    {
        "id": "f8c6aff29ab8c9df",
        "type": "debug",
        "z": "294f3520d49a4f00",
        "name": "debug 28",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 300,
        "wires": []
    },
    {
        "id": "09b04c7f9641599a",
        "type": "function",
        "z": "294f3520d49a4f00",
        "name": "FLUX Get raw OCPP",
        "func": "// clear out any incoming message for now.\nmsg = {}\n\nmsg.query = \n    'from(bucket: \"ocpp_log\") \\\n      |> range(start: -4d) \\\n      |> limit(n: 500) \\\n      |> filter(fn: (r) => r[\"_measurement\"] == \"ocpplog\") \\\n      |> filter(fn: (r) => r[\"_field\"] == \"ocppMsg\") \\\n      |> group() \\\n      |> sort(columns: [\"_time\"]) \\\n      |> drop(columns: [\"table\",\"Result\",\"_measurement\",\"_stop\",\"_start\",\"_field\"]) \\\n      //|> keep(columns: [\"_time\",\"cbId\",\"command\",\"msgFrom\",\"_value\"])'\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 340,
        "wires": [
            [
                "22f189e825d297fe"
            ]
        ]
    },
    {
        "id": "8aa8700b2f7344e6",
        "type": "inject",
        "z": "294f3520d49a4f00",
        "name": "Init Log",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "7d1c0e100d38e388",
        "type": "ui-template",
        "z": "294f3520d49a4f00",
        "group": "c187df53e1cacaad",
        "page": "",
        "ui": "",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <v-text-field\n        v-model=\"search\"\n        label=\"Search\"\n        prepend-inner-icon=\"mdi-magnify\"\n        variant=\"outlined\"\n        hide-details\n        single-line\n      ></v-text-field>\n\n    <v-data-table  \n            v-model:search=\"search\" \n            :items=\"msg?.payload\"\n            :headers=\"headers\"\n            density=\"compact\"\n            :filter-keys='[\"command\",\"msgFrom\",\"cbId\",\"_value\"]'\n            >\n        <template v-slot:header._time>\n            <div class=\"headers\">Time</div>\n        </template>\n        <template v-slot:header.cbId>\n            <div class=\"headers\">CS</div>\n        </template>\n        <template v-slot:header.msgFrom>\n            <div class=\"headers\">Origin</div>\n        </template>\n        <template v-slot:header.command>\n            <div class=\"text-center headers\">CMD</div>\n        </template>\n        <template v-slot:header._value>\n            <div class=\"text-center headers\">OCPP Message</div>\n        </template>\n\n        <template v-slot:item._time=\"{ item }\">\n            <div>{{ getLocalTimeString(item._time) }}</div>\n        </template>\n        <template v-slot:item.command=\"{ item }\">\n            <div :class=\"getOCPPCmdClass(item.command)\">{{ item.command }}</div>\n        </template>\n        <template v-slot:item._value=\"{ item }\">\n            <div :class=\"getOCPPMsgClass(item._value)\">{{ item._value }}</div>\n        </template>\n\n    </v-data-table>\n</template>\n\n<script>\n    export default {\n        data() {\n            // define variables available component-wide\n            // (in <template> and component functions)\n            return {\n                search: '',\n                groupBy: [ {key: \"_value\", order: \"asc\"}],\n                headers: [\n                    {text: \"Time\", value: \"_time\"},\n                    {text: \"Origin\", value: \"msgFrom\"},\n                    {text: \"EVSE\", value: \"cbId\"},\n                    {text: \"CMD\", value: \"command\"},\n                    {text: \"OCPP Message\", value: \"_value\"}\n                ]\n            }\n        },\n        watch: {\n            // watch for any changes of \"count\"\n\n        },\n        computed: {\n\n        },\n        methods: {\n            // expose a method to our <template> and Vue Application\n            getLocalTimeString: function (isoTime){\n                const date = new Date(isoTime)\n                const options = { \n                    year: '2-digit', \n                    month: '2-digit', \n                    day: '2-digit', \n                    hour: '2-digit', \n                    minute: '2-digit', \n                    second: '2-digit', \n                    millisecond: '3-digit',\n                    hour12: false \n                    }\n                return date.toLocaleString('en-US', options)\n            },\n            getOCPPMsgClass: function (item) {\n                let obj = JSON.parse(item);\n                if ( obj[0] == 2) {\n                    return \"ocppMsgReq\";\n                }\n                else if ( obj[0] == 3) {\n                    return \"ocppMsgRes\";\n                }\n                else {\n                    return \"ocppMsgErr\";\n                }\n            },\n            getOCPPCmdClass: function (item) {\n                if (item.startsWith(\"<res\")) {\n                    return \"ocppCmdRes\";\n                }\n                else {\n                    return \"ocppCmdReq\";\n                }\n            }\n        },\n        mounted() {\n            // code here when the component is first loaded\n        },\n        unmounted() {\n            // code here when the component is removed from the Dashboard\n            // i.e. when the user navigates away from the page\n        }\n    }\n</script>\n<style>\n    /* define any styles here - supports raw CSS */\n    .my-class {\n        color: red;\n    }\n    .headers {\n        font-weight: bold;\n    }\n    .ocppMsgReq {\n        color: blue;\n        font-weight: bold;\n    }\n    .ocppMsgRes {\n        color: blue;\n    }\n    .ocppMsgErr {\n        color: red;\n    }\n    .ocppCmdReq {\n        color: green;\n        font-weight: bold;\n    }\n    .ocppCmdRes {\n        color: DarkCyan;\n    }\n</style>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 920,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "61d8e489a269e5c7",
        "type": "function",
        "z": "294f3520d49a4f00",
        "name": "FLUX remove extras",
        "func": "msg.payload.forEach(function(ocppMsg) {\n    delete ocppMsg.result;\n    delete ocppMsg.table;\n});\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 340,
        "wires": [
            [
                "7d1c0e100d38e388",
                "f8c6aff29ab8c9df"
            ]
        ]
    },
    {
        "id": "a032c7f04398d7d4",
        "type": "delay",
        "z": "294f3520d49a4f00",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 600,
        "y": 200,
        "wires": [
            [
                "fca2ef466dd35c31"
            ]
        ]
    },
    {
        "id": "b645202acfa17bbe",
        "type": "mqtt in",
        "z": "294f3520d49a4f00",
        "g": "5c57038f3942292a",
        "name": "",
        "topic": "ANL/SEP/Meter/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "191526b4c53ba7c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 820,
        "wires": [
            [
                "ed8247496c428ec6"
            ]
        ]
    },
    {
        "id": "618def1a0f4236f9",
        "type": "debug",
        "z": "294f3520d49a4f00",
        "g": "5c57038f3942292a",
        "name": "debug 39",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 820,
        "wires": []
    },
    {
        "id": "8a6a1c999a396dc9",
        "type": "mqtt out",
        "z": "294f3520d49a4f00",
        "g": "5c57038f3942292a",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "213076b7a395d1a9",
        "x": 530,
        "y": 860,
        "wires": []
    },
    {
        "id": "ed8247496c428ec6",
        "type": "change",
        "z": "294f3520d49a4f00",
        "g": "5c57038f3942292a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "$replace(msg.topic, \"ANL/SEP\", \"CIPio/Debbie\")\t",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 820,
        "wires": [
            [
                "618def1a0f4236f9",
                "8a6a1c999a396dc9"
            ]
        ]
    },
    {
        "id": "24ec176038fe713d",
        "type": "influxdb out",
        "z": "294f3520d49a4f00",
        "influxdb": "7cb40fcee206391e",
        "name": "OCPP Bucket",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "argonne",
        "bucket": "OCPP",
        "x": 1340,
        "y": 100,
        "wires": []
    },
    {
        "id": "f3e1c99425a9c103",
        "type": "function",
        "z": "294f3520d49a4f00",
        "name": "Convert to Influx TS data",
        "func": "//TODO: Account for error type messages\n//\n\n// This copies the data portion of an OCPP message based on\n// the message type. A request has its data in the array at the\n// 4th position, so zero based that's [3]. We just calculate\n// that position based on the message type subtracted from 5.\n//\nconst measurements = {\n    BootNotification: \"BootNotification\",\n    StatusNotification: \"StatusNotification\",\n    Authorize: \"Authorize\",\n    StartTransactionEnhanced: \"Transaction\",\n    StopTransaction: \"Transaction\",\n    RemoteStartTransaction: \"Transaction\",\n    RemoteStopTransaction: \"Transaction\",\n    MeterValues: \"MeterValues\",\n    SetChargingProfile: \"ChargingProfile\"\n}\n\nif (!Object.hasOwn(measurements,msg.payload[1].command)) return\n\nlet idx = 5 - (JSON.parse(msg.payload[0]?.ocppMsg)[0])\n\nif (idx != 3) return;\n\nlet ocppJson = JSON.parse(msg.payload[0]?.ocppMsg)[idx]\ndelete msg.payload[0].ocppMsg\n\nmsg.measurement = measurements[msg.payload[1].command]\n\nif (msg.payload[1].command === \"StartTransactionEnhanced\"){\n    msg.payload[1].command = \"StartTransaction\"\n}\n\nlet merged = {...msg.payload[0],...ocppJson }\nmsg.payload[0] = merged\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 100,
        "wires": [
            [
                "96fa7c9ac4acc47f",
                "0fcf5938cf680373"
            ]
        ]
    },
    {
        "id": "687284eeeefc6094",
        "type": "switch",
        "z": "294f3520d49a4f00",
        "name": "Filter StartTxEnhanced",
        "property": "ocpp.command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "StartTransactionEnhanced",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 640,
        "y": 160,
        "wires": [
            [
                "966a08ec9fe96bbc"
            ]
        ]
    },
    {
        "id": "6ec7f5c8fa255cf6",
        "type": "link in",
        "z": "294f3520d49a4f00",
        "name": "Refresh Log",
        "links": [
            "fca2ef466dd35c31"
        ],
        "x": 105,
        "y": 340,
        "wires": [
            [
                "09b04c7f9641599a"
            ]
        ]
    },
    {
        "id": "fca2ef466dd35c31",
        "type": "link out",
        "z": "294f3520d49a4f00",
        "name": "link out 19",
        "mode": "link",
        "links": [
            "6ec7f5c8fa255cf6"
        ],
        "x": 715,
        "y": 200,
        "wires": []
    },
    {
        "id": "96fa7c9ac4acc47f",
        "type": "debug",
        "z": "294f3520d49a4f00",
        "name": "debug 50",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 40,
        "wires": []
    },
    {
        "id": "05ced04ece9fd092",
        "type": "switch",
        "z": "294f3520d49a4f00",
        "name": "",
        "property": "msgFrom",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 250,
        "y": 220,
        "wires": [
            [
                "4599c18a0badb5ba"
            ]
        ]
    },
    {
        "id": "e7de0b7ea1e77e8e",
        "type": "switch",
        "z": "294f3520d49a4f00",
        "name": "",
        "property": "payload[1].command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "MeterValues",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 590,
        "y": 260,
        "wires": [
            [
                "258d81071dbe8925"
            ]
        ]
    },
    {
        "id": "670bbc7e0e5a3e30",
        "type": "function",
        "z": "294f3520d49a4f00",
        "name": "MeterValues to Influx",
        "func": "let txid = msg.payload[0].transactionId || 0;\n\n// Some OCPP implementations continue to send M/V after a session has ended.\nif (txid === 0) return;\n\nmsg.measurement = 'MeterValues';\n\nlet influxFields = {};\n\nlet influxTags = { \n    connectorId: msg.payload[0].connectorId,\n    transactionId: msg.payload[0].transactionId,\n    cbId: msg.cbId,\n}\n\n\nif (Array.isArray(msg.payload[0].meterValue)){\n    msg.payload[0].meterValue.forEach(doMeterValues);\n}\nelse {\n    doMeterValues(msg.payload[0].meterValue);\n}\n\nfunction doMeterValues(mv){\n    if (mv.hasOwnProperty('timestamp')){\n        influxFields.time = new Date(mv.timestamp);\n    } \n\n    mv.sampledValue.forEach(sv => {\n        let value = Number(sv.value);\n        let unit = sv.unit;\n        switch (sv.measurand){\n        case 'Energy.Active.Import.Register':\n            value = (unit[0] == 'k')? value : value / 1000;\n            influxFields.EnergykWh = Math.round(value * 100) / 100;\n            break;\n        case 'Power.Active.Import':\n            value = (unit[0] == 'k')? value : value / 1000;\n            influxFields.PowerkW = Math.round(value * 100) / 100;\n            break;\n        case 'Current.Import':\n            influxFields.CurrentA = value;\n            break;\n        case 'Current.Offered':\n            influxFields.CurrentOfferedA = value;\n            break;\n        case 'Voltage':\n            influxFields.VoltageV = value;\n            break;\n        case 'SoC':\n            influxFields.SoC = value;\n            break;\n        default:\n            break;\n        }\n    });\n}\n\n// Next we verify that we have a power value since some (LiteOn/EVOCharge) EVSEs don't bother\n// to supply one. \nif (influxFields.hasOwnProperty('PowerkW') != true){\n    if (influxFields.hasOwnProperty('VoltageV') && influxFields.hasOwnProperty('CurrentA')){\n        influxFields.PowerkW = ((influxFields.VoltageV * influxFields.CurrentA / 1000) * 100) / 100;\n    }\n}\n\n\nmsg.payload = [influxFields, influxTags];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 80,
        "wires": [
            [
                "24ec176038fe713d"
            ]
        ]
    },
    {
        "id": "0fcf5938cf680373",
        "type": "switch",
        "z": "294f3520d49a4f00",
        "name": "",
        "property": "measurement",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "MeterValues",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 910,
        "y": 100,
        "wires": [
            [
                "670bbc7e0e5a3e30",
                "5afb9cd944ed3a2a"
            ],
            [
                "24ec176038fe713d",
                "c8de40583c78dc49"
            ]
        ]
    },
    {
        "id": "5afb9cd944ed3a2a",
        "type": "debug",
        "z": "294f3520d49a4f00",
        "name": "debug 53",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 40,
        "wires": []
    },
    {
        "id": "c8de40583c78dc49",
        "type": "switch",
        "z": "294f3520d49a4f00",
        "name": "",
        "property": "measurement",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Transaction",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "MeterValues",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "BootNotification",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Authorize",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 1140,
        "y": 220,
        "wires": [
            [
                "7a8e05f5d5a2e926"
            ],
            [
                "b30433a611efd29c"
            ],
            [],
            []
        ]
    },
    {
        "id": "7a8e05f5d5a2e926",
        "type": "link out",
        "z": "294f3520d49a4f00",
        "name": "link out 22",
        "mode": "link",
        "links": [
            "22993ff229d6db8d"
        ],
        "x": 1325,
        "y": 200,
        "wires": []
    },
    {
        "id": "b30433a611efd29c",
        "type": "link out",
        "z": "294f3520d49a4f00",
        "name": "link out 23",
        "mode": "link",
        "links": [
            "aa18045a070128d9"
        ],
        "x": 1325,
        "y": 240,
        "wires": []
    },
    {
        "id": "5fcf104321bf3b9e",
        "type": "function",
        "z": "294f3520d49a4f00",
        "name": "function 17",
        "func": "msg = {}\n\nmsg.query = `from(bucket: \"ocpp_log\") \\ \n    |> range(start: -1h) \\ \n    |> filter(fn: (r) => r[\"_measurement\"] == \"ocpplog\") \\\n    |> filter(fn: (r) => r[\"_field\"] == \"msgId\" or r[\"_field\"] == \"ocppMsg\") \\\n    |> group(columns: [\"_value\"]) \\\n    |> keep(columns: [\"_time\",\"cbId\",\"command\",\"msgFrom\",\"_value\"]) \\\n    |> sort(columns: [\"command\"], desc: true)`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 500,
        "wires": [
            [
                "6d6e838673636f47"
            ]
        ]
    },
    {
        "id": "916e9cd9c4f8a11b",
        "type": "debug",
        "z": "294f3520d49a4f00",
        "name": "debug 54",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 500,
        "wires": []
    },
    {
        "id": "13437f1913f23438",
        "type": "inject",
        "z": "294f3520d49a4f00",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 600,
        "y": 500,
        "wires": [
            [
                "5fcf104321bf3b9e"
            ]
        ]
    },
    {
        "id": "6d6e838673636f47",
        "type": "influxdb in",
        "z": "294f3520d49a4f00",
        "influxdb": "7cb40fcee206391e",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "argonne",
        "x": 960,
        "y": 500,
        "wires": [
            [
                "916e9cd9c4f8a11b"
            ]
        ]
    },
    {
        "id": "49370f62ef275c28",
        "type": "function",
        "z": "92d055a5ecbac90c",
        "name": "function 14",
        "func": "msg.payload.forEach(function(evse) {\n    if (evse.lat && evse.lon){\n        let msg2 = {\n            payload: {\n                name: evse.cbId,\n                lat: evse.lat,\n                lon: evse.lon,\n                icon: \"https://api.mdisvg.com/v1/i/mdi-ev-station\",\n                iconColor: \"green\"\n            }\n        }        \n        node.send(msg2)\n    }\n});",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 40,
        "wires": [
            [
                "089bf4f30ca18408"
            ]
        ]
    },
    {
        "id": "089bf4f30ca18408",
        "type": "worldmap",
        "z": "92d055a5ecbac90c",
        "name": "",
        "lat": "",
        "lon": "",
        "zoom": "",
        "layer": "OSMG",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "false",
        "coords": "deg",
        "showgrid": "false",
        "showruler": "false",
        "allowFileDrop": "false",
        "path": "/worldmap",
        "overlist": "DR,CO,TL",
        "maplist": "OSMG,OSMC,EsriC,EsriS,UKOS",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 360,
        "y": 40,
        "wires": []
    },
    {
        "id": "fd0ce11a6c04c0f3",
        "type": "link in",
        "z": "92d055a5ecbac90c",
        "name": "Map Items",
        "links": [
            "a361a3233397f32f"
        ],
        "x": 85,
        "y": 40,
        "wires": [
            [
                "49370f62ef275c28"
            ]
        ]
    },
    {
        "id": "af38625e0eb46e1a",
        "type": "ui-template",
        "z": "92d055a5ecbac90c",
        "group": "530fe8d240942ac0",
        "page": "",
        "ui": "",
        "name": "Graphic Banner",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <container>\n        <v-img src=\"https://github.com/bnystrom/stuff/blob/main/cipiologo.png?raw=true\"><v-img>\n    </container>\n</template>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 220,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "90addadef33f0950",
        "type": "ui-iframe",
        "z": "92d055a5ecbac90c",
        "name": "Map",
        "group": "530fe8d240942ac0",
        "order": 9,
        "src": "/worldmap",
        "width": 6,
        "height": 8,
        "x": 190,
        "y": 100,
        "wires": []
    },
    {
        "id": "39f51e38c8ce88f2",
        "type": "change",
        "z": "92d055a5ecbac90c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"currentA\":0,\"time\":\"\"}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload.currentA",
                "pt": "msg",
                "to": "SITE:LoadLimit",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "payload.time",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "LoadLimit",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 220,
        "wires": [
            [
                "d1bc1b3ba06b799a"
            ]
        ]
    },
    {
        "id": "74499b15f0145429",
        "type": "inject",
        "z": "92d055a5ecbac90c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "39f51e38c8ce88f2",
                "f18b9979d2212d1b"
            ]
        ]
    },
    {
        "id": "f3b30d3612e48f36",
        "type": "influxdb in",
        "z": "92d055a5ecbac90c",
        "influxdb": "7cb40fcee206391e",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "argonne",
        "x": 560,
        "y": 260,
        "wires": [
            [
                "0f02c20fb2330f7a",
                "825191f59f313cab",
                "19926af6f970a4b9"
            ]
        ]
    },
    {
        "id": "f18b9979d2212d1b",
        "type": "function",
        "z": "92d055a5ecbac90c",
        "name": "FLUX Get raw MV OCPP",
        "func": "// clear out any incoming message for now.\nlet filter_by_tx = \"\";\nlet topic = \"00000000\"\n\n/*\nif (msg.payload.txId) {\n  filter_by_tx = `|> filter(fn: (r) => r[\"transactionId\"] == \"${msg.payload.txId}\")`\n  topic = msg.payload.txId\n}\n*/\n\nmsg = {}\n\nmsg.topic = topic\n\nmsg.query = \n  `from(bucket: \"OCPP\") \n    |> range(start: -1h) \n    |> filter(fn: (r) => r[\"_measurement\"] == \"MeterValues\") \n    |> filter(fn: (r) => r[\"_field\"] == \"CurrentA\")\n    |> drop(columns: [\"_start\",\"_stop\",\"_measurement\",\"transactionId\"])\n    |> sort(columns: [\"_time\"])`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 260,
        "wires": [
            [
                "f3b30d3612e48f36"
            ]
        ]
    },
    {
        "id": "0f02c20fb2330f7a",
        "type": "function",
        "z": "92d055a5ecbac90c",
        "name": "FLUX remove extras",
        "func": "msg.payload.forEach(function(mv) {\n    //delete ocppMsg.result;\n    //delete ocppMsg.table;\n    node.send({ \n        topic: `${mv.cbId}:P${mv.connectorId}`, \n        payload: {\n            currentA: mv._value,\n            time: mv._time \n        } \n    })\n});\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "825191f59f313cab",
        "type": "debug",
        "z": "92d055a5ecbac90c",
        "name": "debug 62",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 200,
        "wires": []
    },
    {
        "id": "d1bc1b3ba06b799a",
        "type": "debug",
        "z": "92d055a5ecbac90c",
        "name": "debug 63",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 220,
        "wires": []
    },
    {
        "id": "9ccf03b5bb8eecc2",
        "type": "debug",
        "z": "92d055a5ecbac90c",
        "name": "debug 64",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 280,
        "wires": []
    },
    {
        "id": "19926af6f970a4b9",
        "type": "ui-template",
        "z": "92d055a5ecbac90c",
        "group": "530fe8d240942ac0",
        "page": "",
        "ui": "",
        "name": "ChartJS",
        "order": 10,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <canvas ref=\"chart\" />\n</template>\n\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n\n<script>\n    export default {\n        mounted() {\n            // register a listener for incoming data\n            this.$socket.on('msg-input:' + this.id, this.onInput)\n\n            // check with ChartJS has loaded\n            let interval = setInterval(() => {\n                if (window.Chart) {\n                    // clear the check for ChartJS\n                    clearInterval(interval);\n                    // draw our initial chart\n                    this.draw()\n                }\n            }, 100);\n        },\n        methods: {\n            draw () {\n                // get reference to the <canvas /> element\n                const ctx = this.$refs.chart\n                \n                // Render the chart\n                const chart = new Chart(ctx, {\n                    type: 'line',\n                    data: {\n                        datasets: [{\n                            label: \"\",  // label for the single line we'll render\n                            data: [\n                            ],            // start with no data\n                            fill: 1\n                        }]\n                    },\n                    options: {\n                        animation: false, // don't run the animation for incoming data\n                        responsive: true, // ensure we auto-resize the content\n                        scales: {\n                            x: {\n                                type: 'time' // in this example, we're rendering timestamps\n                            },\n                            y: {\n                                stacked: true\n                            }\n                        },\n                        parsing: {\n                            xAxisKey: 'time', // the property to render on the x-axis\n                            yAxisKey: 'value' // the property to render on the y-axis\n                        },\n                        plugins: {\n                            legend: {\n                                position: 'top',\n                            },\n                            title: {\n                                display: true,\n                                text: 'EVSE Load (Amps)'\n                            }\n                        }   \n                    },\n                });\n                // make this available to all elements of the component\n                this.chart = chart\n            },\n            onInput (msg) {\n                this.chart.data.datasets = []\n                // this.chart.data.datasets[0].data = []\n                this.chart.update()\n             \n\n\n                msg.payload.forEach( ( mvItem ) => {\n                    let label = `${mvItem.cbId}:P${mvItem.connectorId}`\n                    let idx = this.chart.data.datasets.findIndex( (ds) => ds.label == label )\n\n                    if (idx == -1) { \n                        idx = this.chart.data.datasets.push( {label: label, data: [] } ) - 1\n                    }\n                    \n                    this.chart.data.datasets[idx].data.push({time: mvItem._time, value: mvItem._value}) \n                })\n                this.chart.update()  \n            }    \n            \n        }\n    }\n\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 780,
        "y": 280,
        "wires": [
            [
                "9ccf03b5bb8eecc2"
            ]
        ]
    },
    {
        "id": "4e88cb3fee82d891",
        "type": "function",
        "z": "92d055a5ecbac90c",
        "name": "Get Tx MeterStart/Stop  ",
        "func": "msg = {}\n\nmsg.query = `\nmeterStart = from(bucket: \"OCPP\")\n  |> range(start: -2d)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"Transaction\")\n  |> filter(fn: (r) => r[\"_field\"] == \"transactionId\" or r[\"_field\"] == \"meterStart\")\n  |> filter(fn: (r) => r.command == \"StartTransaction\")\n  |> pivot(columnKey: [\"_field\"], rowKey: [\"_time\"], valueColumn: \"_value\")\n  |> filter(fn: (r) => r.transactionId != 0)\n  |> drop(columns: [\"_start\",\"_stop\",\"msgFrom\",\"_measurement\"])\n\nmeterStop = from(bucket: \"OCPP\")\n  |> range(start: -2d)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"Transaction\")\n  |> filter(fn: (r) => r[\"_field\"] == \"transactionId\" or r[\"_field\"] == \"meterStop\")\n  |> filter(fn: (r) => r.command == \"StopTransaction\")\n  |> pivot(columnKey: [\"_field\"], rowKey: [\"_time\"], valueColumn: \"_value\")\n  |> filter(fn: (r) => r.transactionId != 0)\n  |> drop(columns: [\"_start\",\"_stop\",\"msgFrom\",\"_measurement\"])\n\njoin(tables: {key1: meterStart, key2: meterStop}, on: [\"transactionId\"], method: \"inner\")\n|> map(fn: (r) => ({ r with totalEnergy: r.meterStop - r.meterStart}))\n|> map(fn: (r) => ({ r with difference_seconds: (uint( v: r._time_key2) - uint( v: r._time_key1)) / uint(v: 1000000000) }))\n\n`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 460,
        "wires": [
            [
                "e227df7e261ca442"
            ]
        ]
    },
    {
        "id": "e227df7e261ca442",
        "type": "influxdb in",
        "z": "92d055a5ecbac90c",
        "influxdb": "7cb40fcee206391e",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "argonne",
        "x": 680,
        "y": 460,
        "wires": [
            [
                "632ee4461df6dec4"
            ]
        ]
    },
    {
        "id": "f8ba7f2f6416f7ca",
        "type": "inject",
        "z": "92d055a5ecbac90c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 460,
        "wires": [
            [
                "4e88cb3fee82d891"
            ]
        ]
    },
    {
        "id": "632ee4461df6dec4",
        "type": "debug",
        "z": "92d055a5ecbac90c",
        "name": "debug 66",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 460,
        "wires": []
    },
    {
        "id": "fc4d9666fe59b41b",
        "type": "ui-text",
        "z": "92d055a5ecbac90c",
        "group": "530fe8d240942ac0",
        "order": 3,
        "width": "2",
        "height": "1",
        "name": "",
        "label": "Tx Today:  ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": true,
        "font": "",
        "fontSize": "22",
        "color": "#490481",
        "wrapText": false,
        "className": "",
        "x": 580,
        "y": 580,
        "wires": []
    },
    {
        "id": "86c44caadc208afb",
        "type": "ui-text",
        "z": "92d055a5ecbac90c",
        "group": "530fe8d240942ac0",
        "order": 2,
        "width": "2",
        "height": "1",
        "name": "",
        "label": "Active Tx:  ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": true,
        "font": "",
        "fontSize": "22",
        "color": "#490481",
        "wrapText": false,
        "className": "",
        "x": 800,
        "y": 580,
        "wires": []
    },
    {
        "id": "dc8ebffcfc3e5ce0",
        "type": "ui-text",
        "z": "92d055a5ecbac90c",
        "group": "530fe8d240942ac0",
        "order": 5,
        "width": "2",
        "height": "1",
        "name": "",
        "label": "Energy Today:  ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": true,
        "font": "",
        "fontSize": "22",
        "color": "#068104",
        "wrapText": false,
        "className": "",
        "x": 600,
        "y": 620,
        "wires": []
    },
    {
        "id": "5b67ef06c0cafdd5",
        "type": "ui-text",
        "z": "92d055a5ecbac90c",
        "group": "530fe8d240942ac0",
        "order": 6,
        "width": "2",
        "height": "1",
        "name": "",
        "label": "Energy (7 Days):  ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": true,
        "font": "",
        "fontSize": "22",
        "color": "#068104",
        "wrapText": false,
        "className": "",
        "x": 830,
        "y": 620,
        "wires": []
    },
    {
        "id": "3c5eb5272e0500f6",
        "type": "ui-text",
        "z": "92d055a5ecbac90c",
        "group": "530fe8d240942ac0",
        "order": 7,
        "width": "2",
        "height": "1",
        "name": "",
        "label": "Limit:  ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": true,
        "font": "",
        "fontSize": "22",
        "color": "#068104",
        "wrapText": false,
        "className": "",
        "x": 570,
        "y": 660,
        "wires": []
    },
    {
        "id": "82f2206a8bad6087",
        "type": "ui-text",
        "z": "92d055a5ecbac90c",
        "group": "530fe8d240942ac0",
        "order": 4,
        "width": "2",
        "height": "1",
        "name": "",
        "label": "Tx (7 Days):  ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": true,
        "font": "",
        "fontSize": "22",
        "color": "#490481",
        "wrapText": false,
        "className": "",
        "x": 1030,
        "y": 580,
        "wires": []
    },
    {
        "id": "67c26650958b4c02",
        "type": "ui-text",
        "z": "92d055a5ecbac90c",
        "group": "530fe8d240942ac0",
        "order": 8,
        "width": "2",
        "height": "1",
        "name": "",
        "label": "Current Load:  ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": true,
        "font": "",
        "fontSize": "22",
        "color": "#068104",
        "wrapText": false,
        "className": "",
        "x": 760,
        "y": 660,
        "wires": []
    },
    {
        "id": "0256c52788664639",
        "type": "ui-notification",
        "z": "92d055a5ecbac90c",
        "ui": "8cdc313c9611f13f",
        "position": "top right",
        "colorDefault": false,
        "color": "#4b24d6",
        "displayTime": "5",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": true,
        "className": "",
        "name": "",
        "x": 650,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "05b1553fcabcbc8b",
        "type": "link in",
        "z": "92d055a5ecbac90c",
        "name": "Tx Notification",
        "links": [
            "dd9016feeab69f8a"
        ],
        "x": 505,
        "y": 780,
        "wires": [
            [
                "0256c52788664639"
            ]
        ]
    },
    {
        "id": "a81b9fb52754cfc9",
        "type": "inject",
        "z": "92d055a5ecbac90c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "8",
        "payloadType": "str",
        "x": 370,
        "y": 580,
        "wires": [
            [
                "fc4d9666fe59b41b"
            ]
        ]
    },
    {
        "id": "a6da137cccf7aed8",
        "type": "inject",
        "z": "92d055a5ecbac90c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "str",
        "x": 630,
        "y": 520,
        "wires": [
            [
                "86c44caadc208afb"
            ]
        ]
    },
    {
        "id": "1c4b8bce4fee770a",
        "type": "inject",
        "z": "92d055a5ecbac90c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "57",
        "payloadType": "str",
        "x": 810,
        "y": 520,
        "wires": [
            [
                "82f2206a8bad6087"
            ]
        ]
    },
    {
        "id": "8dfd14d0c2d79980",
        "type": "inject",
        "z": "92d055a5ecbac90c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "400 kWh",
        "payloadType": "str",
        "x": 380,
        "y": 620,
        "wires": [
            [
                "dc8ebffcfc3e5ce0"
            ]
        ]
    },
    {
        "id": "f803a977c0eea8b2",
        "type": "inject",
        "z": "92d055a5ecbac90c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3200 kWh",
        "payloadType": "str",
        "x": 1150,
        "y": 680,
        "wires": [
            [
                "5b67ef06c0cafdd5"
            ]
        ]
    },
    {
        "id": "10cd57b6e514e458",
        "type": "inject",
        "z": "92d055a5ecbac90c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "200 Amps",
        "payloadType": "str",
        "x": 390,
        "y": 660,
        "wires": [
            [
                "3c5eb5272e0500f6"
            ]
        ]
    },
    {
        "id": "4d2028a35bb0c9a4",
        "type": "inject",
        "z": "92d055a5ecbac90c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "40 Amps",
        "payloadType": "str",
        "x": 540,
        "y": 720,
        "wires": [
            [
                "67c26650958b4c02"
            ]
        ]
    },
    {
        "id": "366db60c10403558",
        "type": "redis-command",
        "z": "217382551c48905d",
        "server": "0430675ed6c7cd83",
        "command": "SET",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 540,
        "y": 560,
        "wires": [
            [
                "1365105ad88ede6c",
                "b04ff9b4a10e46b3"
            ]
        ]
    },
    {
        "id": "1365105ad88ede6c",
        "type": "debug",
        "z": "217382551c48905d",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 600,
        "wires": []
    },
    {
        "id": "6c962dc6f4338719",
        "type": "inject",
        "z": "217382551c48905d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "evse:1",
        "payload": "{\"cbId\":\"ChargionONE\",\"ports\":1,\"type\":\"DCFC\",\"amps\":40}",
        "payloadType": "json",
        "x": 190,
        "y": 520,
        "wires": [
            [
                "a22435a838a7042d"
            ]
        ]
    },
    {
        "id": "a22435a838a7042d",
        "type": "json",
        "z": "217382551c48905d",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 370,
        "y": 560,
        "wires": [
            [
                "366db60c10403558"
            ]
        ]
    },
    {
        "id": "cc105e30cbf544b1",
        "type": "redis-command",
        "z": "217382551c48905d",
        "server": "0430675ed6c7cd83",
        "command": "KEYS",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 360,
        "y": 420,
        "wires": [
            [
                "3381d09488bdd1f6",
                "a25df1a5696fa43b"
            ]
        ]
    },
    {
        "id": "3381d09488bdd1f6",
        "type": "json",
        "z": "217382551c48905d",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 500,
        "y": 420,
        "wires": [
            [
                "0d19c3c9e4f2be19"
            ]
        ]
    },
    {
        "id": "75bf5024ec62eb25",
        "type": "inject",
        "z": "217382551c48905d",
        "name": "Inject List at Startup",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "0",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "2f70c5015a5d4885"
            ]
        ]
    },
    {
        "id": "0d19c3c9e4f2be19",
        "type": "json",
        "z": "217382551c48905d",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 620,
        "y": 420,
        "wires": [
            [
                "f25b98ea7ace00e0"
            ]
        ]
    },
    {
        "id": "7d7b852ff14ab0d0",
        "type": "redis-command",
        "z": "217382551c48905d",
        "server": "0430675ed6c7cd83",
        "command": "MGET",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 930,
        "y": 420,
        "wires": [
            [
                "928aa3eab1d807cf"
            ]
        ]
    },
    {
        "id": "426241cfa981a02b",
        "type": "redis-command",
        "z": "217382551c48905d",
        "server": "0430675ed6c7cd83",
        "command": "DEL",
        "name": "",
        "topic": "",
        "params": "",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1880,
        "y": 460,
        "wires": [
            [
                "d67d4f13803bc38a"
            ]
        ]
    },
    {
        "id": "928aa3eab1d807cf",
        "type": "function",
        "z": "217382551c48905d",
        "name": "function 1",
        "func": "let evse\nlet evse_str\nlet evses = []\n\nmsg.payload.splice(0,1)\n\nmsg.payload.forEach(function(evse_str) {\n    evse = JSON.parse(evse_str)\n    evses.push(evse)\n})\nmsg.headers = [\n    { key: 'cbId', title: 'ChargeBox ID', align: 'start'},\n    { key: 'type', title: 'Type'},\n    { key: 'amps', title: 'Amps'},\n    { key: 'ports', title: 'Ports'},\n    { key: 'password', title: 'P/W'},\n    { key: 'lat', title: 'lat'},\n    { key: 'lon', title: 'lon'},\n    { key: 'group', title: 'Group'},\n    { key: 'lastcommtime'},\n    { key: 'actions', title: 'Action',align: 'end', sortable: false} \n]\nmsg.payload = evses\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 420,
        "wires": [
            [
                "ee41c358ac7c402f",
                "40fe4278635a683c",
                "a361a3233397f32f",
                "3cf0aaa06cd6633b"
            ]
        ]
    },
    {
        "id": "c5027bda20e0bca6",
        "type": "function",
        "z": "217382551c48905d",
        "name": "Create Key",
        "func": "let key = `evse:${msg.payload.cbId}`\nmsg.topic = key.toLowerCase()\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 560,
        "wires": [
            [
                "a22435a838a7042d"
            ]
        ]
    },
    {
        "id": "ee41c358ac7c402f",
        "type": "ui-template",
        "z": "217382551c48905d",
        "group": "1723c74d3f81385c",
        "page": "",
        "ui": "",
        "name": "EVSE List",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <v-toolbar flat>\n      <v-toolbar-title class=\"text-grey\">\n        Actions\n      </v-toolbar-title>\n\n      <v-spacer></v-spacer>\n\n      <v-tooltip text=\"Refresh\" location=\"bottom\">\n        <template v-slot:activator=\"{ props }\">\n          <v-btn icon v-bind=\"props\" @click=\"refresh\">\n            <v-icon>mdi-refresh</v-icon>\n          </v-btn>\n        </template>\n      </v-tooltip>\n\n      <v-tooltip text=\"New\" location=\"bottom\">\n        <template v-slot:activator=\"{ props }\">\n          <v-btn icon v-bind=\"props\" @click=\"addNew\">\n            <v-icon>mdi-ev-station</v-icon>\n          </v-btn>\n        </template>\n      </v-tooltip>\n\n      <!-- v-tooltip text=\"Edit\" location=\"bottom\">\n        <template v-slot:activator=\"{ props }\">\n            <v-btn v-if=\"multiSelected == 1\" icon v-bind=\"props\" @click=\"send({action: 'edit', payload: selected}); this.selected = []; this.multiSelected = 0\">\n              <v-icon>mdi-square-edit-outline</v-icon>\n          </v-btn>\n        </template>\n      </v-tooltip>\n\n      <v-tooltip text=\"Command\" location=\"bottom\">\n        <template v-slot:activator=\"{ props }\">      \n          <v-btn v-if=\"multiSelected == 1\" icon v-bind=\"props\" @click=\"send({action: 'command', payload: selected}); this.selected = []; this.multiSelected = 0\" >\n            <v-icon>mdi-apps</v-icon>\n          </v-btn>\n        </template>\n      </v-tooltip>\n\n      <v-tooltip text=\"Delete\" location=\"bottom\">\n        <template v-slot:activator=\"{ props }\">\n          <v-btn icon v-if=\"multiSelected > 0\" v-bind=\"props\" @click=\"send({action: 'delete', payload: selected}); this.seleced = []; this.multiSelected = 0\">\n            <v-icon>mdi-delete</v-icon>\n          </v-btn>\n        </template>\n      </v-tooltip -->\n\n    </v-toolbar>\n\n\n      <v-text-field\n        v-model=\"search\"\n        label=\"Search\"\n        prepend-inner-icon=\"mdi-magnify\"\n        variant=\"outlined\"\n        hide-details\n        single-line\n      ></v-text-field>\n\n    \n    <v-data-table  \n        :search=\"search\" \n        :items=\"msg?.payload\"\n        :headers=\"msg?.headers\"\n        v-model=\"selected\"\n        item-selectable=\"selectable\"\n        select-strategy=\"all\"\n        hide-select    \n        return-object>\n      <template v-slot:loading>\n        <v-skeleton-loader type=\"table-row@10\"></v-skeleton-loader>\n      </template>\n      <!--template v-slot:header.ports>\n        <div >Ports</div>\n      </template>\n      <template v-slot:header.amps>\n        <div >Amps</div>\n      </template>\n      <template v-slot:header.password>\n        <div class=\"text-center\">p/w</div>\n      </template>\n      <template v-slot:header.lastcommtime>\n        <div><v-icon icon=\"mdi-heart\" class=\"text-center\"></div>\n      </template>\n      <template v-slot:header.cbId>\n        <div >Chargebox ID</div>\n      </template -->\n\n      <template v-slot:header.lastcommtime>\n        <div><v-icon icon=\"mdi-heart\" class=\"text-center\"></div>\n      </template>\n\n      <template v-slot:header.password>\n        <div class=\"text-center\">p/w</div>\n      </template>\n      <template v-slot:header.ports>\n        <div class=\"text-center\">Ports</div>\n      </template>\n      \n      <template v-slot:item.ports=\"{ item }\">\n        <div class=\"text-center header1\">\n          <v-text>{{ item.ports }}</v-text>\n        </div>\n      </template>\n      \n      <template v-slot:item.cbId=\"{ item }\">\n        <div>\n          <v-text>{{ item.cbId }} xyz</v-text>\n        </div>\n      </template>\n      <template v-slot:item.lat=\"{ item }\">\n        <div class=\"text-center\">\n          <v-text >{{ getShortLatLon(item.lat) }}</v-text>\n        </div>\n      </template>\n      <template v-slot:item.lon=\"{ item }\">\n        <div class=\"text-center\">\n          <v-text >{{ getShortLatLon(item.lon) }}</v-text>\n        </div>\n      </template>      \n\n      <template v-slot:item.password=\"{ item }\">\n        <div class=\"text-center\">\n          <v-icon v-if=\"item.password.length > 0\" color=\"green\" icon=\"mdi-checkbox-outline\"></v-icon>\n        </div>\n      </template>\n\n      <template v-slot:item.lastcommtime=\"{ item }\">\n        <div class=\"text-center\">\n          <v-icon :icon=\"getLastCommIcon(item)\" :color=\"getLastCommColor(item)\"></v-icon>\n        </div>\n      </template>\n      <template v-slot:item.amps=\"{ item }\">\n        <v-text>{{ item.amps }}A</v-chip>\n      </template>\n\n      <template v-slot:item.type=\"{ item }\">\n        <v-chip :color=\"getTypeColor(item)\">{{ item.type }}</v-chip>\n      </template>\n\n      <template v-slot:item.actions=\"{ item }\">\n        <v-icon v-if=\"getIsOnline(item)\"\n          class=\"me-2\"\n          size=\"small\"\n          @click=\"send({action: 'command', payload: [item]})\"\n        >\n          mdi-apps\n        </v-icon>\n        <v-icon\n          class=\"me-2\"\n          size=\"small\"\n          @click=\"send({action: 'edit', payload: [item]})\"\n        >\n          mdi-pencil\n        </v-icon>\n        <v-icon\n          size=\"small\"\n          @click=\"send({action: 'delete', payload: [item]})\"\n        >\n          mdi-delete\n        </v-icon>\n      </template>\n\n    </v-data-table>\n</template>\n\n<script>\n    export default {\n    data () {\n      return {\n        selected: [],\n        search: '',\n        multiSelected: 0,\n        heartbeat: 120,\n      }\n    },\n    watch: {\n        selected: function() {\n          this.multiSelected = this.selected.length\n        }\n    },\n    mounted() {\n      this.refresh()\n    },\n    methods: {\n      addNew() {\n        this.send({action: 'add', payload: [{ cbId: ''}]});\n        this.selected = [];\n        this.multiSelected = 0;\n      },\n      refresh() {\n        this.send({action: 'refresh', payload: [{}]});\n        this.selected = []\n        this.multiSelected = 0;\n      },\n      // expose a method to our <template> and Vue Application\n      getTypeColor: function(item) {\n        switch(item.type.toLowerCase()) {\n          case 'l1':\n          case 'level1':\n          case 'level 1':\n            return 'gray';\n            break;\n          case 'l2':\n          case 'level2':\n          case 'level 2':\n            return 'purple';\n            break;\n          case 'dcfc':\n          case 'dc':\n            return 'green';\n            break;\n          case 'xfc':\n          case 'hpc':\n            return 'blue';\n            break;\n          default:\n            return 'cyan';\n            break;\n        }\n      },\n\n      getLastCommIcon: function(item) {\n        if (Math.floor((Date.now() - item.lastcommtime) / 1000) > this.heartbeat ){\n          return \"mdi-heart-broken\"\n        }\n        else return \"mdi-heart-flash\"\n      },\n      getLastCommColor: function(item) {\n        if (Math.floor((Date.now() - item.lastcommtime) / 1000) > this.heartbeat ){\n          return \"grey\"\n        }\n        else return \"green\"\n      },\n      getLastCommClass: function(item) {\n        if (Math.floor((Date.now() - item.lastcommtime) / 1000) > this.heartbeat ){\n          return \"offline\"\n        }\n        else return \"online\"\n      },\n      getIsOnline: function(item) {\n        return (Math.floor((Date.now() - item.lastcommtime) / 1000) <= this.heartbeat)\n      },\n      getShortLatLon: function(latlon){\n        if (latlon){\n          return (Math.floor(Number(latlon) * 100)/ 100)\n        }\n      }\n    }  \n  }\n</script>\n\n<style>\n\n  .online {\n    font-weight: bold;\n    color: green;\n  }\n  .offline {\n    color: grey;\n  }\n  .header1 {\n    font-weight: bolder;\n  }\n</style>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1230,
        "y": 380,
        "wires": [
            [
                "cdfaf0ad88e1c53d"
            ]
        ]
    },
    {
        "id": "cb4389b379c7a461",
        "type": "ui-template",
        "z": "217382551c48905d",
        "group": "276c45fccf8e6765",
        "page": "",
        "ui": "",
        "name": "Edit Dialog",
        "order": 4,
        "width": "0",
        "height": "0",
        "head": "",
        "format": "<template>\n    <v-dialog width=\"50%\" v-model=\"showDialog\">\n        <v-card color=\"white\" v-click-outside=\"{handler: onClickOutside}\">\n            <v-toolbar color=\"primary\">\n                <v-card-title>\n                    <span>{{ title }}</span>\n                </v-card-title>\n            </v-toolbar>\n            <v-container>\n                <v-text-field\n                    v-model=\"cbid\"\n                    label=\"Chargebox ID\"\n                    type=\"text\"\n                    :readonly=\"getReadOnly()\"\n                    hint=\"Provide a unique chargebox name\"\n                ></v-text-field>\n                <v-text-field\n                    v-model=\"evseType\"\n                    label=\"Type\"\n                    type=\"text\"\n                    hint=\"example: L2 or DCFC\"\n                ></v-text-field>\n                <v-text-field\n                    v-model=\"ports\"\n                    label=\"Connectors\"\n                    type=\"number\"\n                    hint=\"Number of connectors/ports\"\n                ></v-text-field>\n                <v-text-field\n                    v-model=\"amps\"\n                    label=\"Amperage\"\n                    type=\"number\"\n                    suffix=\"Amps\"\n                    hint=\"Example: 40\"\n                ></v-text-field>\n                <v-text-field\n                    v-model=\"password\"\n                    label=\"Password\"\n                    type=\"password\"\n                    placeholder=\"<optional>\"\n                    hint=\"Enter a password if using basic auth\"\n                ></v-text-field>\n                <v-text-field\n                    v-model=\"lat\"\n                    label=\"latitude\"\n                    type=\"number\"\n                    placeholder=\"<optional>\"\n                    hint=\"Enter location latiitude\"\n                ></v-text-field>\n               <v-text-field\n                    v-model=\"lon\"\n                    label=\"longitude\"\n                    type=\"number\"\n                    placeholder=\"<optional>\"\n                    hint=\"Enter location longitude\"\n                ></v-text-field>               <v-text-field\n                    v-model=\"group\"\n                    label=\"Group\"\n                    type=\"number\"\n                    placeholder=\"<optional>\"\n                    hint=\"Enter EVSE group\"\n                ></v-text-field>\n                <v-card-actions class=\"justify-end\">\n                    <v-btn variant=\"elevated\" @click=\"okDialog\">{{ okText }}</v-btn>\n                    <v-btn variant=\"elevated\" @click=\"cancelDialog\">{{ cancelText }}</v-btn>\n                </v-card-actions>\n            </v-container>\n        </v-card>\n    </v-dialog>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                cbid: '',\n                ports: 1,\n                amps: 30,\n                evseType: 'L2',\n                password: '',\n                lat: '',\n                lon: '',\n                group: '',\n                lastcommtime: '',\n                newEdit: \"New\",\n                title: \"\",\n                showDialog: false,\n                okText: \"OK\",\n                cancelText: \"Cancel\"\n            }\n        },\n        watch: {\n            \n\n        },\n\n        computed: {\n            // automatically compute this variable\n            // whenever VueJS deems appropriate\n            \n        },\n        mounted: {\n            //this.showDialog = false\n        },\n        unmounted: {\n            //this.showDialog = false\n        },\n        methods: {\n            // expose a method to our <template> and Vue Application\n            sendevsedata: function() {\n                this.send({\n                    payload: {\n                        cbId: this.cbid,\n                        type: this.evseType,\n                        amps: this.amps,\n                        ports: this.ports,\n                        password: this.password,\n                        lat: this.lat,\n                        lon: this.lon,\n                        group: this.group,\n                        lastcommtime: this.lastcommtime || Math.floor(Date.now() / 1000)\n                    }\n                })\n            },\n            okDialog: function() {\n                this.sendevsedata()\n                this.showDialog = false\n            },\n            cancelDialog: function() {\n                this.msg.payload = {}\n                this.showDialog = false\n            },\n            onClickOutside: function() {\n                this.msg.payload = {}\n                this.showDialog = false\n            },\n            getReadOnly: function() {\n                return (this.newEdit == \"New\") ? false : true\n            }\n\n        },\n        mounted() {\n            this.$socket.on('msg-input:' + this.id, (msg) => {\n            // do stuff with msg\n            // runs only when messages are received\n                if (this.msg.payload){\n                    let payload = this.msg.payload\n                    this.ports = payload.ports\n                    this.cbid = payload.cbId\n                    this.amps = payload.amps\n                    this.evseType = payload.type\n                    this.password = payload.password\n                    this.lat = payload.lat\n                    this.lon = payload.lon\n                    this.group = payload.group\n                    this.lastcommtime = payload.lastcommtime ?? Math.floor(Date.now() / 1000);\n                }\n                if (this.msg.dialog){\n                    let dialog = this.msg.dialog\n                    this.showDialog = dialog.showDialog\n                    this.okText = dialog.okText ?? \"OK\"\n                    this.cancelText = dialog.cancelText ?? \"Cancel\"\n                    this.showDialog = dialog.showDialog ?? false\n                    this.title = dialog.title ?? \"EVSE\"\n                    this.newEdit = dialog.newEdit ?? \"New\"\n                }\n            })\n        },\n   }\n</script>\n",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 310,
        "y": 140,
        "wires": [
            [
                "f02867b7f09b0ad1",
                "c1ed374a1bace4de"
            ]
        ]
    },
    {
        "id": "c1ed374a1bace4de",
        "type": "link out",
        "z": "217382551c48905d",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "9309e7f51ccc6c6c",
            "9405f117efca5faf",
            "19a1d55d0ad937f5"
        ],
        "x": 455,
        "y": 140,
        "wires": []
    },
    {
        "id": "9309e7f51ccc6c6c",
        "type": "link in",
        "z": "217382551c48905d",
        "name": "Edit EVSE",
        "links": [
            "c1ed374a1bace4de"
        ],
        "x": 65,
        "y": 560,
        "wires": [
            [
                "c5027bda20e0bca6"
            ]
        ]
    },
    {
        "id": "19a1d55d0ad937f5",
        "type": "link in",
        "z": "217382551c48905d",
        "name": "Refresh EVSE List",
        "links": [
            "b04ff9b4a10e46b3",
            "d67d4f13803bc38a",
            "2f70c5015a5d4885",
            "a20667f00c1262ba",
            "a1f721f1a03c965a",
            "c1ed374a1bace4de"
        ],
        "x": 65,
        "y": 420,
        "wires": [
            [
                "bd34c2295601f999"
            ]
        ]
    },
    {
        "id": "b04ff9b4a10e46b3",
        "type": "link out",
        "z": "217382551c48905d",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "19a1d55d0ad937f5"
        ],
        "x": 685,
        "y": 540,
        "wires": []
    },
    {
        "id": "cdfaf0ad88e1c53d",
        "type": "switch",
        "z": "217382551c48905d",
        "name": "",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "add",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "edit",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "command",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "refresh",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 1360,
        "y": 380,
        "wires": [
            [
                "153896150836a241"
            ],
            [
                "2df63633a3901591"
            ],
            [
                "d9db7aa7fbab290f"
            ],
            [
                "7bc827572072b785"
            ],
            [
                "a20667f00c1262ba"
            ]
        ]
    },
    {
        "id": "639178f5d96d873a",
        "type": "debug",
        "z": "217382551c48905d",
        "name": "debug 10",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1700,
        "y": 440,
        "wires": []
    },
    {
        "id": "d67d4f13803bc38a",
        "type": "link out",
        "z": "217382551c48905d",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "19a1d55d0ad937f5"
        ],
        "x": 1975,
        "y": 460,
        "wires": []
    },
    {
        "id": "96ac685aafead6da",
        "type": "change",
        "z": "217382551c48905d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0]",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "dialog.showDialog",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "dialog.cancelText",
                "pt": "msg",
                "to": "Cancel",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1740,
        "y": 340,
        "wires": [
            [
                "8c62605df95e3ac2",
                "f305a66a592946cc"
            ]
        ]
    },
    {
        "id": "6563370d3a461ac1",
        "type": "ui-template",
        "z": "217382551c48905d",
        "group": "276c45fccf8e6765",
        "page": "",
        "ui": "",
        "name": "EVSE Commands Dialog",
        "order": 5,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <v-dialog width=\"auto\" v-model=\"showDialog\">\n        <v-card color=\"white\" v-click-outside=\"{handler: onClickOutside}\" >\n            <v-toolbar color=\"primary\">\n                <v-card-title>\n                    <span>{{ title }}</span>\n                </v-card-title>\n            </v-toolbar>\n            <v-container>\n                                <v-row>\n                <v-col cols=\"12\">\n                    <v-card \n                        :title=\"this.cbId\"\n                        prepend-icon=\"mdi-ev-station\"\n                        subtitle=\"Commands will be sent to this EVSE\">\n                    </v-card>\n                </v-col>\n                </v-row>\n                                <v-row>\n                <v-col cols=\"6\">\n                    <v-btn block \n                        prepend-icon=\"mdi-lock-open\" \n                        color=\"primary\" \n                        @click=\"sendCmd('UnlockConnector')\"\n                        >\n                        Unlock Connector\n                    </v-btn>\n                </v-col>\n                <v-col cols=\"6\">\n                    <v-btn block \n                        prepend-icon=\"mdi-pause-octagon-outline\" \n                        color=\"primary\" \n                        @click=\"sendCmd('ChangeAvailability')\"\n                        >\n                        Change Availability\n                    </v-btn>\n                </v-col>\n                </v-row>\n                <v-row>\n                <v-col cols=\"6\">\n                    <v-btn block prepend-icon=\"mdi-play-circle-outline\" color=\"primary\" @click=\"sendCmd('RemoteStartTransaction')\">Remote Start Transaction</v-btn>\n                </v-col>\n                <v-col cols=\"6\">\n                    <v-btn block prepend-icon=\"mdi-stop-circle-outline\" color=\"primary\" @click=\"sendCmd('RemoteStopTransaction')\">Remote Stop Transaction</v-btn>\n                </v-col>\n                </v-row>\n                <v-row>\n                <v-col cols=\"6\">\n                    <v-btn block prepend-icon=\"mdi-hammer-screwdriver\" color=\"primary\" @click=\"sendCmd('TriggerMessage')\">Trigger Message</v-btn>\n                </v-col>\n                <v-col cols=\"6\">\n                    <v-btn block prepend-icon=\"mdi-cog-counterclockwise\" color=\"primary\" @click=\"sendCmd('ClearCache',{})\">Clear Cache</v-btn>\n                </v-col>\n                </v-row>                                        \n                <v-row>\n                <v-col cols=\"6\">\n                    <v-btn block prepend-icon=\"mdi-power-plug-outline\" color=\"primary\" @click=\"sendCmd('Reset',{ type: 'Soft'})\">Soft Reset</v-btn>\n                </v-col>\n                <v-col cols=\"6\">\n                    <v-btn block prepend-icon=\"mdi-power-plug\" color=\"primary\" @click=\"sendCmd('Reset',{ type: 'Hard'} )\">Hard Reset</v-btn>\n                </v-col>\n                </v-row>\n                <v-row>\n                    <v-col cols=\"12\">\n                    <v-btn block variant=\"elevated\" color=\"secondary\" @click=\"closeDialog()\">Close</v-btn>\n                </v-col>                                        \n\n            </v-container>\n        </v-card>\n    </v-dialog>                \n</template>\n\n<script>\n    export default {\n        data() {\n            // define variables available component-wide\n            // (in <template> and component functions)\n            return {\n                cbId: '',\n                ports: 1,\n                showDialog: false,\n                title: 'Send OCPP Commands'\n            }\n        },\n        watch: {  \n        },\n\n        computed: {\n            // automatically compute this variable\n            // whenever VueJS deems appropriate\n\n        },\n        methods: {\n            // expose a method to our <template> and Vue Application\n\n            sendCmd: function(command, data=0){\n                let payload = {\n                    cbId: this.cbId,\n                    command: command\n                }\n\n                if (data != 0) {\n                    payload.data = data\n                }\n\n                this.send({\n                    payload\n                })\n            },\n            closeDialog: function() {\n                let payload = {\n                    command: \"closeDialog\"\n                }\n                this.send({payload})\n                this.showDialog = false\n            }\n\n        },\n        mounted() {\n            this.$socket.on('msg-input:' + this.id, (msg) => {\n                if (this.msg.payload){\n                let payload = this.msg.payload\n                this.cbId = payload.cbId\n                this.ports = payload.ports\n                }\n                \n                if (this.msg.dialog) {\n                let dialog = this.msg.dialog\n                this.showDialog = dialog.showDialog\n                this.closeText = dialog.closeText\n                this.title = dialog.title ?? 'Send OCPP Commands'\n                }\n            })\n        },\n   }\n</script>\n",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 410,
        "y": 220,
        "wires": [
            [
                "abdf3b3fe821405d",
                "b89d3bee61c371a8"
            ]
        ]
    },
    {
        "id": "67831ed4d8bdfde1",
        "type": "change",
        "z": "217382551c48905d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0]",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "dialog.showDialog",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "dialog.title",
                "pt": "msg",
                "to": "EVSE Commands",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 220,
        "wires": [
            [
                "6563370d3a461ac1"
            ]
        ]
    },
    {
        "id": "bd34c2295601f999",
        "type": "function",
        "z": "217382551c48905d",
        "name": "Scan evse tags",
        "func": "msg = {}\nmsg.payload = \"evse:*\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 420,
        "wires": [
            [
                "cc105e30cbf544b1"
            ]
        ]
    },
    {
        "id": "f25b98ea7ace00e0",
        "type": "change",
        "z": "217382551c48905d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "getevses",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 420,
        "wires": [
            [
                "7d7b852ff14ab0d0"
            ]
        ]
    },
    {
        "id": "40fe4278635a683c",
        "type": "link out",
        "z": "217382551c48905d",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "801901d267859d27"
        ],
        "x": 1245,
        "y": 440,
        "wires": []
    },
    {
        "id": "abdf3b3fe821405d",
        "type": "debug",
        "z": "217382551c48905d",
        "name": "debug 29",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 260,
        "wires": []
    },
    {
        "id": "82c7dc438bcf613e",
        "type": "link out",
        "z": "217382551c48905d",
        "name": "OCPP Cmd Out",
        "mode": "link",
        "links": [
            "14970b0433fc1816",
            "9405f117efca5faf"
        ],
        "x": 1425,
        "y": 80,
        "wires": []
    },
    {
        "id": "2f70c5015a5d4885",
        "type": "link out",
        "z": "217382551c48905d",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "19a1d55d0ad937f5"
        ],
        "x": 285,
        "y": 80,
        "wires": []
    },
    {
        "id": "56ecdf3e1e7ccd5a",
        "type": "link in",
        "z": "217382551c48905d",
        "name": "Edit TagInfo",
        "links": [
            "8c62605df95e3ac2"
        ],
        "x": 45,
        "y": 140,
        "wires": [
            [
                "a15783afb2f690dc"
            ]
        ]
    },
    {
        "id": "8c62605df95e3ac2",
        "type": "link out",
        "z": "217382551c48905d",
        "name": "link out 12",
        "mode": "link",
        "links": [
            "56ecdf3e1e7ccd5a",
            "abd4fc7cece76024"
        ],
        "x": 1855,
        "y": 340,
        "wires": []
    },
    {
        "id": "bc68a668b062814c",
        "type": "link in",
        "z": "217382551c48905d",
        "name": "Open EVSE Commands",
        "links": [
            "7bc827572072b785"
        ],
        "x": 45,
        "y": 220,
        "wires": [
            [
                "f813f3d81530033f"
            ]
        ]
    },
    {
        "id": "7bc827572072b785",
        "type": "link out",
        "z": "217382551c48905d",
        "name": "link out 13",
        "mode": "link",
        "links": [
            "abd4fc7cece76024",
            "bc68a668b062814c"
        ],
        "x": 1505,
        "y": 440,
        "wires": []
    },
    {
        "id": "f02867b7f09b0ad1",
        "type": "debug",
        "z": "217382551c48905d",
        "name": "debug 32",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 60,
        "wires": []
    },
    {
        "id": "153896150836a241",
        "type": "change",
        "z": "217382551c48905d",
        "name": "Add",
        "rules": [
            {
                "t": "set",
                "p": "dialog",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "dialog.title",
                "pt": "msg",
                "to": "Add New EVSE",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "dialog.newEdit",
                "pt": "msg",
                "to": "New",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "dialog.okText",
                "pt": "msg",
                "to": "Add",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1510,
        "y": 320,
        "wires": [
            [
                "96ac685aafead6da"
            ]
        ]
    },
    {
        "id": "2df63633a3901591",
        "type": "change",
        "z": "217382551c48905d",
        "name": "Edit",
        "rules": [
            {
                "t": "set",
                "p": "dialog.title",
                "pt": "msg",
                "to": "Edit EVSE",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "dialog.newEdit",
                "pt": "msg",
                "to": "Edit",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "dialog.okText",
                "pt": "msg",
                "to": "Update",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1510,
        "y": 360,
        "wires": [
            [
                "96ac685aafead6da"
            ]
        ]
    },
    {
        "id": "f305a66a592946cc",
        "type": "debug",
        "z": "217382551c48905d",
        "name": "debug 33",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1900,
        "y": 280,
        "wires": []
    },
    {
        "id": "4ff6ccb2ddf56bba",
        "type": "ui-template",
        "z": "217382551c48905d",
        "group": "276c45fccf8e6765",
        "page": "",
        "ui": "",
        "name": "Unlock Connector",
        "order": 6,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <v-dialog width=\"auto\" v-model=\"showDialog\">\n        <v-card color=\"white\" v-click-outside=\"{handler: onClickOutside}\">\n            <v-toolbar color=\"primary\">\n                <v-card-title>\n                    <span>{{ cbId }}: Unlock Connector</span>\n                </v-card-title>\n            </v-toolbar>\n            <v-container>\n                <v-text-field\n                    v-model=\"connector\"\n                    label=\"Connector ID\"\n                    type=\"number\"\n                    hint=\"Connector ID to unlock\"\n                ></v-text-field>\n            </v-container>\n            <v-card-actions class=\"justify-end\">\n                <v-btn variant=\"elevated\" @click=\"okDialog\">{{ okText }}</v-btn>\n                <v-btn variant=\"elevated\" @click=\"cancelDialog\">{{ cancelText }}</v-btn>\n            </v-card-actions>\n        </v-card>\n    </v-dialog>\n</template>\n\n<script>\n    export default {\n        data() {\n            // define variables available component-wide\n            // (in <template> and component functions)\n            return {\n                connector: 1,\n                showDialog: false,\n                cbId: 'xyzzz',\n                okText: 'OK',\n                cancelText: 'Cancel',\n                command: 'unlockConnecotor'\n            }\n        },\n\n        watch: {},\n        mounted() {\n            this.$socket.on('msg-input:' + this.id, (msg) => {\n                if (this.msg.dialog){\n                    let dialog = this.msg.dialog\n                    this.showDialog = dialog.showDialog ?? false\n                    this.okText = dialog.okText ?? \"OK\"\n                    this.cancelText = dialog.cancelText ?? \"Cancel\"\n                }\n                if (this.msg.payload){\n                    this.cbId = this.msg.payload.cbId\n                    this.command = this.msg.payload.command\n\n                }\n            })\n        },\n        methods: {\n            okDialog: function() {\n                this.showDialog = false\n                this.send({\n                    payload: {\n                        cbId: this.cbId,\n                        data: {\n                            connector: this.connector\n                        },\n                        command: this.command\n                    }\n                })\n\n            },\n            cancelDialog: function() {\n                this.msg.paylaod = {}\n                this.showDialog = false\n                \n            }\n\n        }\n    }\n</script>\n<style>\n    /* define any styles here - supports raw CSS */\n    .my-class {\n        color: red;\n    }\n</style>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1230,
        "y": 120,
        "wires": [
            [
                "f740792ad0c8f5fd"
            ]
        ]
    },
    {
        "id": "f024c7fc32d8d05e",
        "type": "switch",
        "z": "217382551c48905d",
        "name": "Switch Command",
        "property": "payload.command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "TriggerMessage",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "UnlockConnector",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ChangeAvailability",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "RemoteStartTransaction",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "RemoteStopTransaction",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 810,
        "y": 220,
        "wires": [
            [
                "297ebea211c663ac"
            ],
            [
                "4ff6ccb2ddf56bba"
            ],
            [
                "c84ee996687096fe"
            ],
            [
                "35448e49dfc5fde2"
            ],
            [
                "f5a99899b46e0e63"
            ],
            [
                "c36b63f7c3de6924",
                "f740792ad0c8f5fd",
                "5e3e9b161183e7fa"
            ]
        ]
    },
    {
        "id": "297ebea211c663ac",
        "type": "ui-template",
        "z": "217382551c48905d",
        "group": "276c45fccf8e6765",
        "page": "",
        "ui": "",
        "name": "Trigger Msg",
        "order": 3,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <v-dialog width=\"auto\" v-model=\"showDialog\">\n        <v-card color=\"white\" v-click-outside=\"{handler: onClickOutside}\">\n            <v-toolbar color=\"primary\">\n                <v-card-title>\n                    <span>{{ cbId }}: Trigger Msg</span>\n                </v-card-title>\n            </v-toolbar>\n            <v-container>\n                <v-text-field \n                    v-model=\"connectorId\" \n                    label=\"Connector ID\" \n                    type=\"number\" \n                    hint=\"Connector ID\"\n                >\n                </v-text-field>\n                <v-select \n                    v-model=\"requestedMessage\" \n                    label=\"Command\"\n                    :items='requestedMessages'\n                    hint=\"OCPP Trigger Message\">\n                </v-select>            \n            </v-container>\n            <v-card-actions class=\"justify-end\">\n                <v-btn variant=\"elevated\" @click=\"okDialog\">{{ okText }}</v-btn>\n                <v-btn variant=\"elevated\" @click=\"cancelDialog\">{{ cancelText }}</v-btn>\n            </v-card-actions>\n        </v-card>\n    </v-dialog>\n</template>\n\n<script>\n    export default {\n        data() {\n            // define variables available component-wide\n            // (in <template> and component functions)\n            return {\n                connectorId: 1,\n                showDialog: false,\n                cbId: 'xyzzz',\n                okText: 'OK',\n                cancelText: 'Cancel',\n                requestedMessages: ['BootNotification','DiagnosticStatusNotification','FirmwareStatusNotification','Heartbeat','MeterValues','StatusNotification'] ,\n                requestedMessage: 'StatusNotification',\n                command: 'TriggerMessage',\n                trigger: 'StatusNotification'\n            }\n        },\n\n        watch: {},\n        mounted() {\n            this.$socket.on('msg-input:' + this.id, (msg) => {\n            \n                if (this.msg.dialog){\n                    let dialog = this.msg.dialog\n                    this.showDialog = dialog.showDialog ?? false\n                    this.okText = dialog.okText ?? \"OK\"\n                    this.cancelText = dialog.cancelText ?? \"Cancel\"\n                }\n                if (this.msg.payload){\n                    this.cbId = this.msg.payload.cbId\n                    this.command = this.msg.payload.command\n\n                }\n            })\n        },\n        methods: {\n            okDialog: function() {\n                this.showDialog = false\n                this.send({\n                    payload: {\n                        cbId: this.cbId,\n                        connectorId: this.connectorId,\n                        command: this.command,\n                        requestedMessage: this.requestedMessage\n                    }\n                })\n\n            },\n            cancelDialog: function() {\n                this.msg.paylaod = {}\n                this.showDialog = false\n                \n            }\n\n        }\n    }\n</script>\n<style>\n    /* define any styles here - supports raw CSS */\n    .my-class {\n        color: red;\n    }\n</style>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1210,
        "y": 80,
        "wires": [
            [
                "82c7dc438bcf613e"
            ]
        ]
    },
    {
        "id": "f4550ea4a5f41146",
        "type": "ui-template",
        "z": "217382551c48905d",
        "group": "276c45fccf8e6765",
        "page": "",
        "ui": "",
        "name": "Remote Start Tx",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <v-dialog width=\"auto\" v-model=\"showDialog\">\n        <v-card color=\"white\" v-click-outside=\"{handler: onClickOutside}\">\n            <v-toolbar color=\"primary\">\n                <v-card-title>\n                    <span>{{ cbId }}: Remote Start Transaction</span>\n                </v-card-title>\n            </v-toolbar>\n            <v-container>\n                <v-text-field\n                    v-model=\"connector\"\n                    label=\"Connector ID\"\n                    type=\"number\"\n                    hint=\"Connector ID to start transaction on\"\n                ></v-text-field>\n                <v-select \n                    v-model=\"option\" \n                    label=\"tagId\"\n                    :items='options'\n                    hint=\"TokenID\">\n                </v-select>            \n            </v-container>\n            <v-card-actions class=\"justify-end\">\n                <v-btn variant=\"elevated\" @click=\"okDialog\">{{ okText }}</v-btn>\n                <v-btn variant=\"elevated\" @click=\"cancelDialog\">{{ cancelText }}</v-btn>\n            </v-card-actions>\n        </v-card>\n    </v-dialog>\n</template>\n\n<script>\n    export default {\n        data() {\n            // define variables available component-wide\n            // (in <template> and component functions)\n            return {\n                connector: 1,\n                cbId: 'xyzzz',\n                option: '',\n                options: [],\n                okText: 'OK',\n                showDialog: false,\n                cancelText: 'Cancel',\n                command: 'RemoteStartTransaction'                \n\n            }\n        },\n        mounted() {\n            this.$socket.on('msg-input:' + this.id, (msg) => {\n            \n                if (this.msg.dialog){\n                    let dialog = this.msg.dialog\n                    this.showDialog = dialog.showDialog ?? false\n                    this.okText = dialog.okText ?? \"OK\"\n                    this.cancelText = dialog.cancelText ?? \"Cancel\"\n                }\n                if (this.msg.payload){\n                    this.cbId = this.msg.payload.cbId\n                    this.command = this.msg.payload.command\n\n                }\n                if (this.msg.tags){\n                    this.options = this.msg.tags\n                }\n            })\n        },\n        methods: {\n            okDialog: function() {\n                this.showDialog = false\n                this.send({\n                    payload: {\n                        cbId: this.cbId,\n                        data: {\n                            connectorId: this.connector,\n                            tagId: this.option,\n                        },\n                        command: this.command\n                    }\n                })\n\n            },\n            cancelDialog: function() {\n                this.msg.paylaod = {}\n                this.showDialog = false\n                \n            }\n        }\n    }\n</script>\n<style>\n    /* define any styles here - supports raw CSS */\n    .my-class {\n        color: red;\n    }\n</style>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1500,
        "y": 220,
        "wires": [
            [
                "3303c9688b7cce62",
                "9061953296c99fc7"
            ]
        ]
    },
    {
        "id": "f5a99899b46e0e63",
        "type": "ui-template",
        "z": "217382551c48905d",
        "group": "276c45fccf8e6765",
        "page": "",
        "ui": "",
        "name": "Remote Stop Tx",
        "order": 2,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <v-dialog width=\"auto\" v-model=\"showDialog\">\n        <v-card color=\"white\" v-click-outside=\"{handler: onClickOutside}\">\n            <v-toolbar color=\"primary\">\n                <v-card-title>\n                    <span>{{ cbId }}: Remote Start Transaction</span>\n                </v-card-title>\n            </v-toolbar>\n            <v-container>\n                <v-text-field\n                    v-model=\"transactionId\"\n                    label=\"Transaction ID\"\n                    type=\"number\"\n                    hint=\"Transaction ID to session to stop\"\n                ></v-text-field>\n            </v-container>\n            <v-card-actions class=\"justify-end\">\n                <v-btn variant=\"elevated\" @click=\"okDialog\">{{ okText }}</v-btn>\n                <v-btn variant=\"elevated\" @click=\"cancelDialog\">{{ cancelText }}</v-btn>\n            </v-card-actions>\n        </v-card>\n    </v-dialog>\n</template>\n\n<script>\n    export default {\n        data() {\n            // define variables available component-wide\n            // (in <template> and component functions)\n            return {\n                transactionId: 0,\n                cbId: 'xyzzz',\n                option: '',\n                options: [],\n                okText: 'OK',\n                showDialog: false,\n                cancelText: 'Cancel',\n                command: 'RemoteStopTransaction'                \n\n            }\n        },\n        mounted() {\n            this.$socket.on('msg-input:' + this.id, (msg) => {\n            \n                if (this.msg.dialog){\n                    let dialog = this.msg.dialog\n                    this.showDialog = dialog.showDialog ?? false\n                    this.okText = dialog.okText ?? \"OK\"\n                    this.cancelText = dialog.cancelText ?? \"Cancel\"\n                }\n                if (this.msg.payload){\n                    this.cbId = this.msg.payload.cbId\n                    this.command = this.msg.payload.command\n\n                }\n             })\n        },\n        methods: {\n            okDialog: function() {\n                this.showDialog = false\n                this.send({\n                    payload: {\n                        cbId: this.cbId,\n                        data: {\n                            transactionId: this.transactionId\n                        },\n                        command: this.command\n                    }\n                })\n\n            },\n            cancelDialog: function() {\n                this.msg.paylaod = {}\n                this.showDialog = false\n                \n            }\n        }\n    }\n</script>\n<style>\n    /* define any styles here - supports raw CSS */\n    .my-class {\n        color: red;\n    }\n</style>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1220,
        "y": 260,
        "wires": [
            [
                "485897ecb288f5b2"
            ]
        ]
    },
    {
        "id": "b89d3bee61c371a8",
        "type": "change",
        "z": "217382551c48905d",
        "name": "showDialog",
        "rules": [
            {
                "t": "set",
                "p": "dialog.showDialog",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 220,
        "wires": [
            [
                "f024c7fc32d8d05e"
            ]
        ]
    },
    {
        "id": "a20667f00c1262ba",
        "type": "link out",
        "z": "217382551c48905d",
        "name": "link out 14",
        "mode": "link",
        "links": [
            "19a1d55d0ad937f5"
        ],
        "x": 1505,
        "y": 480,
        "wires": []
    },
    {
        "id": "c84ee996687096fe",
        "type": "ui-template",
        "z": "217382551c48905d",
        "group": "276c45fccf8e6765",
        "page": "",
        "ui": "",
        "name": "Change Avail",
        "order": 8,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <v-dialog width=\"auto\" v-model=\"showDialog\">\n        <v-card color=\"white\" v-click-outside=\"{handler: onClickOutside}\">\n            <v-toolbar color=\"primary\">\n                <v-card-title>\n                    <span>{{ cbId }}: Change Availability</span>\n                </v-card-title>\n            </v-toolbar>\n            <v-container>\n                <v-text-field\n                    v-model=\"connector\"\n                    label=\"Connector ID\"\n                    type=\"number\"\n                    hint=\"Connector ID to unlock\"\n                ></v-text-field>\n                <v-select \n                    v-model=\"option\" \n                    label=\"Availability\"\n                    :items='options'\n                    hint=\"OCPP Trigger Message\">\n                </v-select>            \n            </v-container>\n            <v-card-actions class=\"justify-end\">\n                <v-btn variant=\"elevated\" @click=\"okDialog\">{{ okText }}</v-btn>\n                <v-btn variant=\"elevated\" @click=\"cancelDialog\">{{ cancelText }}</v-btn>\n            </v-card-actions>\n        </v-card>\n    </v-dialog>\n</template>\n\n<script>\n    export default {\n        data() {\n            // define variables available component-wide\n            // (in <template> and component functions)\n            return {\n                connector: 1,\n                cbId: 'xyzzz',\n                option: 'Operative',\n                options: ['Operative','Inoperative'],\n                okText: 'OK',\n                showDialog: false,\n                cancelText: 'Cancel',\n                command: 'ChangeAvailability'\n            }\n        },\n\n        watch: {},\n        mounted() {\n            this.$socket.on('msg-input:' + this.id, (msg) => {\n                if (this.msg.dialog){\n                    let dialog = this.msg.dialog\n                    this.showDialog = dialog.showDialog ?? false\n                    this.okText = dialog.okText ?? \"OK\"\n                    this.cancelText = dialog.cancelText ?? \"Cancel\"\n                }\n                if (this.msg.payload){\n                    this.cbId = this.msg.payload.cbId\n                    this.command = this.msg.payload.command\n\n                }\n            })\n        },\n        methods: {\n            okDialog: function() {\n                this.showDialog = false\n                this.send({\n                    payload: {\n                        cbId: this.cbId,\n                        data: {\n                            connectorId: this.connector,\n                            type: this.option,\n                        },\n                        command: this.command\n                    }\n                })\n\n            },\n            cancelDialog: function() {\n                this.msg.paylaod = {}\n                this.showDialog = false\n                \n            }\n\n        }\n    }\n</script>\n<style>\n    /* define any styles here - supports raw CSS */\n    .my-class {\n        color: red;\n    }\n</style>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1210,
        "y": 160,
        "wires": [
            [
                "f740792ad0c8f5fd"
            ]
        ]
    },
    {
        "id": "c36b63f7c3de6924",
        "type": "ui-template",
        "z": "217382551c48905d",
        "group": "276c45fccf8e6765",
        "page": "",
        "ui": "",
        "name": "Ack Msg Sent",
        "order": 7,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <v-dialog width=\"auto\" v-model=\"showDialog\">\n        <v-card color=\"white\" v-click-outside=\"{handler: onClickOutside}\">\n            <v-toolbar color=\"primary\">\n                <v-card-title>\n                    <span>Message Sent: {{ cbId }}:{{command}}</span>\n                </v-card-title>\n            </v-toolbar>\n            <v-container>\n            <v-card-actions>\n                <v-btn variant=\"elevated\" @click=\"okDialog\" block>{{ okText }}</v-btn>\n            </v-card-actions>\n        </v-card>\n    </v-dialog>\n</template>\n\n<script>\n    export default {\n        data() {\n            // define variables available component-wide\n            // (in <template> and component functions)\n            return {\n                cbId: '',\n                okText: 'Close',\n                command: '',\n                showDialog: false,\n            }\n        },\n\n        watch: {},\n        mounted() {\n            this.$socket.on('msg-input:' + this.id, (msg) => {\n                if (this.msg.dialog){\n                    let dialog = this.msg.dialog\n                    this.showDialog = dialog.showDialog ?? false\n                }\n                if (this.msg.payload){\n                    this.cbId = this.msg?.payload?.cbId\n                    this.command = this.msg?.payload?.command ?? 'unknown'\n                }\n            })\n        },\n        methods: {\n            okDialog: function() {\n                this.showDialog = false\n\n            },\n            cancelDialog: function() {\n                this.msg.paylaod = {}\n                this.showDialog = false\n                \n            }\n\n        }\n    }\n</script>\n<style>\n    /* define any styles here - supports raw CSS */\n    .my-class {\n        color: red;\n    }\n</style>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1220,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "9061953296c99fc7",
        "type": "link out",
        "z": "217382551c48905d",
        "name": "link out 18",
        "mode": "link",
        "links": [
            "6ea73070a96d4eeb",
            "9405f117efca5faf"
        ],
        "x": 1665,
        "y": 180,
        "wires": []
    },
    {
        "id": "5e3e9b161183e7fa",
        "type": "debug",
        "z": "217382551c48905d",
        "name": "debug 43",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 300,
        "wires": []
    },
    {
        "id": "25588a53fed4f232",
        "type": "redis-command",
        "z": "217382551c48905d",
        "server": "0430675ed6c7cd83",
        "command": "KEYS",
        "name": "",
        "topic": "evse:*",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 350,
        "y": 940,
        "wires": [
            [
                "eceaa7b18c62ab6e"
            ]
        ]
    },
    {
        "id": "121272e1c2db07c3",
        "type": "inject",
        "z": "217382551c48905d",
        "name": "",
        "props": [
            {
                "p": "payload2",
                "v": "{\"cbid\":\"test\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 940,
        "wires": [
            [
                "25588a53fed4f232"
            ]
        ]
    },
    {
        "id": "eceaa7b18c62ab6e",
        "type": "debug",
        "z": "217382551c48905d",
        "name": "debug 44",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 940,
        "wires": []
    },
    {
        "id": "78ba51776812da90",
        "type": "redis-command",
        "z": "217382551c48905d",
        "server": "0430675ed6c7cd83",
        "command": "KEYS",
        "name": "Get TagInfo",
        "topic": "taginfo:*",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1210,
        "y": 220,
        "wires": [
            [
                "dee9becc2f4f6552"
            ]
        ]
    },
    {
        "id": "35448e49dfc5fde2",
        "type": "change",
        "z": "217382551c48905d",
        "name": "Protect Payload",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload2",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 220,
        "wires": [
            [
                "78ba51776812da90"
            ]
        ]
    },
    {
        "id": "dee9becc2f4f6552",
        "type": "change",
        "z": "217382551c48905d",
        "name": "tags",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "tags",
                "tot": "msg"
            },
            {
                "t": "move",
                "p": "payload2",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "tags",
                "pt": "msg",
                "to": "$map(tags,function($v,$i,$a){ $substringAfter($v, \":\")})",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1350,
        "y": 220,
        "wires": [
            [
                "f4550ea4a5f41146"
            ]
        ]
    },
    {
        "id": "3303c9688b7cce62",
        "type": "debug",
        "z": "217382551c48905d",
        "name": "debug 45",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1720,
        "y": 220,
        "wires": []
    },
    {
        "id": "061560f521c54ff7",
        "type": "function",
        "z": "217382551c48905d",
        "name": "function 15",
        "func": "let key = `evse:${msg.payload.cbId.toLowerCase()}`\nmsg = {}\nmsg.topic = key\nreturn msg\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 400,
        "wires": [
            [
                "426241cfa981a02b"
            ]
        ]
    },
    {
        "id": "aadafb1151581c5d",
        "type": "ui-template",
        "z": "217382551c48905d",
        "group": "1723c74d3f81385c",
        "page": "",
        "ui": "",
        "name": "Verify Delete",
        "order": 2,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <v-dialog width=\"auto\" v-model=\"showDialog\">\n        <v-card color=\"white\" v-click-outside=\"{handler: onClickOutside}\">\n            <v-toolbar color=\"primary\">\n                <v-card-title>\n                    <span>Delete {{ cbId }}?</span>\n                </v-card-title>\n            </v-toolbar>\n            <v-container>\n                <v-card-actions class=\"justify-end\">\n                    <v-btn variant=\"elevated\" @click=\"okDialog\">{{ okText }}</v-btn>\n                    <v-btn variant=\"elevated\" @click=\"cancelDialog\">{{ cancelText }}</v-btn>\n                </v-card-actions>\n            </v-container>\n        </v-card>\n    </v-dialog>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                okText: 'Delete',\n                cancelText: 'Cancel',\n                showDialog: false,\n                cbId: '<undefined>'\n            }\n        },\n\n        watch: {},\n        \n        mounted() {\n            this.$socket.on('msg-input:' + this.id, (msg) => {\n                if (this.msg.dialog){\n                    let dialog = this.msg.dialog\n                    this.showDialog = dialog.showDialog ?? false\n                    this.okText = dialog?.okText\n                    this.cancelText = dialog?.cancelText\n                }\n                if (this.msg.payload){\n                    let payload = this.msg.payload\n                    this.cbId = payload.cbId\n                }\n            })\n        },\n        methods: {\n            okDialog: function() {\n                this.showDialog = false\n                this.send(this.msg)\n\n            },\n            cancelDialog: function() {\n                this.msg.paylaod = {}\n                this.showDialog = false\n            }\n\n        }\n    }\n</script>\n",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1710,
        "y": 400,
        "wires": [
            [
                "061560f521c54ff7"
            ]
        ]
    },
    {
        "id": "d9db7aa7fbab290f",
        "type": "change",
        "z": "217382551c48905d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "dialog.showDialog",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "dialog.okText",
                "pt": "msg",
                "to": "Delete",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "dialog.cancelText",
                "pt": "msg",
                "to": "Cancel",
                "tot": "str"
            },
            {
                "t": "move",
                "p": "payload[0]",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1540,
        "y": 400,
        "wires": [
            [
                "aadafb1151581c5d",
                "639178f5d96d873a"
            ]
        ]
    },
    {
        "id": "a25df1a5696fa43b",
        "type": "change",
        "z": "217382551c48905d",
        "name": "tags",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$map(payload,function($v,$i,$a){ $substringAfter($v, \":\")})",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "CSMS:EVSEs",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 480,
        "wires": [
            [
                "aa90b7e66d3251d1"
            ]
        ]
    },
    {
        "id": "aa90b7e66d3251d1",
        "type": "debug",
        "z": "217382551c48905d",
        "name": "debug 49",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 480,
        "wires": []
    },
    {
        "id": "a361a3233397f32f",
        "type": "link out",
        "z": "217382551c48905d",
        "name": "link out 21",
        "mode": "link",
        "links": [
            "fd0ce11a6c04c0f3"
        ],
        "x": 1245,
        "y": 540,
        "wires": []
    },
    {
        "id": "240e92a246471c35",
        "type": "ui-control",
        "z": "217382551c48905d",
        "name": "",
        "ui": "8cdc313c9611f13f",
        "events": "all",
        "x": 560,
        "y": 320,
        "wires": [
            [
                "67e1b0b8d9f9b568"
            ]
        ]
    },
    {
        "id": "67e1b0b8d9f9b568",
        "type": "debug",
        "z": "217382551c48905d",
        "name": "debug 55",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 320,
        "wires": []
    },
    {
        "id": "a54b3536ac0b7516",
        "type": "function",
        "z": "217382551c48905d",
        "name": "Hide",
        "func": "msg.payload = {\n    \"groups\": {\n        \"hide\": [\n            \"EVSEs:Hidden\"\n        ]\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 320,
        "wires": [
            [
                "240e92a246471c35"
            ]
        ]
    },
    {
        "id": "d58c45d08125f791",
        "type": "function",
        "z": "217382551c48905d",
        "name": "Show",
        "func": "msg.payload = {\n    \"groups\": {\n        \"show\": [\n            \"EVSEs:Hidden\"\n        ]\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 280,
        "wires": [
            [
                "240e92a246471c35"
            ]
        ]
    },
    {
        "id": "9405f117efca5faf",
        "type": "link in",
        "z": "217382551c48905d",
        "name": "Hide Hidden",
        "links": [
            "9061953296c99fc7",
            "82c7dc438bcf613e",
            "c1ed374a1bace4de",
            "485897ecb288f5b2"
        ],
        "x": 105,
        "y": 320,
        "wires": [
            [
                "2360b2b5d9f086ce"
            ]
        ]
    },
    {
        "id": "4accb5be39dab46c",
        "type": "inject",
        "z": "217382551c48905d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 285,
        "y": 360,
        "wires": [
            [
                "a54b3536ac0b7516"
            ]
        ],
        "l": false
    },
    {
        "id": "abd4fc7cece76024",
        "type": "link in",
        "z": "217382551c48905d",
        "name": "Show Hidden",
        "links": [
            "7bc827572072b785",
            "8c62605df95e3ac2"
        ],
        "x": 235,
        "y": 280,
        "wires": [
            [
                "d58c45d08125f791"
            ]
        ]
    },
    {
        "id": "f813f3d81530033f",
        "type": "delay",
        "z": "217382551c48905d",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 110,
        "y": 280,
        "wires": [
            [
                "67831ed4d8bdfde1"
            ]
        ]
    },
    {
        "id": "2360b2b5d9f086ce",
        "type": "delay",
        "z": "217382551c48905d",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 210,
        "y": 320,
        "wires": [
            [
                "a54b3536ac0b7516"
            ]
        ]
    },
    {
        "id": "a15783afb2f690dc",
        "type": "delay",
        "z": "217382551c48905d",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 150,
        "y": 140,
        "wires": [
            [
                "cb4389b379c7a461"
            ]
        ]
    },
    {
        "id": "3cf0aaa06cd6633b",
        "type": "debug",
        "z": "217382551c48905d",
        "name": "debug 65",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 660,
        "wires": []
    },
    {
        "id": "485897ecb288f5b2",
        "type": "link out",
        "z": "217382551c48905d",
        "name": "OCPP Cmd Out",
        "mode": "link",
        "links": [
            "14970b0433fc1816",
            "9405f117efca5faf"
        ],
        "x": 1349,
        "y": 258,
        "wires": []
    },
    {
        "id": "b05ce5e13a571231",
        "type": "redis-command",
        "z": "55e67bd3e4f94c9a",
        "server": "0430675ed6c7cd83",
        "command": "SET",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 530,
        "y": 260,
        "wires": [
            [
                "570c8d913eb44546"
            ]
        ]
    },
    {
        "id": "a08dc1fc37195f4c",
        "type": "json",
        "z": "55e67bd3e4f94c9a",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 370,
        "y": 260,
        "wires": [
            [
                "b05ce5e13a571231"
            ]
        ]
    },
    {
        "id": "e0a2ea21b99cf98c",
        "type": "redis-command",
        "z": "55e67bd3e4f94c9a",
        "server": "0430675ed6c7cd83",
        "command": "KEYS",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 370,
        "y": 360,
        "wires": [
            [
                "c343b3129ff33360"
            ]
        ]
    },
    {
        "id": "c343b3129ff33360",
        "type": "json",
        "z": "55e67bd3e4f94c9a",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 510,
        "y": 360,
        "wires": [
            [
                "34c26ee02aa060fb"
            ]
        ]
    },
    {
        "id": "21dc022ed140a1bc",
        "type": "inject",
        "z": "55e67bd3e4f94c9a",
        "name": "Inject List at Startup",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "0",
        "x": 180,
        "y": 100,
        "wires": [
            [
                "76941cfcbf239f3e"
            ]
        ]
    },
    {
        "id": "34c26ee02aa060fb",
        "type": "json",
        "z": "55e67bd3e4f94c9a",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 630,
        "y": 360,
        "wires": [
            [
                "d7d05de12e3a6bb1"
            ]
        ]
    },
    {
        "id": "75aa14505ccda591",
        "type": "redis-command",
        "z": "55e67bd3e4f94c9a",
        "server": "0430675ed6c7cd83",
        "command": "MGET",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 430,
        "y": 440,
        "wires": [
            [
                "bee3f345890bdc32"
            ]
        ]
    },
    {
        "id": "a10ea6afabaa98a1",
        "type": "redis-command",
        "z": "55e67bd3e4f94c9a",
        "server": "0430675ed6c7cd83",
        "command": "DEL",
        "name": "",
        "topic": "",
        "params": "",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1480,
        "y": 440,
        "wires": [
            [
                "478df7cbfd677ac8"
            ]
        ]
    },
    {
        "id": "d7d05de12e3a6bb1",
        "type": "change",
        "z": "55e67bd3e4f94c9a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gettags",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 440,
        "wires": [
            [
                "75aa14505ccda591"
            ]
        ]
    },
    {
        "id": "bee3f345890bdc32",
        "type": "function",
        "z": "55e67bd3e4f94c9a",
        "name": "function 5",
        "func": "let evse\nlet tagInfo\nlet tags = []\n\nmsg.payload.splice(0,1)\n\nmsg.payload.forEach(function(tagItem) {\n    tagInfo = JSON.parse(tagItem)\n    tags.push(tagInfo)\n})\n\n/*\nmsg.headers = [\n    { key: 'name', title: 'Name', align: 'start'},\n    { key: 'tagId', title: \"Tag\"}, // title: 'Tag ID', value: 'item.tagId'},\n    { key: 'expdate', title: 'Expires'},\n    { key: 'enabled', title: 'Enabled'},\n    { key: 'lasttxdate', title: 'Last Tx'},\n    { key: 'actions', title: 'Action',align: 'end', sortable: false} \n]\n*/\n\nglobal.set(\"CSMS:Tags\",tags)\nmsg.payload = tags\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 440,
        "wires": [
            [
                "7c94e421f65d1c9e",
                "5a2226d788de7cae"
            ]
        ]
    },
    {
        "id": "e3a6be6f872e5ee3",
        "type": "function",
        "z": "55e67bd3e4f94c9a",
        "name": "Create taginfo:",
        "func": "let key = `taginfo:${msg.payload.tagId}`\nmsg.topic = key\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 260,
        "wires": [
            [
                "a08dc1fc37195f4c"
            ]
        ]
    },
    {
        "id": "7c94e421f65d1c9e",
        "type": "ui-template",
        "z": "55e67bd3e4f94c9a",
        "group": "447b58f3ddb86ab6",
        "page": "",
        "ui": "",
        "name": "Drivers List",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n\n    <v-toolbar flat>\n      <v-toolbar-title class=\"text-grey\">\n        Actions\n      </v-toolbar-title>\n\n      <v-spacer></v-spacer>\n           <v-tooltip text=\"Refresh\" location=\"bottom\">\n        <template v-slot:activator=\"{ props }\">\n          <v-btn icon v-bind=\"props\" @click=\"refresh\">\n            <v-icon>mdi-refresh</v-icon>\n          </v-btn>\n        </template>\n      </v-tooltip>\n      <v-tooltip text=\"New\" location=\"bottom\">\n        <template v-slot:activator=\"{ props }\">\n          <v-btn icon v-bind=\"props\" @click=\"addNew\">\n            <v-icon>mdi-card-account-details-outline</v-icon>\n          </v-btn>\n        </template>\n      </v-tooltip>\n\n    </v-toolbar>\n\n      <v-text-field\n        v-model=\"search\"\n        label=\"Search\"\n        prepend-inner-icon=\"mdi-magnify\"\n        variant=\"outlined\"\n        hide-details\n        single-line\n      ></v-text-field>\n\n    \n    <v-data-table  \n        :search=\"search\" \n        :items=\"msg?.payload\"\n        :headers=\"headers\"\n        v-model=\"selected\"\n        item-selectable=\"selectable\"\n        select-strategy=\"all\"\n        hide-select    \n        return-object>\n      <template v-slot:header.lasttxdate>\n        <div><v-icon icon=\"mdi-calendar\" class=\"text-center\"></div>\n      </template>\n\n      <template v-slot:item.name=\"{ item }\">\n        <div :class=\"statusClass(item)\">\n          <v-text>{{ item.name }}</v-text>\n      </template>\n\n      <template v-slot:item.tagId=\"{ item }\">\n        <div :class=\"statusClass(item)\">\n          <v-text>{{ item.tagId }}</v-text>\n      </template>\n      \n\n      <template v-slot:item.expdate=\"{ item }\">\n        <div :class=\"statusClass(item)\">\n          <v-text>{{ item.expdate }}</v-text>\n      </template>\n\n      \n      <template v-slot:item.enabled=\"{ item }\">\n        <div class=\"text-center\">\n          <v-icon v-if=\"item.enabled\" color=\"green\" icon=\"mdi-checkbox-outline\"></v-icon>\n          <v-icon v-else color=\"red\" icon=\"mdi-minus-box-outline\"></v-icon>\n        </div>\n      </template>\n\n      <template v-slot:item.actions=\"{ item }\">\n        <v-icon\n          class=\"me-2\"\n          size=\"small\"\n          @click=\"send({action: 'edit', payload: [item]})\"\n        >\n          mdi-pencil\n        </v-icon>\n        <v-icon\n          size=\"small\"\n          @click=\"send({action: 'delete', payload: [item]})\"\n        >\n          mdi-delete\n        </v-icon>\n      </template>\n\n    </v-data-table>\n\n</template>\n\n<script>\n    export default {\n    data () {\n      return {\n        selected: [],\n        search: '',\n        multiSelected: 0,\n        heartbeat: 30,\n        headers: [\n            { key: 'name', title: 'Name', align: 'start'},\n            { key: 'tagId', title: \"Tag\"},\n            { key: 'expdate', title: 'Expires'},\n            { key: 'enabled', title: 'Enabled', align: 'center'},\n            //{ key: 'lasttxdate', title: 'Last Tx'},\n            { key: 'actions', title: 'Action',align: 'end', sortable: false} \n        ]\n      }\n    },\n    watch: {\n        selected: function() {\n          this.multiSelected = this.selected.length\n        }\n    },\n    methods: {\n      // expose a method to our <template> and Vue Application\n      addNew() {\n        this.send({action: 'add', payload: [{ cbId: ''}]});\n        this.selected = [];\n        this.multiSelected = 0;\n      },\n      statusClass(item) {\n        if (item.expdate){ \n            let expDate = new Date(item.expdate)\n            expDate.setHours(23, 59, 59, 999); // Set to the end of the day\n            let currentDate = new Date()\n\n            if (currentDate > expDate){\n              return \"disabled\"\n            }\n        }\n\n          return (item.enabled)? \"enabled\" : \"disabled\"\n      }\n    }  \n  }\n</script>\n\n<style>\n  .disabled {\n    color: red;\n    text-decoration: line-through;\n  }\n  .enabled {\n    color: darkgreen;\n    font-weight: bold;\n  }\n</style>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 730,
        "y": 440,
        "wires": [
            [
                "7bf0c2f4c53b878c"
            ]
        ]
    },
    {
        "id": "9cfd6611eb504813",
        "type": "ui-template",
        "z": "55e67bd3e4f94c9a",
        "group": "447b58f3ddb86ab6",
        "page": "",
        "ui": "",
        "name": "Edit Form",
        "order": 2,
        "width": "0",
        "height": "0",
        "head": "",
        "format": "<template>\n    <v-dialog width=\"auto\" v-model=\"showDialog\">\n        <v-card color=\"white\" v-click-outside=\"{handler: onDoNothing}\">\n            <v-toolbar color=\"primary\">\n                <v-card-title>\n                    <span>{{ title }}</span>\n                </v-card-title>\n            </v-toolbar>\n            <v-container>\n                <v-text-field\n                    v-model=\"name\"\n                    label=\"Account Name\"\n                    type=\"text\"\n                    min-width=25em\n                    hint=\"Name for this account (user, company etc.)\"\n                ></v-text-field>\n                <v-text-field\n                    v-model=\"tagId\"\n                    label=\"Tag ID\"\n                    type=\"text\"\n                ></v-text-field>\n                <v-text-field\n                    v-model=\"expdate\"\n                    label=\"Expiration\"\n                    type=\"date\"\n                    hint=\"\"\n                ></v-text-field>\n                <v-checkbox\n                    v-model=\"enabled\"\n                    label=\"Enabled\"\n                    type=\"checkbox\"\n                ></v-checkbox>\n                <!-- v-text-field\n                    v-model=\"lasttxdate\"\n                    label=\"Last Tx\"\n                    type=\"number\"\n                    placeholder=\"<optional>\"\n                ></v-text-field -->\n\n                <v-card-actions class=\"justify-end\">\n                    <v-btn variant=\"elevated\" @click=\"okDialog\">{{ okText }}</v-btn>\n                    <v-btn variant=\"elevated\" @click=\"cancelDialog\">{{ cancelText }}</v-btn>\n                </v-card-actions>\n            </v-container>\n        </v-card>\n    </v-dialog>\n</template>\n\n<script>\n    export default {\n        data() {\n            // define variables available component-wide\n            // (in <template> and component functions)\n            return {\n                name: '',\n                tagId: '',\n                expdate: Date.now(),\n                enabled: false,\n                lasttxdate: Date.now(),\n                showDialog: false\n            }\n        },\n        watch: {\n            // watch for any changes of \"count\"\n        },    \n        computed: {\n            // automatically compute this variable\n            // whenever VueJS deems appropriate\n\n        },\n        methods: {\n            // expose a method to our <template> and Vue Application\n            sendtagiddata: function() {\n                this.send({\n                    payload: {\n                        name: this.name,\n                        tagId: this.tagId,\n                        expdate: this.expdate,\n                        enabled: this.enabled,\n                        lasttxdate: this.lasttxdate\n                    }\n                })\n            },\n            okDialog: function() {\n                this.sendtagiddata()\n                this.showDialog = false\n            },\n            cancelDialog: function() {\n                this.msg.payload = {}\n                this.showDialog = false\n            },\n            onClickOutside: function() {\n                this.msg.payload = {}\n                this.showDialog = false\n            },\n            onDoNothing: function() { this.showDialog = true},\n            getReadOnly: function() {\n                return (this.newEdit == \"New\") ? false : true\n            }\n\n        },\n        mounted() {\n\n            this.$socket.on('msg-input:' + this.id, (msg) => {\n                // do stuff with msg\n                // runs only when messages are received\n                if (this.msg?.payload){\n                    let payload = this.msg.payload\n                    this.name = payload.name ?? ''\n                    this.tagId = payload.tagId ?? ''\n                    this.expdate = payload.expdate ?? null\n                    this.enabled = payload.enabled ?? false\n                    this.lasttxdate = payload.lasttxdate ?? null\n                }\n                if (this.msg?.dialog) {\n                    let dialog = this.msg.dialog\n                    this.okText = dialog.okText ?? \"OK\"\n                    this.cancelText = dialog.cancelText ?? \"Cancel\"\n                    this.showDialog = dialog.showDialog ?? false\n                    this.title = dialog.title ?? \"Tag Info\"\n                    this.newEdit = dialog.newEdit ?? \"New\"\n                }\n            })\n                        \n        },\n        unmounted() {}\n   }\n</script>\n",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 220,
        "y": 180,
        "wires": [
            [
                "c0bcd5f7e0d961d1"
            ]
        ]
    },
    {
        "id": "c0bcd5f7e0d961d1",
        "type": "link out",
        "z": "55e67bd3e4f94c9a",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "b3e37204b499ad30"
        ],
        "x": 405,
        "y": 180,
        "wires": []
    },
    {
        "id": "b3e37204b499ad30",
        "type": "link in",
        "z": "55e67bd3e4f94c9a",
        "name": "Set TagInfo",
        "links": [
            "c0bcd5f7e0d961d1"
        ],
        "x": 85,
        "y": 260,
        "wires": [
            [
                "e3a6be6f872e5ee3"
            ]
        ]
    },
    {
        "id": "db0ee15864de99ca",
        "type": "link in",
        "z": "55e67bd3e4f94c9a",
        "name": "RefreshTaginfo List",
        "links": [
            "478df7cbfd677ac8",
            "570c8d913eb44546",
            "76941cfcbf239f3e",
            "cf180dbcd550b118"
        ],
        "x": 85,
        "y": 360,
        "wires": [
            [
                "c7703b48d88b3bdd"
            ]
        ]
    },
    {
        "id": "570c8d913eb44546",
        "type": "link out",
        "z": "55e67bd3e4f94c9a",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "db0ee15864de99ca"
        ],
        "x": 635,
        "y": 260,
        "wires": []
    },
    {
        "id": "7bf0c2f4c53b878c",
        "type": "switch",
        "z": "55e67bd3e4f94c9a",
        "name": "",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "add",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "edit",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "refresh",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 870,
        "y": 440,
        "wires": [
            [
                "f3dd4285d1436aac"
            ],
            [
                "f3dd4285d1436aac"
            ],
            [
                "25e25012a3dc58c5"
            ],
            [
                "cf180dbcd550b118"
            ]
        ]
    },
    {
        "id": "733e64a4e54121b8",
        "type": "function",
        "z": "55e67bd3e4f94c9a",
        "name": "function 7",
        "func": "let key = `taginfo:${msg.payload.tagId}`\nmsg = {}\nmsg.topic = key\nreturn msg\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 440,
        "wires": [
            [
                "a10ea6afabaa98a1"
            ]
        ]
    },
    {
        "id": "478df7cbfd677ac8",
        "type": "link out",
        "z": "55e67bd3e4f94c9a",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "db0ee15864de99ca"
        ],
        "x": 1575,
        "y": 440,
        "wires": []
    },
    {
        "id": "f3dd4285d1436aac",
        "type": "change",
        "z": "55e67bd3e4f94c9a",
        "name": "Add/Edit Dialog ",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0]",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "dialog.showDialog",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "dialog.okText",
                "pt": "msg",
                "to": "Ok",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "dialog.cancelText",
                "pt": "msg",
                "to": "Cancel",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "dialog.title",
                "pt": "msg",
                "to": "TagInfo",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 400,
        "wires": [
            [
                "bf8f0dfada9e7ff4"
            ]
        ]
    },
    {
        "id": "c7703b48d88b3bdd",
        "type": "function",
        "z": "55e67bd3e4f94c9a",
        "name": "Scan taginfo:",
        "func": "msg = {}\nmsg.payload = \"taginfo:*\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 360,
        "wires": [
            [
                "e0a2ea21b99cf98c"
            ]
        ]
    },
    {
        "id": "afcd44d6a459fb11",
        "type": "link in",
        "z": "55e67bd3e4f94c9a",
        "name": "TagInfo Edit Form",
        "links": [
            "bf8f0dfada9e7ff4"
        ],
        "x": 85,
        "y": 180,
        "wires": [
            [
                "9cfd6611eb504813"
            ]
        ]
    },
    {
        "id": "bf8f0dfada9e7ff4",
        "type": "link out",
        "z": "55e67bd3e4f94c9a",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "afcd44d6a459fb11"
        ],
        "x": 1165,
        "y": 400,
        "wires": []
    },
    {
        "id": "76941cfcbf239f3e",
        "type": "link out",
        "z": "55e67bd3e4f94c9a",
        "name": "link out 10",
        "mode": "link",
        "links": [
            "db0ee15864de99ca"
        ],
        "x": 325,
        "y": 100,
        "wires": []
    },
    {
        "id": "cf180dbcd550b118",
        "type": "link out",
        "z": "55e67bd3e4f94c9a",
        "name": "link out 15",
        "mode": "link",
        "links": [
            "db0ee15864de99ca"
        ],
        "x": 985,
        "y": 480,
        "wires": []
    },
    {
        "id": "95f17244a08397ca",
        "type": "ui-template",
        "z": "55e67bd3e4f94c9a",
        "group": "447b58f3ddb86ab6",
        "page": "",
        "ui": "",
        "name": "Verify Delete",
        "order": 3,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <v-dialog width=\"auto\" v-model=\"showDialog\">\n        <v-card color=\"white\" v-click-outside=\"{handler: onClickOutside}\">\n            <v-toolbar color=\"primary\">\n                <v-card-title>\n                    <span>Delete {{ name }}:{{tagId}}?</span>\n                </v-card-title>\n            </v-toolbar>\n            <v-container>\n                <v-card-actions class=\"justify-end\">\n                    <v-btn variant=\"elevated\" @click=\"okDialog\">{{ okText }}</v-btn>\n                    <v-btn variant=\"elevated\" @click=\"cancelDialog\">{{ cancelText }}</v-btn>\n                </v-card-actions>\n            </v-container>\n        </v-card>\n    </v-dialog>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                okText: 'Delete',\n                cancelText: 'Cancel',\n                showDialog: false,\n                name: '<undefined>',\n                tagId: '<undefined>'\n            }\n        },\n\n        watch: {},\n        \n        mounted() {\n            this.$socket.on('msg-input:' + this.id, (msg) => {\n                if (this.msg.dialog){\n                    let dialog = this.msg.dialog\n                    this.showDialog = dialog.showDialog ?? false\n                    this.okText = dialog?.okText\n                    this.cancelText = dialog?.cancelText\n                }\n                if (this.msg.payload){\n                    let payload = this.msg.payload\n                    this.name = payload.name\n                    this.tagId = payload.tagId\n                }\n            })\n        },\n        methods: {\n            okDialog: function() {\n                this.showDialog = false\n                this.send(this.msg)\n\n            },\n            cancelDialog: function() {\n                this.msg.paylaod = {}\n                this.showDialog = false\n            }\n\n        }\n    }\n</script>\n",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1190,
        "y": 440,
        "wires": [
            [
                "733e64a4e54121b8"
            ]
        ]
    },
    {
        "id": "25e25012a3dc58c5",
        "type": "change",
        "z": "55e67bd3e4f94c9a",
        "name": "Delete Verify",
        "rules": [
            {
                "t": "set",
                "p": "dialog.showDialog",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "dialog.okText",
                "pt": "msg",
                "to": "Delete",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "dialog.cancelText",
                "pt": "msg",
                "to": "Cancel",
                "tot": "str"
            },
            {
                "t": "move",
                "p": "payload[0]",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1030,
        "y": 440,
        "wires": [
            [
                "95f17244a08397ca"
            ]
        ]
    },
    {
        "id": "5a2226d788de7cae",
        "type": "debug",
        "z": "55e67bd3e4f94c9a",
        "name": "debug 56",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 580,
        "wires": []
    },
    {
        "id": "250472edd0782156",
        "type": "ui-template",
        "z": "68c0944e7f4deca9",
        "group": "c04aff20955da79f",
        "page": "",
        "ui": "",
        "name": "",
        "order": 2,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n\n  <v-toolbar flat>\n    <v-toolbar-title class=\"text-grey\">\n        Actions\n    </v-toolbar-title>\n\n    <v-spacer></v-spacer>\n\n    <v-tooltip text=\"Refresh\" location=\"bottom\">\n        <template v-slot:activator=\"{ props }\">\n          <v-btn icon v-bind=\"props\" @click=\"send({action: 'refresh'})\">\n            <v-icon>mdi-refresh</v-icon>\n          </v-btn>\n        </template>\n    </v-tooltip>\n  </v-toolbar>\n    \n    <v-text-field\n        v-model=\"search\"\n        label=\"Search\"\n        prepend-inner-icon=\"mdi-magnify\"\n        variant=\"outlined\"\n        hide-details\n        single-line\n      ></v-text-field>\n\n    <v-data-table  \n            v-model:search=\"search\" \n            :items=\"msg?.payload?.data?.configurationKey\"\n            :headers=\"headers\"\n            :filter-keys='[\"key\",\"value\"]'\n            >\n\n      <template v-slot:item.actions=\"{ item }\">\n        <v-icon v-if=\"!item.readonly\"\n          class=\"me-2\"\n          size=\"small\"\n          @click=\"send({action: 'edit', payload: [item], cbId })\"\n        >\n          mdi-pencil\n        </v-icon>\n        <v-icon v-else\n          class=\"me-2\"\n          size=\"small\"\n          color=\"grey\"\n        >\n          mdi-pencil-off\n        </v-icon>        \n      </template>\n\n    </v-data-table>\n</template>\n\n<script>\n    export default {\n        data() {\n            // define variables available component-wide\n            // (in <template> and component functions)\n            return {\n                search: '',\n                headers: [\n                    {title: \"Key\", value: \"key\", sortable: true},\n                    {title: \"Value\", value: \"value\", sortable: true},\n                    { key: 'actions', title: 'Edit', align: 'end', \n                        sortRaw (a,b) {\n                            if (a.readonly && ( b.readonly == false) ) return 1;\n                            if (!a.readonly && b.readonly) return -1;\n                            return 0;\n                                                \n                        }                        \n                    }                    \n                ],\n                value: '',\n                cbId: 'unknown'\n            }\n        },\n        watch: {\n            // watch for any changes of \"count\"\n\n        },\n        computed: {\n\n        },\n        methods: {\n            \n        },\n        mounted() {\n            // code here when the component is first loaded\n            this.$socket.on('msg-input:' + this.id, (msg) => {\n                // do stuff with msg\n                // runs only when messages are received\n                //if (this.msg?.payload){\n                //    let payload = this.msg.payload\n                //    this.configKey = payload.key\n                //    this.configValue = payload.value\n                //}\n                if (this.msg?.ocpp) {\n                    this.cbId = this.msg.ocpp?.chargeBoxIdentity ?? \"ERROR\"\n                }\n            })\n        },\n        unmounted() {\n            // code here when the component is removed from the Dashboard\n            // i.e. when the user navigates away from the page\n        }\n    }\n\n//sortRaw: (a, b) {\n//                            if (a.readonly == b.readonly) return 0; \n//                            if (a.readonly > b.readonly) return 1;\n//                            if (a.readonly < b.readonly) return -1;\n//                        }\n\n\n</script>\n<style>\n    /* define any styles here - supports raw CSS */\n    .my-class {\n        color: red;\n    }\n    .headers {\n        font-weight: bold;\n    }\n    .ocppMsgReq {\n        color: blue;\n        font-weight: bold;\n    }\n    .ocppMsgRes {\n        color: blue;\n    }\n    .ocppMsgErr {\n        color: red;\n    }\n    .ocppCmdReq {\n        color: green;\n        font-weight: bold;\n    }\n    .ocppCmdRes {\n        color: DarkCyan;\n    }\n</style>\n\n",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 500,
        "y": 160,
        "wires": [
            [
                "a611c369ecc73876"
            ]
        ]
    },
    {
        "id": "6d40c15be6021ad7",
        "type": "link in",
        "z": "68c0944e7f4deca9",
        "name": "GetConfig",
        "links": [
            "b13502a9cfe6c685"
        ],
        "x": 265,
        "y": 160,
        "wires": [
            [
                "250472edd0782156",
                "72ce3ed5698f5660"
            ]
        ]
    },
    {
        "id": "72ce3ed5698f5660",
        "type": "debug",
        "z": "68c0944e7f4deca9",
        "name": "debug 38",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 200,
        "wires": []
    },
    {
        "id": "dadfc221f1661483",
        "type": "ui-template",
        "z": "68c0944e7f4deca9",
        "group": "c04aff20955da79f",
        "page": "",
        "ui": "",
        "name": "Edit Form",
        "order": 3,
        "width": "0",
        "height": "0",
        "head": "",
        "format": "<template>\n    <v-dialog width=\"auto\" v-model=\"showDialog\">\n        <v-card color=\"white\" v-click-outside=\"{handler: onClickOutside}\">\n            <v-toolbar color=\"primary\">\n                <v-card-title>\n                    <span>{{ title }} for {{ cbId }}</span>\n                </v-card-title>\n            </v-toolbar>\n            <v-container>\n                <v-text-field\n                    v-model=\"configKey\"\n                    label=\"Key\"\n                    type=\"text\"\n                    disabled\n                    min-width=50em\n                    hint=\"Config Key Name\"\n                ></v-text-field>\n                <v-text-field\n                    v-model=\"configValue\"\n                    label=\"Value\"\n                    type=\"text\"\n                ></v-text-field>\n\n                <v-card-actions class=\"justify-end\">\n                    <v-btn variant=\"elevated\" @click=\"okDialog\">{{ okText }}</v-btn>\n                    <v-btn variant=\"elevated\" @click=\"cancelDialog\">{{ cancelText }}</v-btn>\n                </v-card-actions>\n            </v-container>\n        </v-card>\n    </v-dialog>\n</template>\n\n<script>\n    export default {\n        data() {\n            // define variables available component-wide\n            // (in <template> and component functions)\n            return {\n                configKey: '',\n                configValue: '',\n                cbId: 'ERROR',\n                showDialog: false\n            }\n        },\n        watch: {\n            // watch for any changes of \"count\"\n        },    \n        computed: {\n            // automatically compute this variable\n            // whenever VueJS deems appropriate\n\n        },\n        methods: {\n            // expose a method to our <template> and Vue Application\n            sendconfigdata: function() {\n                this.send({\n                    payload: {\n                        key: this.configKey,\n                        value: this.configValue,\n                        cbId: this.cbId\n                    }\n                })\n            },\n            okDialog: function() {\n                this.sendconfigdata()\n                this.showDialog = false\n            },\n            cancelDialog: function() {\n                this.msg.payload = {}\n                this.showDialog = false\n            },\n            onClickOutside: function() {\n                this.msg.payload = {}\n                this.showDialog = false\n            },\n\n        },\n        mounted() {\n\n            this.$socket.on('msg-input:' + this.id, (msg) => {\n                // do stuff with msg\n                // runs only when messages are received\n                if (this.msg?.payload){\n                    let payload = this.msg.payload\n                    this.configKey = payload.key\n                    this.configValue = payload.value\n                    this.cbId = payload.cbId\n                }\n                if (this.msg?.dialog) {\n                    let dialog = this.msg.dialog\n                    this.okText = dialog.okText ?? \"OK\"\n                    this.cancelText = dialog.cancelText ?? \"Cancel\"\n                    this.showDialog = dialog.showDialog ?? false\n                    this.title = dialog.title ?? \"Edit Config Key\"\n                }\n            })\n                        \n        },\n        unmounted() {}\n   }\n</script>\n",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 500,
        "y": 80,
        "wires": [
            [
                "45d4b152cda7914e"
            ]
        ]
    },
    {
        "id": "9a3712f9d4ef4b3c",
        "type": "link in",
        "z": "68c0944e7f4deca9",
        "name": "Edit Config Item",
        "links": [
            "9dc7fde8212f4622"
        ],
        "x": 265,
        "y": 80,
        "wires": [
            [
                "dadfc221f1661483"
            ]
        ]
    },
    {
        "id": "9dc7fde8212f4622",
        "type": "link out",
        "z": "68c0944e7f4deca9",
        "name": "link out 24",
        "mode": "link",
        "links": [
            "9a3712f9d4ef4b3c"
        ],
        "x": 1115,
        "y": 200,
        "wires": []
    },
    {
        "id": "f06a407da6df4ef5",
        "type": "change",
        "z": "68c0944e7f4deca9",
        "name": "Add/Edit Dialog ",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0]",
                "tot": "msg"
            },
            {
                "t": "move",
                "p": "cbId",
                "pt": "msg",
                "to": "payload.cbId",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "dialog.showDialog",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "dialog.okText",
                "pt": "msg",
                "to": "Update",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "dialog.cancelText",
                "pt": "msg",
                "to": "Cancel",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "dialog.title",
                "pt": "msg",
                "to": "Edit Configuration",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 200,
        "wires": [
            [
                "9dc7fde8212f4622"
            ]
        ]
    },
    {
        "id": "45d4b152cda7914e",
        "type": "change",
        "z": "68c0944e7f4deca9",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload.data",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.command",
                "pt": "msg",
                "to": "ChangeConfiguration",
                "tot": "str"
            },
            {
                "t": "move",
                "p": "payload.data.cbId",
                "pt": "msg",
                "to": "payload.cbId",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 80,
        "wires": [
            [
                "bf301b6e3cd5b7f3",
                "c333f56bd1abd4ca"
            ]
        ]
    },
    {
        "id": "bf301b6e3cd5b7f3",
        "type": "link out",
        "z": "68c0944e7f4deca9",
        "name": "link out 25",
        "mode": "link",
        "links": [
            "6ea73070a96d4eeb"
        ],
        "x": 1005,
        "y": 80,
        "wires": []
    },
    {
        "id": "16e438b3b8461c0a",
        "type": "function",
        "z": "68c0944e7f4deca9",
        "name": "Refresh GetConfig",
        "func": "msg.payload = {\n    \"command\": \"GetConfiguration\",\n    \"cbId\": \"Fractal0014\",\n    \"data\": {\n        \"key\": []\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 160,
        "wires": [
            [
                "bf301b6e3cd5b7f3"
            ]
        ]
    },
    {
        "id": "a611c369ecc73876",
        "type": "switch",
        "z": "68c0944e7f4deca9",
        "name": "",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "refresh",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "edit",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 630,
        "y": 160,
        "wires": [
            [
                "16e438b3b8461c0a"
            ],
            [
                "f06a407da6df4ef5"
            ]
        ]
    },
    {
        "id": "c333f56bd1abd4ca",
        "type": "delay",
        "z": "68c0944e7f4deca9",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 750,
        "y": 120,
        "wires": [
            [
                "16e438b3b8461c0a"
            ]
        ]
    },
    {
        "id": "b41f25aa1e91bcdf",
        "type": "ui-dropdown",
        "z": "68c0944e7f4deca9",
        "group": "c04aff20955da79f",
        "name": "",
        "label": "Select EVSE:",
        "tooltip": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "chips": false,
        "clearable": false,
        "options": [
            {
                "label": "Fractal0014",
                "value": "Fractal0014",
                "type": "str"
            },
            {
                "label": "Fractal0001",
                "value": "Fractal0001",
                "type": "str"
            },
            {
                "label": "EVOChargeLab1",
                "value": "EVOChargeLab1",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "typeIsComboBox": true,
        "msgTrigger": "onChange",
        "x": 520,
        "y": 280,
        "wires": [
            [
                "572385ddb0a2b809"
            ]
        ]
    },
    {
        "id": "8fd801d05bd71d61",
        "type": "redis-command",
        "z": "68c0944e7f4deca9",
        "server": "0430675ed6c7cd83",
        "command": "KEYS",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 580,
        "y": 400,
        "wires": [
            [
                "effdcd024fba93d3"
            ]
        ]
    },
    {
        "id": "90710dfacc2327b0",
        "type": "function",
        "z": "68c0944e7f4deca9",
        "name": "Scan evse tags",
        "func": "msg = {}\nmsg.payload = \"evse:*\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 400,
        "wires": [
            [
                "8fd801d05bd71d61"
            ]
        ]
    },
    {
        "id": "a78f4a87347eb493",
        "type": "inject",
        "z": "68c0944e7f4deca9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 400,
        "wires": [
            [
                "90710dfacc2327b0"
            ]
        ]
    },
    {
        "id": "cd1d1bb073f40edd",
        "type": "debug",
        "z": "68c0944e7f4deca9",
        "name": "debug 57",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 400,
        "wires": []
    },
    {
        "id": "effdcd024fba93d3",
        "type": "change",
        "z": "68c0944e7f4deca9",
        "name": "tags",
        "rules": [
            {
                "t": "set",
                "p": "ui_update.options",
                "pt": "msg",
                "to": "$map(payload,function($v,$i,$a){ $substringAfter($v, \":\")})",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 400,
        "wires": [
            [
                "cd1d1bb073f40edd",
                "b41f25aa1e91bcdf"
            ]
        ]
    },
    {
        "id": "572385ddb0a2b809",
        "type": "function",
        "z": "68c0944e7f4deca9",
        "name": "Refresh GetConfig",
        "func": "const cbId = msg.payload\n\nmsg.payload = {\n    \"command\": \"GetConfiguration\",\n    \"cbId\": cbId,\n    \"data\": {\n        \"key\": []\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 280,
        "wires": [
            [
                "76415b48f89bd6e0",
                "bf301b6e3cd5b7f3"
            ]
        ]
    },
    {
        "id": "76415b48f89bd6e0",
        "type": "debug",
        "z": "68c0944e7f4deca9",
        "name": "debug 58",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 280,
        "wires": []
    },
    {
        "id": "e3912322d07af67d",
        "type": "ui-template",
        "z": "daf7a59ca2ce18df",
        "group": "17fb40c0e949759b",
        "page": "",
        "ui": "",
        "name": "Tx List",
        "order": 1,
        "width": "0",
        "height": "0",
        "head": "",
        "format": "<template>\n    <v-text-field\n        v-model=\"search\"\n        label=\"Search\"\n        prepend-inner-icon=\"mdi-magnify\"\n        variant=\"outlined\"\n        hide-details\n        single-line\n      ></v-text-field>\n\n    <v-data-table  \n            v-model:search=\"search\" \n            :headers=\"headers\"\n            :items=\"msg?.payload\"\n            :filter-keys='[\"transactionId\",\"cbId\",\"_value\"]'\n            >\n      <template v-slot:item.meter=\"{ item }\">\n        <div>\n          <v-text>{{ item.meterStart }}{{item.meterStop}}</v-text>\n      </template>\n        <template v-slot:item._ztime=\"{ item }\">\n            <div>{{ getLocalTimeString(item._time) }}</div>\n        </template>\n      <template v-slot:item.actions=\"{ item }\">\n        <v-icon\n          class=\"me-2\"\n          size=\"small\"\n          @click=\"send({payload: { txId: item.transactionId}})\"\n        >\n          mdi-eye\n        </v-icon>\n      </template>\n            \n    </v-data-table>\n</template>\n\n<script>\n    export default {\n        data() {\n            // define variables available component-wide\n            // (in <template> and component functions)\n            return {\n                search: '',\n                headers: [\n                    { value: \"_time\", title: \"Time\"},\n                    { value: \"command\", title: \"Command\"},\n                    { value: \"transactionId\", title: \"TxId\"},\n                    { value: \"cbId\", title: \"EVSE\"},\n                    { value: \"connectorId\", title: \"Conn\"},\n                    //{ value: \"meterStart\", title: \"Start\"},\n                    //{ value: \"meterStop\", title: \"Stop\"},\n                    { key: \"meter\", title: \"Meter\"},\n                    { key: \"actions\", title: \"View\", sortable: false},\n                ]\n            }\n        },\n        watch: {\n            // watch for any changes of \"count\"\n\n        },\n        computed: {\n\n        },\n        methods: {\n            // expose a method to our <template> and Vue Application\n            getLocalTimeString: function (isoTime){\n                const date = new Date(isoTime)\n                const options = { \n                    year: '2-digit', \n                    month: '2-digit', \n                    day: '2-digit', \n                    hour: '2-digit', \n                    minute: '2-digit', \n                    second: '2-digit', \n                    millisecond: '3-digit',\n                    hour12: false \n                    }\n                return date.toLocaleString('en-US', options)\n            },\n        },\n        mounted() {\n            // code here when the component is first loaded\n        },\n        unmounted() {\n            // code here when the component is removed from the Dashboard\n            // i.e. when the user navigates away from the page\n        }\n    }\n</script>\n<style>\n    /* define any styles here - supports raw CSS */\n    .my-class {\n        color: red;\n    }\n    .headers {\n        font-weight: bold;\n    }\n    .ocppMsgReq {\n        color: blue;\n        font-weight: bold;\n    }\n    .ocppMsgRes {\n        color: blue;\n    }\n    .ocppMsgErr {\n        color: red;\n    }\n</style>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1190,
        "y": 520,
        "wires": [
            [
                "c4b73cd2d6f1efbb",
                "c006c2c3567e7ee6",
                "2807de6096eb9e1f"
            ]
        ]
    },
    {
        "id": "0380a90af6da220b",
        "type": "influxdb in",
        "z": "daf7a59ca2ce18df",
        "influxdb": "7cb40fcee206391e",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "argonne",
        "x": 540,
        "y": 120,
        "wires": [
            [
                "879a60905f018737"
            ]
        ]
    },
    {
        "id": "72d6a88d845b6b48",
        "type": "function",
        "z": "daf7a59ca2ce18df",
        "name": "function 16",
        "func": "// clear out any incoming message for now.\nmsg = {}\n\nmsg.query = \n    'from(bucket: \"OCPP\") \\\n      |> range(start: -1d) \\\n      |> filter(fn: (r) => r[\"_measurement\"] == \"Transaction\") \\\n      //|> filter(fn: (r) => r[\"_field\"] == \"ocppMsg\") \\\n      //|> group() \\\n      //|> sort(columns: [\"_time\"]) \\\n      |> drop(columns: [\"table\",\"Result\",\"_measurement\",\"_stop\",\"_start\",\"_field\"]) \\\n      //|> keep(columns: [\"_time\",\"cbId\",\"command\",\"msgFrom\",\"_value\"]) \\\n      |> limit(n: 500)'\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 120,
        "wires": [
            [
                "0380a90af6da220b"
            ]
        ]
    },
    {
        "id": "879a60905f018737",
        "type": "debug",
        "z": "daf7a59ca2ce18df",
        "name": "debug 48",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 120,
        "wires": []
    },
    {
        "id": "6f06af534fd6202b",
        "type": "inject",
        "z": "daf7a59ca2ce18df",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 120,
        "wires": [
            [
                "72d6a88d845b6b48"
            ]
        ]
    },
    {
        "id": "c4b73cd2d6f1efbb",
        "type": "function",
        "z": "daf7a59ca2ce18df",
        "name": "FLUX Get raw MV OCPP",
        "func": "// clear out any incoming message for now.\nlet filter_by_tx = \"\";\nlet topic = \"00000000\"\nif (msg.payload.txId) {\n  filter_by_tx = `|> filter(fn: (r) => r[\"transactionId\"] == \"${msg.payload.txId}\")`\n  topic = msg.payload.txId\n}\n\nmsg = {}\n\nmsg.topic = topic\n\nmsg.query = `from(bucket: \"OCPP\") \\\n  |> range(start: -365d) \\\n  |> filter(fn: (r) => r[\"_measurement\"] == \"MeterValues\") \\\n  ${filter_by_tx} \\\n  |> pivot(columnKey: [\"_field\"], rowKey: [\"_time\"], valueColumn: \"_value\") \\\n  |> drop(columns: [\"_start\",\"_stop\",\"_measurement\",\"cbId\",\"connectorId\",\"transactionId\"]) \\\n  |> sort(columns: [\"_time\"])`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 460,
        "wires": [
            [
                "7d7516052c9c7a0a",
                "02ea19c5e98fd683"
            ]
        ]
    },
    {
        "id": "47ec7b659bf636da",
        "type": "function",
        "z": "daf7a59ca2ce18df",
        "name": "FLUX Get raw Tx OCPP",
        "func": "// clear out any incoming message for now.\nmsg = {}\n\nmsg.query = `from(bucket: \"OCPP\")\n  |> range( start: -20d)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"Transaction\")\n  |> pivot(columnKey: [\"_field\"], rowKey: [\"_time\"], valueColumn: \"_value\")\n  |> drop(columns: [\"_start\",\"_stop\",\"_measurement\"])\n  |> group(columns: [\"transactionId\"])\n  |> sort(columns: [\"_time\"])`\n\n\nmsg.query = `\nfrom(bucket: \"OCPP\")\n  |> range(start: -2d)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"Transaction\")\n  |> filter(fn: (r) => r[\"_field\"] == \"meterStart\" or r[\"_field\"] == \"meterStop\" or r[\"_field\"] == \"transactionId\" or r[\"_field\"] == \"timestamp\" or r[\"_field\"] == \"idTag\" or r[\"_field\"] == \"connectorId\" )\n  |> pivot(columnKey: [\"_field\"], rowKey: [\"_time\"], valueColumn: \"_value\")\n  |> filter(fn: (r) => r.transactionId != 0)\n  |> drop(columns: [\"_start\",\"_stop\",\"_measurement\",\"msgFrom\"])\n  |> group()\n  |> sort(columns: [\"_time\"])\n`\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 520,
        "wires": [
            [
                "3b309fbf5a5e9349"
            ]
        ]
    },
    {
        "id": "32233b212a66cfcb",
        "type": "debug",
        "z": "daf7a59ca2ce18df",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1355,
        "y": 500,
        "wires": [],
        "l": false
    },
    {
        "id": "3b309fbf5a5e9349",
        "type": "influxdb in",
        "z": "daf7a59ca2ce18df",
        "influxdb": "7cb40fcee206391e",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "argonne",
        "x": 820,
        "y": 520,
        "wires": [
            [
                "c5cd7189e5cb3f54"
            ]
        ]
    },
    {
        "id": "1380888fab8c8636",
        "type": "inject",
        "z": "daf7a59ca2ce18df",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 305,
        "y": 580,
        "wires": [
            [
                "47ec7b659bf636da"
            ]
        ],
        "l": false
    },
    {
        "id": "c5cd7189e5cb3f54",
        "type": "function",
        "z": "daf7a59ca2ce18df",
        "name": "FLUX remove extras",
        "func": "msg.payload.forEach(function(ocppMsg) {\n    delete ocppMsg.result;\n    delete ocppMsg.table;\n});\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 520,
        "wires": [
            [
                "e3912322d07af67d",
                "aef68b6786e5c5a7"
            ]
        ]
    },
    {
        "id": "aa18045a070128d9",
        "type": "link in",
        "z": "daf7a59ca2ce18df",
        "name": "MV Refresh",
        "links": [
            "b30433a611efd29c"
        ],
        "x": 145,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "22993ff229d6db8d",
        "type": "link in",
        "z": "daf7a59ca2ce18df",
        "name": "Transaction Refreh",
        "links": [
            "7a8e05f5d5a2e926"
        ],
        "x": 145,
        "y": 520,
        "wires": [
            [
                "47ec7b659bf636da"
            ]
        ]
    },
    {
        "id": "70f90fb397f12726",
        "type": "ui-template",
        "z": "daf7a59ca2ce18df",
        "group": "750f030497b122aa",
        "page": "",
        "ui": "",
        "name": "MV by TxId",
        "order": 9,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <v-text-field\n        v-model=\"search\"\n        label=\"Search\"\n        prepend-inner-icon=\"mdi-magnify\"\n        variant=\"outlined\"\n        hide-details\n        single-line\n      ></v-text-field>\n\n    <v-data-table  \n            v-model:search=\"search\" \n            :items=\"msg?.payload\"\n            :filter-keys='[\"command\",\"msgFrom\",\"cbId\",\"_value\"]'\n            >\n        <template v-slot:header._time>\n            <div class=\"headers\">Time</div>\n        </template>\n        <template v-slot:header.cbId>\n            <div class=\"headers\">EVSE</div>\n        </template>\n        <template v-slot:header.msgFrom>\n            <div class=\"headers\">Origin</div>\n        </template>\n        <template v-slot:header.command>\n            <div class=\"text-center headers\">CMD</div>\n        </template>\n        <template v-slot:header._value>\n            <div class=\"text-center headers\">OCPP Message</div>\n        </template>\n        <template v-slot:item._time=\"{ item }\">\n            <div>{{ getLocalTimeString(item._time) }}</div>\n        </template>\n    </v-data-table>\n</template>\n\n<script>\n    export default {\n        data() {\n            // define variables available component-wide\n            // (in <template> and component functions)\n            return {\n                search: ''\n            }\n        },\n        watch: {\n            // watch for any changes of \"count\"\n\n        },\n        computed: {\n\n        },\n        methods: {\n            // expose a method to our <template> and Vue Application\n            getLocalTimeString: function (isoTime){\n                const date = new Date(isoTime)\n                const options = { \n                    year: '2-digit', \n                    month: '2-digit', \n                    day: '2-digit', \n                    hour: '2-digit', \n                    minute: '2-digit', \n                    second: '2-digit', \n                    millisecond: '3-digit',\n                    hour12: false \n                    }\n                return date.toLocaleString('en-US', options)\n            },\n        },\n        mounted() {\n            // code here when the component is first loaded\n        },\n        unmounted() {\n            // code here when the component is removed from the Dashboard\n            // i.e. when the user navigates away from the page\n        }\n    }\n</script>\n<style>\n    /* define any styles here - supports raw CSS */\n    .my-class {\n        color: red;\n    }\n    .headers {\n        font-weight: bold;\n    }\n    .ocppMsgReq {\n        color: blue;\n        font-weight: bold;\n    }\n    .ocppMsgRes {\n        color: blue;\n    }\n    .ocppMsgErr {\n        color: red;\n    }\n</style>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1410,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "7d7516052c9c7a0a",
        "type": "influxdb in",
        "z": "daf7a59ca2ce18df",
        "influxdb": "7cb40fcee206391e",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "argonne",
        "x": 900,
        "y": 460,
        "wires": [
            [
                "20adfc41cd29af1b"
            ]
        ]
    },
    {
        "id": "20adfc41cd29af1b",
        "type": "function",
        "z": "daf7a59ca2ce18df",
        "name": "FLUX remove extras",
        "func": "msg.payload.forEach(function(ocppMsg) {\n    delete ocppMsg.result;\n    delete ocppMsg.table;\n});\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 460,
        "wires": [
            [
                "70f90fb397f12726",
                "32233b212a66cfcb",
                "bb739222584f69de"
            ]
        ]
    },
    {
        "id": "74e8ab5325f7b4d5",
        "type": "inject",
        "z": "daf7a59ca2ce18df",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"txId\":\"1736225603483323\"}",
        "payloadType": "json",
        "x": 380,
        "y": 360,
        "wires": [
            [
                "c4b73cd2d6f1efbb"
            ]
        ]
    },
    {
        "id": "e4a883d2e16e1a3f",
        "type": "inject",
        "z": "daf7a59ca2ce18df",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"txId\": \"1736225122964380\"}",
        "payloadType": "json",
        "x": 380,
        "y": 404,
        "wires": [
            [
                "c4b73cd2d6f1efbb"
            ]
        ]
    },
    {
        "id": "afc97f6be14c06af",
        "type": "debug",
        "z": "daf7a59ca2ce18df",
        "name": "debug 60",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 280,
        "wires": []
    },
    {
        "id": "e721721ffe065303",
        "type": "debug",
        "z": "daf7a59ca2ce18df",
        "name": "debug 61",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 700,
        "wires": []
    },
    {
        "id": "e5cf1fe4522628ee",
        "type": "ui-control",
        "z": "daf7a59ca2ce18df",
        "name": "",
        "ui": "8cdc313c9611f13f",
        "events": "all",
        "x": 600,
        "y": 700,
        "wires": [
            [
                "e721721ffe065303"
            ]
        ]
    },
    {
        "id": "add76386e6a46f5d",
        "type": "function",
        "z": "daf7a59ca2ce18df",
        "name": "Show TX",
        "func": "msg.payload = {\n    \"groups\": {\n        \"show\": [\n            \"Transactions:Transactions\"\n        ],\n        \"hide\": [\n            \"Transactions:Meter Values\"\n        ]\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 660,
        "wires": [
            [
                "e5cf1fe4522628ee",
                "47ec7b659bf636da"
            ]
        ]
    },
    {
        "id": "c006c2c3567e7ee6",
        "type": "function",
        "z": "daf7a59ca2ce18df",
        "name": "Show MV",
        "func": "msg.payload = {\n    \"groups\": {\n        \"hide\": [\n            \"Transactions:Transactions\"\n        ],\n        \"show\": [\n            \"Transactions:Meter Values\"\n        ]\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 700,
        "wires": [
            [
                "e5cf1fe4522628ee"
            ]
        ]
    },
    {
        "id": "5df3e99944651698",
        "type": "inject",
        "z": "daf7a59ca2ce18df",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 265,
        "y": 660,
        "wires": [
            [
                "add76386e6a46f5d"
            ]
        ],
        "l": false
    },
    {
        "id": "7ad34b56292f573d",
        "type": "inject",
        "z": "daf7a59ca2ce18df",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 265,
        "y": 700,
        "wires": [
            [
                "c006c2c3567e7ee6"
            ]
        ],
        "l": false
    },
    {
        "id": "c3993a72f3c63028",
        "type": "ui-button",
        "z": "daf7a59ca2ce18df",
        "group": "750f030497b122aa",
        "name": "",
        "label": "Return to Transaction List",
        "order": 1,
        "width": "0",
        "height": "0",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "block",
        "icon": "mdi-keyboard-return",
        "iconPosition": "left",
        "payload": "{\"target\":\"Transactions\"}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "yellow",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 150,
        "y": 620,
        "wires": [
            [
                "add76386e6a46f5d"
            ]
        ]
    },
    {
        "id": "bc6bb2f523b00fa9",
        "type": "ui-chart",
        "z": "daf7a59ca2ce18df",
        "group": "750f030497b122aa",
        "name": "Energy",
        "label": "Energy",
        "order": 13,
        "chartType": "line",
        "category": "",
        "categoryType": "none",
        "xAxisLabel": "",
        "xAxisProperty": "payload._time",
        "xAxisPropertyType": "msg",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "kWh",
        "yAxisProperty": "payload.EnergykWh",
        "yAxisPropertyType": "msg",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#ffa200",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "3",
        "height": "8",
        "className": "",
        "interpolation": "linear",
        "x": 1480,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "a39145869b71df51",
        "type": "ui-chart",
        "z": "daf7a59ca2ce18df",
        "group": "750f030497b122aa",
        "name": "Power",
        "label": "Power",
        "order": 12,
        "chartType": "line",
        "category": "",
        "categoryType": "none",
        "xAxisLabel": "",
        "xAxisProperty": "payload._time",
        "xAxisPropertyType": "msg",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "kW",
        "yAxisProperty": "payload.PowerkW",
        "yAxisPropertyType": "msg",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#96e407",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "3",
        "height": "8",
        "className": "",
        "interpolation": "linear",
        "x": 1470,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "2ef7f596c72004a1",
        "type": "ui-chart",
        "z": "daf7a59ca2ce18df",
        "group": "750f030497b122aa",
        "name": "SOC",
        "label": "SOC",
        "order": 14,
        "chartType": "line",
        "category": "",
        "categoryType": "none",
        "xAxisLabel": "",
        "xAxisProperty": "payload._time",
        "xAxisPropertyType": "msg",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "%",
        "yAxisProperty": "payload.SoC",
        "yAxisPropertyType": "msg",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#ae00ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "3",
        "height": "8",
        "className": "",
        "interpolation": "linear",
        "x": 1470,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "bb739222584f69de",
        "type": "function",
        "z": "daf7a59ca2ce18df",
        "name": "function 18",
        "func": "// Start off by clearing all the charts\nnode.send({payload: []})\n\n//Take the array and send as individual payloads to the \n// charts\n \nmsg.payload.forEach(function(mv) {\n    let msg2 = {}\n    msg2.payload = mv\n    //msg2.payload.timestamp = new Date(mv._time).getTime()\n    node.send(msg2)\n});\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 240,
        "wires": [
            [
                "b790fef9f4f7de2c"
            ]
        ]
    },
    {
        "id": "6c36ced9caa73c04",
        "type": "debug",
        "z": "daf7a59ca2ce18df",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1385,
        "y": 380,
        "wires": [],
        "l": false
    },
    {
        "id": "11ee4d2550f2e6b1",
        "type": "ui-chart",
        "z": "daf7a59ca2ce18df",
        "group": "750f030497b122aa",
        "name": "Current",
        "label": "Current",
        "order": 11,
        "chartType": "line",
        "category": "",
        "categoryType": "none",
        "xAxisLabel": "",
        "xAxisProperty": "payload._time",
        "xAxisPropertyType": "msg",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "Amps",
        "yAxisProperty": "payload.CurrentA",
        "yAxisPropertyType": "msg",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#6600ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "3",
        "height": "8",
        "className": "",
        "interpolation": "linear",
        "x": 1481,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "bae6fc11c3f77385",
        "type": "ui-chart",
        "z": "daf7a59ca2ce18df",
        "group": "750f030497b122aa",
        "name": "Voltage",
        "label": "Voltage",
        "order": 10,
        "chartType": "line",
        "category": "",
        "categoryType": "none",
        "xAxisLabel": "",
        "xAxisProperty": "payload._time",
        "xAxisPropertyType": "msg",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "Volts",
        "yAxisProperty": "payload.VoltageV",
        "yAxisPropertyType": "msg",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#05ff71",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "3",
        "height": 8,
        "className": "",
        "interpolation": "linear",
        "x": 1480,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "83b842273e7bfae5",
        "type": "ui-text",
        "z": "daf7a59ca2ce18df",
        "group": "750f030497b122aa",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Transaction ID: ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "style": true,
        "font": "",
        "fontSize": "30",
        "color": "#500ced",
        "wrapText": false,
        "className": "",
        "x": 1120,
        "y": 400,
        "wires": []
    },
    {
        "id": "02ea19c5e98fd683",
        "type": "change",
        "z": "daf7a59ca2ce18df",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "query",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "topic",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 360,
        "wires": [
            [
                "83b842273e7bfae5",
                "6c36ced9caa73c04",
                "9cec406f120e7d5d"
            ]
        ]
    },
    {
        "id": "2807de6096eb9e1f",
        "type": "function",
        "z": "daf7a59ca2ce18df",
        "name": "FLUX Get raw None-MV OCPP",
        "func": "// clear out any incoming message for now.\nlet filter_by_tx = \"\";\nlet topic = \"00000000\"\nif (msg.payload.txId) {\n  filter_by_tx = `|> filter(fn: (r) => r[\"transactionId\"] == ${msg.payload.txId})`\n  topic = msg.payload.txId\n}\n\nmsg = {}\n\nmsg.topic = topic\n\nmsg.query = `from(bucket: \"OCPP\") \\\n  |> range( start: -365d) \\\n  |> filter(fn: (r) => r[\"_measurement\"] == \"Transaction\") \\\n  |> pivot(columnKey: [\"_field\"], rowKey: [\"_time\"], valueColumn: \"_value\") \\\n  ${filter_by_tx} \\\n  |> filter(fn: (r) => r[\"command\"] == \"StartTransaction\") \\\n  |> drop(columns: [\"_start\",\"_stop\",\"_measurement\"]) \\\n  |> group(columns: [\"transactionId\"]) \\\n  |> sort(columns: [\"_time\"])`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 280,
        "wires": [
            [
                "cad0c9ccd4a89916"
            ]
        ]
    },
    {
        "id": "cad0c9ccd4a89916",
        "type": "influxdb in",
        "z": "daf7a59ca2ce18df",
        "influxdb": "7cb40fcee206391e",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "argonne",
        "x": 920,
        "y": 280,
        "wires": [
            [
                "afc97f6be14c06af"
            ]
        ]
    },
    {
        "id": "aef68b6786e5c5a7",
        "type": "debug",
        "z": "daf7a59ca2ce18df",
        "name": "debug 67",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 700,
        "wires": []
    },
    {
        "id": "a54940f160f7f0db",
        "type": "ui-text",
        "z": "daf7a59ca2ce18df",
        "group": "750f030497b122aa",
        "order": 3,
        "width": "2",
        "height": "1",
        "name": "",
        "label": "ChargeBoxID:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#aa14e1",
        "wrapText": false,
        "className": "",
        "x": 1220,
        "y": 840,
        "wires": []
    },
    {
        "id": "0cfe76cf25b87178",
        "type": "ui-text",
        "z": "daf7a59ca2ce18df",
        "group": "750f030497b122aa",
        "order": 4,
        "width": "2",
        "height": "1",
        "name": "",
        "label": "Connector:  ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#0db1f8",
        "wrapText": false,
        "className": "",
        "x": 1210,
        "y": 880,
        "wires": []
    },
    {
        "id": "d301de1fbbac9723",
        "type": "ui-text",
        "z": "daf7a59ca2ce18df",
        "group": "750f030497b122aa",
        "order": 8,
        "width": "2",
        "height": "1",
        "name": "",
        "label": "Client:  ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#ff8d0a",
        "wrapText": false,
        "className": "",
        "x": 1190,
        "y": 920,
        "wires": []
    },
    {
        "id": "33e220dd106839f5",
        "type": "ui-text",
        "z": "daf7a59ca2ce18df",
        "group": "750f030497b122aa",
        "order": 5,
        "width": "2",
        "height": "1",
        "name": "",
        "label": "Start MV:  ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#0e6735",
        "wrapText": false,
        "className": "",
        "x": 1200,
        "y": 960,
        "wires": []
    },
    {
        "id": "306d784e407efc57",
        "type": "ui-text",
        "z": "daf7a59ca2ce18df",
        "group": "750f030497b122aa",
        "order": 6,
        "width": "2",
        "height": "1",
        "name": "",
        "label": "End MV:  ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#0e6735",
        "wrapText": false,
        "className": "",
        "x": 1200,
        "y": 1000,
        "wires": []
    },
    {
        "id": "5aed68d7dac2c043",
        "type": "ui-text",
        "z": "daf7a59ca2ce18df",
        "group": "750f030497b122aa",
        "order": 7,
        "width": "2",
        "height": "1",
        "name": "",
        "label": "Total kWh:  ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#0e6735",
        "wrapText": false,
        "className": "",
        "x": 1210,
        "y": 1040,
        "wires": []
    },
    {
        "id": "9cec406f120e7d5d",
        "type": "function",
        "z": "daf7a59ca2ce18df",
        "name": "Get Tx MeterStart/Stop  ",
        "func": "let TxId = msg.payload\nmsg = {}\n\nmsg.query = `\nmeterStart = from(bucket: \"OCPP\")\n  |> range(start: -2d)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"Transaction\")\n  |> filter(fn: (r) => r[\"_field\"] == \"transactionId\" or r[\"_field\"] == \"meterStart\" or r[\"_field\"] == \"idTag\" or r[\"_field\"] == \"connectorId\")\n  |> filter(fn: (r) => r.command == \"StartTransaction\")\n  |> pivot(columnKey: [\"_field\"], rowKey: [\"_time\"], valueColumn: \"_value\")\n  |> filter(fn: (r) => r.transactionId != 0)\n  |> drop(columns: [\"_start\",\"_stop\",\"msgFrom\",\"_measurement\"])\n\nmeterStop = from(bucket: \"OCPP\")\n  |> range(start: -2d)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"Transaction\")\n  |> filter(fn: (r) => r[\"_field\"] == \"transactionId\" or r[\"_field\"] == \"meterStop\")\n  |> filter(fn: (r) => r.command == \"StopTransaction\")\n  |> pivot(columnKey: [\"_field\"], rowKey: [\"_time\"], valueColumn: \"_value\")\n  |> filter(fn: (r) => r.transactionId != 0)\n  |> drop(columns: [\"_start\",\"_stop\",\"msgFrom\",\"_measurement\"])\n\njoin(tables: {key1: meterStart, key2: meterStop}, on: [\"transactionId\"], method: \"inner\")\n|> map(fn: (r) => ({ r with totalEnergy: r.meterStop - r.meterStart}))\n|> map(fn: (r) => ({ r with difference_seconds: (uint( v: r._time_key2) - uint( v: r._time_key1)) / uint(v: 1000000000) }))\n|> filter(fn: (r) => r.transactionId == ${TxId})\n\n`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 800,
        "wires": [
            [
                "54ff26bff532c2d5"
            ]
        ]
    },
    {
        "id": "54ff26bff532c2d5",
        "type": "influxdb in",
        "z": "daf7a59ca2ce18df",
        "influxdb": "7cb40fcee206391e",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "argonne",
        "x": 600,
        "y": 800,
        "wires": [
            [
                "a6b605ca949e5de8",
                "4cc7f71877e27f96"
            ]
        ]
    },
    {
        "id": "a6b605ca949e5de8",
        "type": "debug",
        "z": "daf7a59ca2ce18df",
        "name": "debug 68",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 800,
        "wires": []
    },
    {
        "id": "5cc51912a700cb47",
        "type": "inject",
        "z": "daf7a59ca2ce18df",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1736982609",
        "payloadType": "num",
        "x": 130,
        "y": 800,
        "wires": [
            [
                "9cec406f120e7d5d"
            ]
        ]
    },
    {
        "id": "b2ad490ff03c2c97",
        "type": "change",
        "z": "daf7a59ca2ce18df",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0].cbId_key1",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 840,
        "wires": [
            [
                "a54940f160f7f0db"
            ]
        ]
    },
    {
        "id": "2a2eb5a77e70df62",
        "type": "change",
        "z": "daf7a59ca2ce18df",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0].connectorId",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 880,
        "wires": [
            [
                "0cfe76cf25b87178"
            ]
        ]
    },
    {
        "id": "9214f5879d50fbe0",
        "type": "change",
        "z": "daf7a59ca2ce18df",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0].idTag",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 920,
        "wires": [
            [
                "d301de1fbbac9723"
            ]
        ]
    },
    {
        "id": "e5e3bc3824864970",
        "type": "change",
        "z": "daf7a59ca2ce18df",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0].meterStart",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 960,
        "wires": [
            [
                "33e220dd106839f5"
            ]
        ]
    },
    {
        "id": "4a191fd359629475",
        "type": "change",
        "z": "daf7a59ca2ce18df",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0].meterStop",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 1000,
        "wires": [
            [
                "306d784e407efc57"
            ]
        ]
    },
    {
        "id": "a6948cd72ae1a796",
        "type": "change",
        "z": "daf7a59ca2ce18df",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0].totalEnergy",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 1040,
        "wires": [
            [
                "5aed68d7dac2c043"
            ]
        ]
    },
    {
        "id": "898f5d33416b458c",
        "type": "ui-number-input",
        "z": "c4f677cd277b409d",
        "group": "ace44af4012c4fc1",
        "name": "Heartbeat",
        "label": "Heartbeat Rate (seconds)",
        "order": 1,
        "width": 0,
        "height": 0,
        "topic": "heartbeat",
        "topicType": "msg",
        "min": 0,
        "max": "86400",
        "step": 1,
        "tooltip": "",
        "passthru": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "icon": "mdi-heart-pulse",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "spinner": "default",
        "x": 620,
        "y": 160,
        "wires": [
            [
                "ac08ee5853b84129"
            ]
        ]
    },
    {
        "id": "242a9e9f7655ccdb",
        "type": "redis-command",
        "z": "c4f677cd277b409d",
        "server": "0430675ed6c7cd83",
        "command": "SET",
        "name": "set heartbeat rate",
        "topic": "settings:evse:heartbeat_rate",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1110,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "ac08ee5853b84129",
        "type": "function",
        "z": "c4f677cd277b409d",
        "name": "num2str",
        "func": "global.set(\"CSMS:HeartbeatInterval\", msg.payload)\nmsg.payload = `${msg.payload}`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 160,
        "wires": [
            [
                "242a9e9f7655ccdb"
            ]
        ]
    },
    {
        "id": "7000f9956b23dcde",
        "type": "ui-number-input",
        "z": "c4f677cd277b409d",
        "group": "c48e064d37e64bbf",
        "name": "Site LoadLimit",
        "label": "Max Load Limit (Amps)",
        "order": 3,
        "width": 0,
        "height": 0,
        "topic": "heartbeat",
        "topicType": "msg",
        "min": 0,
        "max": "86400",
        "step": 1,
        "tooltip": "Set the maximum amperage limit to maintain for your all your EVSEs (adjusted for 20% under rating if necessary)",
        "passthru": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "icon": "mdi-meter-electric-outline",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "spinner": "default",
        "x": 640,
        "y": 220,
        "wires": [
            [
                "20dc0388748792d5"
            ]
        ]
    },
    {
        "id": "1e9fb8f4a3750ee5",
        "type": "redis-command",
        "z": "c4f677cd277b409d",
        "server": "0430675ed6c7cd83",
        "command": "SET",
        "name": "set site load limit",
        "topic": "settings:site:load_limit",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 960,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "20dc0388748792d5",
        "type": "function",
        "z": "c4f677cd277b409d",
        "name": "num2str",
        "func": "global.set(\"SITE:LoadLimit\", msg.payload)\nmsg.payload = `${msg.payload}`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 220,
        "wires": [
            [
                "1e9fb8f4a3750ee5"
            ]
        ]
    },
    {
        "id": "d59fede572569ae8",
        "type": "ui-switch",
        "z": "c4f677cd277b409d",
        "name": "FreeVend",
        "label": "FreeVend Mode",
        "group": "ace44af4012c4fc1",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": false,
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "className": "",
        "layout": "row-left-swapped",
        "clickableArea": "line",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 580,
        "y": 280,
        "wires": [
            [
                "22b6392a92b7af5a"
            ]
        ]
    },
    {
        "id": "22b6392a92b7af5a",
        "type": "change",
        "z": "c4f677cd277b409d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "CSMS:FreeVend",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 280,
        "wires": [
            [
                "119bc57be0dace1a"
            ]
        ]
    },
    {
        "id": "d7539d9175e7a289",
        "type": "redis-command",
        "z": "c4f677cd277b409d",
        "server": "0430675ed6c7cd83",
        "command": "SET",
        "name": "set FreeVend",
        "topic": "settings:site:free_vend",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1130,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "119bc57be0dace1a",
        "type": "function",
        "z": "c4f677cd277b409d",
        "name": "bool2str",
        "func": "msg.payload = `${msg.payload}`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 280,
        "wires": [
            [
                "d7539d9175e7a289"
            ]
        ]
    },
    {
        "id": "754e5e01d72b3fbd",
        "type": "redis-command",
        "z": "c4f677cd277b409d",
        "server": "0430675ed6c7cd83",
        "command": "GET",
        "name": "get heartbeat rate",
        "topic": "settings:evse:heartbeat_rate",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 310,
        "y": 160,
        "wires": [
            [
                "73913870b6bbee44"
            ]
        ]
    },
    {
        "id": "73913870b6bbee44",
        "type": "function",
        "z": "c4f677cd277b409d",
        "name": "str2num",
        "func": "if (msg?.payload){\n    msg.payload = Number(msg.payload)\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 160,
        "wires": [
            [
                "898f5d33416b458c"
            ]
        ]
    },
    {
        "id": "a7fd3a800d49469d",
        "type": "redis-command",
        "z": "c4f677cd277b409d",
        "server": "0430675ed6c7cd83",
        "command": "GET",
        "name": "set site load limit",
        "topic": "settings:site:load_limit",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 280,
        "y": 220,
        "wires": [
            [
                "d6ed3f773625f10c"
            ]
        ]
    },
    {
        "id": "d6ed3f773625f10c",
        "type": "function",
        "z": "c4f677cd277b409d",
        "name": "str2num",
        "func": "if (msg?.payload){\n    msg.payload = Number(msg.payload)\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 220,
        "wires": [
            [
                "7000f9956b23dcde"
            ]
        ]
    },
    {
        "id": "9a553400c62662a4",
        "type": "redis-command",
        "z": "c4f677cd277b409d",
        "server": "0430675ed6c7cd83",
        "command": "GET",
        "name": "get FreeVend",
        "topic": "settings:site:free_vend",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 280,
        "y": 280,
        "wires": [
            [
                "2b07e761244ab2ed"
            ]
        ]
    },
    {
        "id": "2b07e761244ab2ed",
        "type": "function",
        "z": "c4f677cd277b409d",
        "name": "str2bool",
        "func": "if (msg?.payload){\n    msg.payload = msg.payload == \"true\"\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 280,
        "wires": [
            [
                "d59fede572569ae8"
            ]
        ]
    },
    {
        "id": "47c4718f596acff4",
        "type": "inject",
        "z": "c4f677cd277b409d",
        "name": "Prime",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 250,
        "y": 100,
        "wires": [
            [
                "9460a6cb7347f787"
            ]
        ]
    },
    {
        "id": "fcba4c1e92563751",
        "type": "link in",
        "z": "c4f677cd277b409d",
        "name": "link in 1",
        "links": [
            "9460a6cb7347f787"
        ],
        "x": 135,
        "y": 220,
        "wires": [
            [
                "754e5e01d72b3fbd",
                "a7fd3a800d49469d",
                "9a553400c62662a4",
                "6bdcde6369d7a4b4",
                "039d0809d7c54de3"
            ]
        ]
    },
    {
        "id": "9460a6cb7347f787",
        "type": "link out",
        "z": "c4f677cd277b409d",
        "name": "link out 20",
        "mode": "link",
        "links": [
            "fcba4c1e92563751"
        ],
        "x": 345,
        "y": 100,
        "wires": []
    },
    {
        "id": "a81f42c772df8a5b",
        "type": "function",
        "z": "c4f677cd277b409d",
        "name": "BootNotification",
        "func": "//Load defaults\nconst interval = global.get(\"CSMS:HeartBeatInterval\") ?? 120\nconst currentTime = new Date().toISOString()\nconst validEVSEs = global.get(\"CSMS:EVSEs\") ?? []\n\nlet status = (validEVSEs.find((cbId) => cbId === msg.ocpp.cbId ) != undefined) ? \"Accepted\" : \"Rejected\"\n\n\nmsg.payload = {\n    interval,\n    currentTime,\n    status\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "6bdcde6369d7a4b4",
        "type": "redis-command",
        "z": "c4f677cd277b409d",
        "server": "0430675ed6c7cd83",
        "command": "GET",
        "name": "get FreeVend",
        "topic": "settings:site:show_banner",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 280,
        "y": 380,
        "wires": [
            [
                "d9da991ba26f4cb9"
            ]
        ]
    },
    {
        "id": "d9da991ba26f4cb9",
        "type": "function",
        "z": "c4f677cd277b409d",
        "name": "str2bool",
        "func": "if (msg?.payload){\n    msg.payload = msg.payload == \"true\"\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 380,
        "wires": [
            [
                "e5c9c7caaa758ba6"
            ]
        ]
    },
    {
        "id": "e5c9c7caaa758ba6",
        "type": "ui-switch",
        "z": "c4f677cd277b409d",
        "name": "ShowBanner",
        "label": "Show Banner",
        "group": "c48e064d37e64bbf",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": false,
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "className": "",
        "layout": "row-left-swapped",
        "clickableArea": "line",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 590,
        "y": 380,
        "wires": [
            [
                "9b3d26af73349aa3"
            ]
        ]
    },
    {
        "id": "9b3d26af73349aa3",
        "type": "change",
        "z": "c4f677cd277b409d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "CSMS:ShowBanner",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 380,
        "wires": [
            [
                "2f5b237b308259e4"
            ]
        ]
    },
    {
        "id": "2f5b237b308259e4",
        "type": "function",
        "z": "c4f677cd277b409d",
        "name": "bool2str",
        "func": "msg.payload = `${msg.payload}`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 380,
        "wires": [
            [
                "cdc21d885376925c"
            ]
        ]
    },
    {
        "id": "cdc21d885376925c",
        "type": "redis-command",
        "z": "c4f677cd277b409d",
        "server": "0430675ed6c7cd83",
        "command": "SET",
        "name": "set FreeVend",
        "topic": "settings:site:show_banner",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1130,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "2865264d3a083b92",
        "type": "ui-text-input",
        "z": "c4f677cd277b409d",
        "group": "c48e064d37e64bbf",
        "name": "",
        "label": "Banner URL:",
        "order": 2,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "text",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 590,
        "y": 440,
        "wires": [
            [
                "effb1e3caf4af0f1"
            ]
        ]
    },
    {
        "id": "039d0809d7c54de3",
        "type": "redis-command",
        "z": "c4f677cd277b409d",
        "server": "0430675ed6c7cd83",
        "command": "GET",
        "name": "get FreeVend",
        "topic": "settings:site:banner_url",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 280,
        "y": 440,
        "wires": [
            [
                "376f748d58d4b933"
            ]
        ]
    },
    {
        "id": "376f748d58d4b933",
        "type": "function",
        "z": "c4f677cd277b409d",
        "name": "str2bool",
        "func": "if (msg?.payload){\n    msg.payload = msg.payload == \"true\"\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 440,
        "wires": [
            [
                "2865264d3a083b92"
            ]
        ]
    },
    {
        "id": "effb1e3caf4af0f1",
        "type": "change",
        "z": "c4f677cd277b409d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "CSMS:BannerURL",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 440,
        "wires": [
            [
                "51bdfbdaf93d88b8"
            ]
        ]
    },
    {
        "id": "51bdfbdaf93d88b8",
        "type": "function",
        "z": "c4f677cd277b409d",
        "name": "bool2str",
        "func": "msg.payload = `${msg.payload}`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 440,
        "wires": [
            [
                "032974aac4851b85"
            ]
        ]
    },
    {
        "id": "032974aac4851b85",
        "type": "redis-command",
        "z": "c4f677cd277b409d",
        "server": "0430675ed6c7cd83",
        "command": "SET",
        "name": "set FreeVend",
        "topic": "settings:site:banner_url",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1130,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "75b51ecec0628924",
        "type": "redis-command",
        "z": "c4f677cd277b409d",
        "server": "0430675ed6c7cd83",
        "command": "GET",
        "name": "get MVSampleRate",
        "topic": "settings:evse:heartbeat_rate",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 290,
        "y": 500,
        "wires": [
            [
                "be79b6ceff0f3e99"
            ]
        ]
    },
    {
        "id": "be79b6ceff0f3e99",
        "type": "function",
        "z": "c4f677cd277b409d",
        "name": "str2num",
        "func": "if (msg?.payload){\n    msg.payload = Number(msg.payload)\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 500,
        "wires": [
            [
                "10d82e3acebc28c9"
            ]
        ]
    },
    {
        "id": "10d82e3acebc28c9",
        "type": "ui-number-input",
        "z": "c4f677cd277b409d",
        "group": "ace44af4012c4fc1",
        "name": "MV Interval",
        "label": "Meter Value Sample Interval (seconds)",
        "order": 2,
        "width": 0,
        "height": 0,
        "topic": "heartbeat",
        "topicType": "msg",
        "min": 0,
        "max": "86400",
        "step": 1,
        "tooltip": "",
        "passthru": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "icon": "mdi-view-week",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "spinner": "default",
        "x": 610,
        "y": 500,
        "wires": [
            [
                "1749deab15469733"
            ]
        ]
    },
    {
        "id": "1749deab15469733",
        "type": "function",
        "z": "c4f677cd277b409d",
        "name": "num2str",
        "func": "global.set(\"CSMS:MVSampleInterval\", msg.payload)\nmsg.payload = `${msg.payload}`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 500,
        "wires": [
            [
                "fb57c8aef67fde6a"
            ]
        ]
    },
    {
        "id": "fb57c8aef67fde6a",
        "type": "redis-command",
        "z": "c4f677cd277b409d",
        "server": "0430675ed6c7cd83",
        "command": "SET",
        "name": "set heartbeat rate",
        "topic": "settings:evse:mvsampleinterval",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1150,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "e50b7a84160e1d66",
        "type": "mqtt in",
        "z": "bc469b88bbf8641e",
        "name": "",
        "topic": "CIPio/Debbie/Meter/LVION0987/Power/Active/PowerPTotal",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "213076b7a395d1a9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 270,
        "y": 120,
        "wires": [
            [
                "30a87203640f65e9"
            ]
        ]
    },
    {
        "id": "30a87203640f65e9",
        "type": "change",
        "z": "bc469b88bbf8641e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ui_update.label",
                "pt": "msg",
                "to": "Power",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "ui_update.units",
                "pt": "msg",
                "to": "payload.unit",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 120,
        "wires": [
            [
                "052b63807c6f06f5",
                "ebe2dabbd7922b2f"
            ]
        ]
    },
    {
        "id": "052b63807c6f06f5",
        "type": "ui-gauge",
        "z": "bc469b88bbf8641e",
        "name": "Power",
        "group": "6e1897c297826e17",
        "order": 3,
        "width": "2",
        "height": "2",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "gauge",
        "units": "units",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#5cd65c"
            },
            {
                "from": "40",
                "color": "#ffc800"
            },
            {
                "from": "70",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 850,
        "y": 120,
        "wires": []
    },
    {
        "id": "c043109f793a35ac",
        "type": "mqtt in",
        "z": "bc469b88bbf8641e",
        "name": "",
        "topic": "CIPio/Debbie/Meter/LVION0987/Current/CurrentAvg",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "213076b7a395d1a9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 250,
        "y": 180,
        "wires": [
            [
                "a23af9c49881279b"
            ]
        ]
    },
    {
        "id": "f6ba639e190e28f5",
        "type": "mqtt in",
        "z": "bc469b88bbf8641e",
        "name": "",
        "topic": "CIPio/Debbie/Meter/LVION0987/Energy/Active/EnergyPTotal",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "213076b7a395d1a9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 280,
        "y": 320,
        "wires": [
            [
                "6b4469eeb0dfb68f"
            ]
        ]
    },
    {
        "id": "37493c1c1e1e41a2",
        "type": "mqtt in",
        "z": "bc469b88bbf8641e",
        "name": "",
        "topic": "CIPio/Debbie/Meter/LVION0987/Voltage/VoltageLLAvg",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "213076b7a395d1a9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 260,
        "y": 240,
        "wires": [
            [
                "b73ef1d774d2eacb"
            ]
        ]
    },
    {
        "id": "a23af9c49881279b",
        "type": "change",
        "z": "bc469b88bbf8641e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ui_update.label",
                "pt": "msg",
                "to": "Current Avg",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "ui_update.units",
                "pt": "msg",
                "to": "payload.unit",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 180,
        "wires": [
            [
                "5e0ec18b139b701f",
                "8bd9e69af9df8320"
            ]
        ]
    },
    {
        "id": "5e0ec18b139b701f",
        "type": "ui-gauge",
        "z": "bc469b88bbf8641e",
        "name": "Current",
        "group": "6e1897c297826e17",
        "order": 2,
        "width": "2",
        "height": "2",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "gauge",
        "units": "units",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#5cd65c"
            },
            {
                "from": "40",
                "color": "#ffc800"
            },
            {
                "from": "70",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 860,
        "y": 200,
        "wires": []
    },
    {
        "id": "6b4469eeb0dfb68f",
        "type": "change",
        "z": "bc469b88bbf8641e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ui_update.label",
                "pt": "msg",
                "to": "Energy",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "ui_update.units",
                "pt": "msg",
                "to": "payload.unit",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 320,
        "wires": [
            [
                "28c268ce8dcb9f74"
            ]
        ]
    },
    {
        "id": "b73ef1d774d2eacb",
        "type": "change",
        "z": "bc469b88bbf8641e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ui_update.label",
                "pt": "msg",
                "to": "Voltage",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "ui_update.units",
                "pt": "msg",
                "to": "payload.unit",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 240,
        "wires": [
            [
                "ec562e26d7d3039f"
            ]
        ]
    },
    {
        "id": "ec562e26d7d3039f",
        "type": "ui-gauge",
        "z": "bc469b88bbf8641e",
        "name": "Voltage",
        "group": "6e1897c297826e17",
        "order": 1,
        "width": "2",
        "height": "2",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "gauge",
        "units": "units",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#5cd65c"
            },
            {
                "from": "120",
                "color": "#ffae00"
            },
            {
                "from": "240",
                "color": "#09a8ec"
            },
            {
                "from": "1000",
                "color": "#eb04fb"
            }
        ],
        "min": 0,
        "max": "1000",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 860,
        "y": 240,
        "wires": []
    },
    {
        "id": "28c268ce8dcb9f74",
        "type": "ui-chart",
        "z": "bc469b88bbf8641e",
        "group": "6e1897c297826e17",
        "name": "Energy",
        "label": "chart",
        "order": 4,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "timestamp",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "kWh",
        "yAxisProperty": "payload",
        "yAxisPropertyType": "msg",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#0095ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "2",
        "height": "6",
        "className": "",
        "interpolation": "linear",
        "x": 860,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "ebe2dabbd7922b2f",
        "type": "ui-chart",
        "z": "bc469b88bbf8641e",
        "group": "6e1897c297826e17",
        "name": "Power",
        "label": "chart",
        "order": 6,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "timestamp",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "kWh",
        "yAxisProperty": "payload",
        "yAxisPropertyType": "msg",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#0095ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "2",
        "height": "6",
        "className": "",
        "interpolation": "linear",
        "x": 850,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "8bd9e69af9df8320",
        "type": "ui-chart",
        "z": "bc469b88bbf8641e",
        "group": "6e1897c297826e17",
        "name": "Current",
        "label": "chart",
        "order": 5,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "timestamp",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "kWh",
        "yAxisProperty": "payload",
        "yAxisPropertyType": "msg",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#0095ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "2",
        "height": "6",
        "className": "",
        "interpolation": "linear",
        "x": 860,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "6753bad9da0e78c3",
        "type": "redis-command",
        "z": "39feb44f8cf5c4ed",
        "server": "0430675ed6c7cd83",
        "command": "KEYS",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 790,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "47545cb9609b1ab7",
        "type": "function",
        "z": "39feb44f8cf5c4ed",
        "name": "Scan evse tags",
        "func": "msg = {}\nmsg.payload = \"evse:*\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 300,
        "wires": [
            [
                "4c37217e79966950"
            ]
        ]
    },
    {
        "id": "588baa4574514246",
        "type": "inject",
        "z": "39feb44f8cf5c4ed",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 380,
        "y": 300,
        "wires": [
            [
                "47545cb9609b1ab7"
            ]
        ]
    },
    {
        "id": "98180d67b61af269",
        "type": "debug",
        "z": "39feb44f8cf5c4ed",
        "name": "debug 69",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 300,
        "wires": []
    },
    {
        "id": "4c37217e79966950",
        "type": "redis-command",
        "z": "39feb44f8cf5c4ed",
        "server": "0430675ed6c7cd83",
        "command": "MGET",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 710,
        "y": 300,
        "wires": [
            [
                "9de4ebb72c265d54"
            ]
        ]
    },
    {
        "id": "9de4ebb72c265d54",
        "type": "function",
        "z": "39feb44f8cf5c4ed",
        "name": "function 24",
        "func": "let evse\nlet evse_str\nlet evses = []\n\n//msg.payload.splice(0,1)\n\nmsg.payload.forEach(function(evse_str) {\n    evse = JSON.parse(evse_str)\n    evses.push(evse)\n})\nmsg.headers = [\n    { key: 'cbId', title: 'ChargeBox ID', align: 'start'},\n    { key: 'type', title: 'Type'},\n    { key: 'amps', title: 'Amps'},\n    { key: 'ports', title: 'Ports'},\n    { key: 'password', title: 'P/W'},\n    { key: 'lat', title: 'lat'},\n    { key: 'lon', title: 'lon'},\n    { key: 'group', title: 'Group'},\n    { key: 'lastcommtime'},\n    { key: 'actions', title: 'Action',align: 'end', sortable: false} \n]\nmsg.payload = evses\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 300,
        "wires": [
            [
                "98180d67b61af269"
            ]
        ]
    },
    {
        "id": "0c16d9188dcd8e46",
        "type": "inject",
        "z": "39feb44f8cf5c4ed",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 460,
        "y": 580,
        "wires": [
            [
                "ce2698839195de2e"
            ]
        ]
    },
    {
        "id": "ce2698839195de2e",
        "type": "link call",
        "z": "39feb44f8cf5c4ed",
        "name": "",
        "links": [
            "9fb2295e62eadba6"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 800,
        "y": 580,
        "wires": [
            [
                "dc82fc7319a5800d"
            ]
        ]
    },
    {
        "id": "9fb2295e62eadba6",
        "type": "link in",
        "z": "39feb44f8cf5c4ed",
        "name": "LnkIn",
        "links": [],
        "x": 725,
        "y": 720,
        "wires": [
            [
                "fdef9aeb7524a157"
            ]
        ]
    },
    {
        "id": "fdef9aeb7524a157",
        "type": "function",
        "z": "39feb44f8cf5c4ed",
        "name": "function 25",
        "func": "msg.payload = \"Hello\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 720,
        "wires": [
            [
                "87a01a410f4b5614"
            ]
        ]
    },
    {
        "id": "87a01a410f4b5614",
        "type": "link out",
        "z": "39feb44f8cf5c4ed",
        "name": "link out 48",
        "mode": "return",
        "links": [],
        "x": 965,
        "y": 720,
        "wires": []
    },
    {
        "id": "dc82fc7319a5800d",
        "type": "debug",
        "z": "39feb44f8cf5c4ed",
        "name": "debug 71",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 580,
        "wires": []
    }
]